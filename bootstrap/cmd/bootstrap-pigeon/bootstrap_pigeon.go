// Code generated by pigeon (https://github.com/PuerkitoBio/pigeon)
// on 2015-05-03 12:30:39.890192608 -0400 EDT

package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"unicode"
	"unicode/utf8"

	"github.com/PuerkitoBio/pigeon/ast"
)

func (c *current) onGrammar1(initializer, rules interface{}) (interface{}, error) {

	pos := c.astPos()

	// create the grammar, assign its initializer
	g := ast.NewGrammar(pos)
	initSlice := toIfaceSlice(initializer)
	if len(initSlice) > 0 {
		g.Init = initSlice[0].(*ast.CodeBlock)
	}

	rulesSlice := toIfaceSlice(rules)
	g.Rules = make([]*ast.Rule, len(rulesSlice))
	for i, duo := range rulesSlice {
		g.Rules[i] = duo.([]interface{})[0].(*ast.Rule)
	}

	return g, nil

}

func (v *ϡvm) callOnGrammar1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onGrammar1(stack["initializer"], stack["rules"])
}

func (c *current) onInitializer1(code interface{}) (interface{}, error) {

	return code, nil

}

func (v *ϡvm) callOnInitializer1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onInitializer1(stack["code"])
}

func (c *current) onRule1(name, display, expr interface{}) (interface{}, error) {

	pos := c.astPos()

	rule := ast.NewRule(pos, name.(*ast.Identifier))
	displaySlice := toIfaceSlice(display)
	if len(displaySlice) > 0 {
		rule.DisplayName = displaySlice[0].(*ast.StringLit)
	}
	rule.Expr = expr.(ast.Expression)

	return rule, nil

}

func (v *ϡvm) callOnRule1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onRule1(stack["name"], stack["display"], stack["expr"])
}

func (c *current) onChoiceExpr1(first, rest interface{}) (interface{}, error) {

	restSlice := toIfaceSlice(rest)
	if len(restSlice) == 0 {
		return first, nil
	}

	pos := c.astPos()
	choice := ast.NewChoiceExpr(pos)
	choice.Alternatives = []ast.Expression{first.(ast.Expression)}
	for _, sl := range restSlice {
		choice.Alternatives = append(choice.Alternatives, sl.([]interface{})[3].(ast.Expression))
	}
	return choice, nil

}

func (v *ϡvm) callOnChoiceExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onChoiceExpr1(stack["first"], stack["rest"])
}

func (c *current) onActionExpr1(expr, code interface{}) (interface{}, error) {

	if code == nil {
		return expr, nil
	}

	pos := c.astPos()
	act := ast.NewActionExpr(pos)
	act.Expr = expr.(ast.Expression)
	codeSlice := toIfaceSlice(code)
	act.Code = codeSlice[1].(*ast.CodeBlock)

	return act, nil

}

func (v *ϡvm) callOnActionExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onActionExpr1(stack["expr"], stack["code"])
}

func (c *current) onSeqExpr1(first, rest interface{}) (interface{}, error) {

	restSlice := toIfaceSlice(rest)
	if len(restSlice) == 0 {
		return first, nil
	}
	seq := ast.NewSeqExpr(c.astPos())
	seq.Exprs = []ast.Expression{first.(ast.Expression)}
	for _, sl := range restSlice {
		seq.Exprs = append(seq.Exprs, sl.([]interface{})[1].(ast.Expression))
	}
	return seq, nil

}

func (v *ϡvm) callOnSeqExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSeqExpr1(stack["first"], stack["rest"])
}

func (c *current) onLabeledExpr2(label, expr interface{}) (interface{}, error) {

	pos := c.astPos()
	lab := ast.NewLabeledExpr(pos)
	lab.Label = label.(*ast.Identifier)
	lab.Expr = expr.(ast.Expression)
	return lab, nil

}

func (v *ϡvm) callOnLabeledExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onLabeledExpr2(stack["label"], stack["expr"])
}

func (c *current) onPrefixedExpr2(op, expr interface{}) (interface{}, error) {

	pos := c.astPos()
	opStr := op.(string)
	if opStr == "&" {
		and := ast.NewAndExpr(pos)
		and.Expr = expr.(ast.Expression)
		return and, nil
	}
	not := ast.NewNotExpr(pos)
	not.Expr = expr.(ast.Expression)
	return not, nil

}

func (v *ϡvm) callOnPrefixedExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onPrefixedExpr2(stack["op"], stack["expr"])
}

func (c *current) onPrefixedOp1() (interface{}, error) {

	return string(c.text), nil

}

func (v *ϡvm) callOnPrefixedOp1() (interface{}, error) {
	return v.cur.onPrefixedOp1()
}

func (c *current) onSuffixedExpr2(expr, op interface{}) (interface{}, error) {

	pos := c.astPos()
	opStr := op.(string)
	switch opStr {
	case "?":
		zero := ast.NewZeroOrOneExpr(pos)
		zero.Expr = expr.(ast.Expression)
		return zero, nil
	case "*":
		zero := ast.NewZeroOrMoreExpr(pos)
		zero.Expr = expr.(ast.Expression)
		return zero, nil
	case "+":
		one := ast.NewOneOrMoreExpr(pos)
		one.Expr = expr.(ast.Expression)
		return one, nil
	default:
		return nil, errors.New("unknown operator: " + opStr)
	}

}

func (v *ϡvm) callOnSuffixedExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSuffixedExpr2(stack["expr"], stack["op"])
}

func (c *current) onSuffixedOp1() (interface{}, error) {

	return string(c.text), nil

}

func (v *ϡvm) callOnSuffixedOp1() (interface{}, error) {
	return v.cur.onSuffixedOp1()
}

func (c *current) onPrimaryExpr7(expr interface{}) (interface{}, error) {

	return expr, nil

}

func (v *ϡvm) callOnPrimaryExpr7() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onPrimaryExpr7(stack["expr"])
}

func (c *current) onRuleRefExpr1(name interface{}) (interface{}, error) {

	ref := ast.NewRuleRefExpr(c.astPos())
	ref.Name = name.(*ast.Identifier)
	return ref, nil

}

func (v *ϡvm) callOnRuleRefExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onRuleRefExpr1(stack["name"])
}

func (c *current) onSemanticPredExpr1(op, code interface{}) (interface{}, error) {

	opStr := op.(string)
	if opStr == "&" {
		and := ast.NewAndCodeExpr(c.astPos())
		and.Code = code.(*ast.CodeBlock)
		return and, nil
	}
	not := ast.NewNotCodeExpr(c.astPos())
	not.Code = code.(*ast.CodeBlock)
	return not, nil

}

func (v *ϡvm) callOnSemanticPredExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSemanticPredExpr1(stack["op"], stack["code"])
}

func (c *current) onSemanticPredOp1() (interface{}, error) {

	return string(c.text), nil

}

func (v *ϡvm) callOnSemanticPredOp1() (interface{}, error) {
	return v.cur.onSemanticPredOp1()
}

func (c *current) onIdentifierName1() (interface{}, error) {

	return ast.NewIdentifier(c.astPos(), string(c.text)), nil

}

func (v *ϡvm) callOnIdentifierName1() (interface{}, error) {
	return v.cur.onIdentifierName1()
}

func (c *current) onLitMatcher1(lit, ignore interface{}) (interface{}, error) {

	rawStr := lit.(*ast.StringLit).Val
	s, err := strconv.Unquote(rawStr)
	if err != nil {
		return nil, err
	}
	m := ast.NewLitMatcher(c.astPos(), s)
	m.IgnoreCase = ignore != nil
	return m, nil

}

func (v *ϡvm) callOnLitMatcher1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onLitMatcher1(stack["lit"], stack["ignore"])
}

func (c *current) onStringLiteral1() (interface{}, error) {

	return ast.NewStringLit(c.astPos(), string(c.text)), nil

}

func (v *ϡvm) callOnStringLiteral1() (interface{}, error) {
	return v.cur.onStringLiteral1()
}

func (c *current) onCharClassMatcher1() (interface{}, error) {

	pos := c.astPos()
	cc := ast.NewCharClassMatcher(pos, string(c.text))
	return cc, nil

}

func (v *ϡvm) callOnCharClassMatcher1() (interface{}, error) {
	return v.cur.onCharClassMatcher1()
}

func (c *current) onAnyMatcher1() (interface{}, error) {

	any := ast.NewAnyMatcher(c.astPos(), ".")
	return any, nil

}

func (v *ϡvm) callOnAnyMatcher1() (interface{}, error) {
	return v.cur.onAnyMatcher1()
}

func (c *current) onCodeBlock1() (interface{}, error) {

	pos := c.astPos()
	cb := ast.NewCodeBlock(pos, string(c.text))
	return cb, nil

}

func (v *ϡvm) callOnCodeBlock1() (interface{}, error) {
	return v.cur.onCodeBlock1()
}

var ϡtheProgram = &ϡprogram{
	instrs: []ϡinstr{
		3747557857111572480, 3747276386423799808, 288230376151711744,
		0, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857113866240, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857254244352,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323492909070, 5188428361671639040, 288230376151711744,
		1152921504606846976, 1729663847851098112, 1441433450224549888,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857106788352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459046143416074240, 4611686018427387904,
		3747557852810575872, 4611686018427387904, 3747557857107509248,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197878145744896, 4611686018427387904, 3747557857120288768,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323495202865,
		5188428511995494400, 288230376151711744, 1152921504606846976,
		1729663998174953472, 1441433600548405248, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810641408,
		3747557857109082112, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459046302329864192, 1152921504606846976,
		1441433639203110912, 4611686018427387904, 3747557857109803008,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197886735679488, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798469292070, 20829148276588544,
		5188428627959611392, 288230376151711744, 1152921504606846976,
		1729664114139070464, 1441433716512522240, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857110786048, 288230376151711744, 1729664152793776128,
		576742227280134144, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857246838784, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857112096768, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197895325614080, 4611686018427387904,
		3747557857262174208, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323499200623, 5188428778283466752,
		288230376151711744, 1152921504606846976, 1729664264462925824,
		1441433866836377600, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857113145344,
		288230376151711744, 1729664303117631488, 576742231575101440,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857184317440, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857114390528,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197908210515968, 4611686018427387904, 3747557857254244352,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857195589632, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323502215324, 5188428971556995072,
		288230376151711744, 1152921504606846976, 1729664457736454144,
		1441434060109905920, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557857116094464, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459046753301430272,
		4611686018427387904, 3747557852810575872, 4611686018427387904,
		3747557857116815360, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197916800450560, 4611686018427387904,
		3747557857167998976, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857254244352,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857120813056, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857118388224, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197929685352448, 4611686018427387904,
		3747557857262174208, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3749246698385047698, 50666294684352713,
		58265320179105792, 5188429199190261760, 288230376151711744,
		1152921504606846976, 1729664685369720832, 1441434287743172608,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857119436800, 288230376151711744,
		1729664724024426496, 576742235870068736, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857125597184,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857129857024, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857121140736, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197942570254336, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124484190404608, 4323455642275676160, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857129857024,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748402273462059262, 72621673567748096, 5188429435413463040,
		288230376151711744, 1152921504606846976, 1729664921592922112,
		1441434523966373888, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557852810706944, 3747557857123106816,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459047225747832832, 1152921504606846976, 1441434562621079552,
		4611686018427387904, 3747557857123893248, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197951160188928,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323508244769, 5188429547082612736, 288230376151711744,
		1152921504606846976, 1729665033262071808, 1441434635635523584,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857124876288, 288230376151711744,
		1729665071916777472, 576742240165036032, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857134182400,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857126121472, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197929685352448,
		4611686018427387904, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857246838784, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323513618762, 5188429718881304576,
		288230376151711744, 1152921504606846976, 1729665205060763648,
		1441434807434215424, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557857127497728, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459047500625739776,
		4611686018427387904, 3747557852810575872, 4611686018427387904,
		3747557857128218624, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197895325614080, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323513225570,
		5188429826255486976, 288230376151711744, 1152921504606846976,
		1729665312434946048, 1441434914808397824, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857129136128, 288230376151711744, 1729665351089651712,
		576742244460003328, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857138704384, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857130381312, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197942570254336, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857138704384,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323517878667, 5188429998054178816, 288230376151711744,
		1152921504606846976, 1729665484233637888, 1441435086607089664,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557852810706944, 3747557857131757568, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459047788388548608,
		1152921504606846976, 1441435125261795328, 4611686018427387904,
		3747557857132478464, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197951160188928, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323517485476,
		5188430109723328512, 288230376151711744, 1152921504606846976,
		1729665595902787584, 1441435198276239360, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857133461504, 288230376151711744, 1729665634557493248,
		576742248754970624, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857182023680, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857134706688, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197964045090816, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124488485371904, 4323455642275676160, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857142702080,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857136345088, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197929685352448,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748683748451942856, 129761961454534656, 5188430350241497088,
		288230376151711744, 1152921504606846976, 1729665836420956160,
		1441435438794407936, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857137065984,
		288230376151711744, 1729665875075661824, 576742253049937920,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857142702080, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323524628981,
		5188430449025744896, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017896311356915712, 1441435533283688448,
		3170815621235474432, 4611686018427387904, 3747557857144406016,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857139294208, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197976929992704,
		4611686018427387904, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857148338176, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857140342784,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197929685352448, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798503109134, 150870587516911616,
		5188430612234502144, 288230376151711744, 1152921504606846976,
		1729666098413961216, 1441435700787412992, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857141063680, 288230376151711744, 1729666137068666880,
		576742257344905216, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857148338176, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747839323528626738, 5188430711018749952, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017896573349920768,
		1441435795276693504, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124492780339200, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124497075306496,
		4323455642275676160, 4611686018427387904, 3747839323530068548,
		5188430784033193984, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017896646364364800, 1441435868291137536,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557857143816192, 288230376151711744, 1729666304572391424,
		576742261639872512, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857155743744, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857144930304, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197929685352448, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857150369792,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857145978880, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197976929992704,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798508745316, 175077435514028032, 5188430981601689600,
		288230376151711744, 1152921504606846976, 1729666467781148672,
		1441436070154600448, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857146699776,
		288230376151711744, 1729666506435854336, 576742265934839808,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857155743744, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323534262920,
		5188431080385937408, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017896942717108224, 1441436164643880960,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124501370273792, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124505665241088, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124509960208384,
		4323455642275676160, 4611686018427387904, 3748120798512415386,
		188588234396139520, 5188431174875217920, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017897037206388736,
		1441436259133161472, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857149714432, 288230376151711744,
		1729666695414415360, 576742270229807104, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857188904960,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857231044608, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857244676096, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857161707520,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857164787712, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124514255175680, 4323455642275676160,
		4611686018427387904, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857120813056, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857153122304,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197929685352448, 4611686018427387904, 3747557857254244352,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124518550142976,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748683748469441233, 205761373415014400,
		5188431488407830528, 288230376151711744, 1152921504606846976,
		1729666974587289600, 1441436576960741376, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857154433024, 288230376151711744, 1729667013241995264,
		576742274524774400, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3748965223444513465, 197598470239421174,
		5188431570012209152, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017897432343379968, 1441436654270152704,
		3170815621235474432, 4611686018427387904, 3747557857184317440,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857156399104, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197908210515968,
		4611686018427387904, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857195589632, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857254244352,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323544224541, 5188431724631031808, 288230376151711744,
		1152921504606846976, 1729667210810490880, 1441436813183942656,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857158103040, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459049506375467008, 4611686018427387904,
		3747557852810575872, 4611686018427387904, 3747557857167998976,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798520607533, 231090955879448576, 5188431832005214208,
		288230376151711744, 1152921504606846976, 1729667318184673280,
		1441436920558125056, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857159675904,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323543503686,
		5188431913609592832, 288230376151711744, 1152921504606846976,
		1729667399789051904, 1441437002162503680, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857160986624, 288230376151711744, 1729667438443757568,
		576742278819741696, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857166426112, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857162231808, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197976929992704, 4611686018427387904,
		3747557857254244352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857246838784,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857163280384, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197895325614080,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798526047084, 249386829365641216, 5188432115473055744,
		288230376151711744, 1152921504606846976, 1729667601652514816,
		1441437204025966592, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857164001280,
		288230376151711744, 1729667640307220480, 576742283114708992,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747276369243930624, 2306124492780339200, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124497075306496,
		4323455642275676160, 4611686018427387904, 3747839323552088980,
		5188432227142205440, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017898089473376256, 1441437311400148992,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557857165836288, 288230376151711744, 1729667747681402880,
		576742287409676288, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124522845110272,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124527140077568, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124531435044864, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124535730012160,
		4323455642275676160, 4611686018427387904, 3748402273507148717,
		265997928915533824, 5188432373171093504, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017898235502264320,
		1441437457429037056, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124540024979456, 4323455642275676160,
		4611686018427387904, 3747557857173110784, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857181302784, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323555693516,
		5188432471955341312, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017898334286512128, 1441437556213284864,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124544319946752, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124548614914048, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857170423808,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747557857168654336, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323557463018, 5188432605099327488,
		288230376151711744, 1152921504606846976, 1729668091278786560,
		1441437693652238336, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557852810706944, 3747557857171537920,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459050395433697280, 1152921504606846976, 1441437732306944000,
		4611686018427387904, 3747276369243930624, 2306124548614914048,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798533649402, 289074801081843712,
		5188432712473509888, 288230376151711744, 1152921504606846976,
		1729668198652968960, 1441437801026420736, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124544319946752, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124548614914048, 4323455642275676160,
		4611686018427387904, 3747557857256931328, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747839323560936475, 5188432811257757696, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017898673588928512,
		1441437895515701248, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857174749184, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747557857168654336,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323562116145, 5188432910042005504, 288230376151711744,
		1152921504606846976, 1729668396221464576, 1441437998594916352,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557852810706944, 3747557857176190976, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459050700376375296,
		1152921504606846976, 1441438037249622016, 4611686018427387904,
		3747276369243930624, 2306124548614914048, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798537385025, 309059524428300288, 5188433017416187904,
		288230376151711744, 1152921504606846976, 1729668503595646976,
		1441438105969098752, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124552909881344,
		4323455642275676160, 4611686018427387904, 3747557857256931328,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557857178812416,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747557857168654336, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323565917291, 5188433159150108672,
		288230376151711744, 1152921504606846976, 1729668645329567744,
		1441438247703019520, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557852810706944, 3747557857179992064,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459050949484478464, 1152921504606846976, 1441438286357725184,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323565327483, 5188433245049454592, 288230376151711744,
		1152921504606846976, 1729668731228913664, 1441438333602365440,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857184317440, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857184841728,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857185693696, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557852810706944, 3747557857182679040, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459051099808333824,
		1152921504606846976, 1441438436681580544, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323569128606,
		5188433395373309952, 288230376151711744, 1152921504606846976,
		1729668881552769024, 1441438483926220800, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857183596544, 288230376151711744, 1729668920207474688,
		576742291704643584, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124557204848640,
		4323455642275676160, 4611686018427387904, 3747557857184841728,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124561499815936,
		4323455642275676160, 4611686018427387904, 3747839323571881155,
		5188433528517296128, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017899390848466944, 1441438612775239680,
		3170815621235474432, 4611686018427387904, 3747557857195589632,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857186283520, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900198058534371328,
		4611686018427387904, 3747276369243930624, 2306124565794783232,
		4323455642275676160, 4611686018427387904, 3747557857187004416,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459051370391273472, 4611686018427387904, 3747557852810575872,
		4611686018427387904, 3747557857187266560, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900198062829338624,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323573388519, 5188433696021020672, 288230376151711744,
		1152921504606846976, 1729669182200479744, 1441438784573931520,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857188184064, 288230376151711744,
		1729669220855185408, 576742295999610880, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747276369243930624,
		2306124570089750528, 4323455642275676160, 4611686018427387904,
		3747557857200504832, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557852810706944,
		3747557857189691392, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459051559369834496, 1152921504606846976,
		1441438896243081216, 4611686018427387904, 3747276369243930624,
		2306124570089750528, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798552917257,
		365354519770431488, 5188433876409647104, 288230376151711744,
		1152921504606846976, 1729669362589106176, 1441438964962557952,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124574384717824, 4323455642275676160,
		4611686018427387904, 3747557857205485568, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124574384717824, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798555145510, 372391394188197888, 5188433983783829504,
		288230376151711744, 1152921504606846976, 1729669469963288576,
		1441439072336740352, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124578679685120,
		4323455642275676160, 4611686018427387904, 3747557857207189504,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124578679685120,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798556783935, 379428268605964288,
		5188434091158011904, 288230376151711744, 1152921504606846976,
		1729669577337470976, 1441439179710922752, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3748120798554359087,
		380554168512806912, 5188434138402652160, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017900000733822976,
		1441439222660595712, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857194934272, 288230376151711744,
		1729669658941849600, 576742300294578176, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747276369243930624,
		2306124570089750528, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857256931328, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798559602026, 391250217627811840, 5188434271546638336,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017900133877809152, 1441439355804581888, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557857196965888,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747557857168654336, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323584398725, 5188434370330886144,
		288230376151711744, 1152921504606846976, 1729669856510345216,
		1441439458883796992, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124582974652416,
		4323455642275676160, 4611686018427387904, 3747557857208500224,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323585971609, 5188434456230232064, 288230376151711744,
		1152921504606846976, 1729669942409691136, 1441439544783142912,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747839323585250718, 5188434499179905024, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017900361511075840,
		1441439583437848576, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124574384717824, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124582974652416,
		4323455642275676160, 4611686018427387904, 3747557857256931328,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3748120798564582838, 412642315857821696,
		5188434597964152832, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017900460295323648, 1441439682222096384,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557857201946624, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857168654336, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323589379537,
		5188434696748400640, 288230376151711744, 1152921504606846976,
		1729670182927859712, 1441439785301311488, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124582974652416, 4323455642275676160, 4611686018427387904,
		3747557857209679872, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323590952421, 5188434782647746560,
		288230376151711744, 1152921504606846976, 1729670268827205632,
		1441439871200657408, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747839323590231530, 5188434825597419520,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017900687928590336, 1441439909855363072, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124578679685120,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857206075392, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857168654336, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323593115146,
		5188434941561536512, 288230376151711744, 1152921504606846976,
		1729670427740995584, 1441440030114447360, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124574384717824, 4323455642275676160, 4611686018427387904,
		3747557857211908096, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323594688030,
		5188435023165915136, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017900885497085952, 1441440107423858688,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124570089750528, 4323455642275676160, 4611686018427387904,
		3747557857211908096, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323595867696,
		5188435100475326464, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017900962806497280, 1441440184733270016,
		3170815621235474432, 4611686018427387904, 3747557857214660608,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857216364544, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857218068480, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857221738496,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857224163328, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748683748527179331, 452618690439020544, 5188435250799181824,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017901113130352640, 1441440335057125376, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124587269619712,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124591564587008, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124595859554304, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124600154521600,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124604449488896, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124608744456192, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124613039423488,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124582974652416, 4323455642275676160, 4611686018427387904,
		3749528173459605093, 461907502111458933, 466411170350235648,
		5188435435482775552, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017901297813946368, 1441440519740719104,
		3170815621235474432, 4611686018427387904, 3747557857224949760,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857224949760, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857224949760, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798578869905, 474566810734166016,
		5188435547151925248, 288230376151711744, 1152921504606846976,
		1729671033331384320, 1441440635704836096, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124617334390784, 4323455642275676160, 4611686018427387904,
		3747557857225474048, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857225474048,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798580639403, 481885160128643072, 5188435658821074944,
		288230376151711744, 1152921504606846976, 1729671145000534016,
		1441440747373985792, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124621629358080,
		4323455642275676160, 4611686018427387904, 3747557857225474048,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857225474048, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857225474048, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857225474048,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857225474048, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857225474048, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857225474048,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857225474048, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3749809648442607301,
		489210995765675737, 494840581200543744, 5188435903634210816,
		288230376151711744, 1152921504606846976, 1729671389813669888,
		1441440992187121664, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124625924325376,
		4323455642275676160, 4611686018427387904, 3747557857225474048,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857225474048, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857225474048, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857225474048,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748683748539500286, 505255314255052800, 5188436058253033472,
		288230376151711744, 1152921504606846976, 1729671544432492544,
		1441441146805944320, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124630219292672,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124561499815936, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124634514259968, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124638809227264,
		4323455642275676160, 4611686018427387904, 3747557857232486400,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857237663744, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857242578944, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323613431612,
		5188436255821529088, 288230376151711744, 1152921504606846976,
		1729671742000988160, 1441441344374439936, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3748120798589486899,
		522699031751688192, 5188436303066169344, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017902165397340160,
		1441441387324112896, 3170815621235474432, 4611686018427387904,
		3747557852810706944, 3747557857227964416, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459054089105571840,
		1152921504606846976, 1441441425978818560, 4611686018427387904,
		3747276369243930624, 2306124643104194560, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124565794783232,
		4323455642275676160, 4611686018427387904, 3747557857229471744,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459054153530081280, 4611686018427387904, 3747557852810575872,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748402273565935446, 531151420016033792, 5188436457684992000,
		288230376151711744, 1152921504606846976, 1729671943864451072,
		1441441546237902848, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857230258176,
		288230376151711744, 1729671982519156736, 576742304589545472,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857237663744, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124647399161856, 4323455642275676160, 4611686018427387904,
		3747557857237663744, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798595057544, 543809655004987392,
		5188436603713880064, 288230376151711744, 1152921504606846976,
		1729672089893339136, 1441441692266790912, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124643104194560, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857256931328, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798596761505, 550846529422753792, 5188436706793095168,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017902569124265984, 1441441791051038720, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557857234124800,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747557857168654336, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323621558204, 5188436805577342976,
		288230376151711744, 1152921504606846976, 1729672291756802048,
		1441441894130253824, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124582974652416,
		4323455642275676160, 4611686018427387904, 3747557857239105536,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323623131088, 5188436891476688896, 288230376151711744,
		1152921504606846976, 1729672377656147968, 1441441980029599744,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747839323622410197, 5188436934426361856, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017902796757532672,
		1441442018684305408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124643104194560, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124651694129152,
		4323455642275676160, 4611686018427387904, 3747557857211908096,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3748120798601742317, 572238627652763648,
		5188437033210609664, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017902895541780480, 1441442117468553216,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124655989096448, 4323455642275676160, 4611686018427387904,
		3747557857243299840, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124660284063744, 4323455642275676160, 4611686018427387904,
		3747557857243824128, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124664579031040, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798603839501,
		581527301884215296, 5188437174944530432, 288230376151711744,
		1152921504606846976, 1729672661123989504, 1441442263497441280,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747839323626801174, 5188437217894203392, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017903080225374208,
		1441442302152146944, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323626539042,
		5188437260843876352, 288230376151711744, 1152921504606846976,
		1729672747023335424, 1441442349396787200, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124668873998336, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124557204848640, 4323455642275676160,
		4611686018427387904, 3747557852810641408, 3747557857243561984,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459055085537984512, 1152921504606846976, 1441442422411231232,
		4611686018427387904, 3747276369243930624, 2306124673168965632,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857244413952, 288230376151711744, 1729672875872354304,
		576742308884512768, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124660284063744,
		4323455642275676160, 4611686018427387904, 3747557857252016128,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124664579031040,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798608689239, 602356450160803840,
		5188437492772110336, 288230376151711744, 1152921504606846976,
		1729672978951569408, 1441442581325021184, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857246052352, 288230376151711744, 1729673017606275072,
		576742313179480064, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124677463932928,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857247363072, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857168654336, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323634403456,
		5188437647390932992, 288230376151711744, 1152921504606846976,
		1729673133570392064, 1441442735943843840, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810641408,
		3747557857248477184, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459055437725302784, 1152921504606846976,
		1441442774598549504, 4611686018427387904, 3747276369243930624,
		2306124660284063744, 4323455642275676160, 4611686018427387904,
		3747557857252016128, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124664579031040, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798613276829,
		622059698530549760, 5188437793419821056, 288230376151711744,
		1152921504606846976, 1729673279599280128, 1441442881972731904,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747839323635976358, 5188437836369494016, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017903698700664832,
		1441442920627437568, 3170815621235474432, 4611686018427387904,
		3747557852810706944, 3747557857251426304, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459055622408896512,
		1152921504606846976, 1441442959282143232, 4611686018427387904,
		3747557857256669184, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857256931328,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857169571840, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798616094921, 634444597505818624, 5188437982398382080,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017903844729552896, 1441443066656325632, 3170815621235474432,
		4611686018427387904, 3747557852810706944, 3747557857253588992,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459055768437784576, 1152921504606846976, 1441443105311031296,
		4611686018427387904, 3747557857256669184, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857177763840, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323641612523,
		5188438102657466368, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017903964988637184, 1441443186915409920,
		3170815621235474432, 4611686018427387904, 3747557852810706944,
		3747557857255489536, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459055888696868864, 1152921504606846976,
		1441443225570115584, 4611686018427387904, 3747276369243930624,
		2306124681758900224, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124686053867520, 4323455642275676160,
		4611686018427387904, 3747557857254244352, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124690348834816, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323643971855, 5188438257276289024, 288230376151711744,
		1152921504606846976, 1729673743455748096, 1441443345829199872,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857256079360, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857181302784,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857258831872, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459056081970397184,
		4611686018427387904, 3747557852810575872, 4611686018427387904,
		3747557857256931328, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798621993256, 662029145223462912,
		5188438407600144384, 288230376151711744, 1152921504606846976,
		1729673893779603456, 1441443496153055232, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557857254244352,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857263091712, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323647576390,
		5188438497794457600, 288230376151711744, 1152921504606846976,
		1729673983973916672, 1441443586347368448, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3748120798621272373,
		669628969594650624, 5188438545039097856, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017904407370268672,
		1441443629297041408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124540024979456, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857262829568,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
	},
	instrToRule: []int{
		-1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		3, 3, 3, 3, 3, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 15, 15, 15, 15, 15, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
		16, 16, 16, 16, 18, 18, 18, 18, 18, 18,
		18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
		18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
		18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
		18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
		18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
		18, 18, 18, 18, 18, 18, 18, 18, 18, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
		20, 20, 20, 20, 20, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 26, 26, 26, 26,
		26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
		26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
		26, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 36, 36, 36, 36, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
		37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 23, 23, 23,
		23, 23, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		42, 42, 42, 42, 43, 43, 43, 43, 43, 43,
		43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
		43, 43, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
		12, 12, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
		46, 46, 46, 46, 46, 46, 46, 46, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
		47, 47, 47, 47, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 57, 57, 57, 57, 59, 59, 59, 59,
		58, 58, 58, 58, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 60, 60, 60, 60, 60, 60, 60,
		60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
		60, 60, 60, 60, 60, 60, 60, 60, 60, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
		61, 61, 61, 61, 61, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 64, 64, 64, 64, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
		7, 7, 7, 7, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
		66, 66, 66, 66, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 68, 68,
		68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
		68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
		68, 68, 68, 68, 68, 68, 67, 67, 67, 67,
		41, 41, 41, 41, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
		69, 69,
	},
	ss: []string{
		"Grammar", "__", "initializer",
		"Initializer", "rules", "Rule",
		"code", "CodeBlock", "EOS",
		"name", "IdentifierName", "display",
		"StringLiteral", "RuleDefOp", "expr",
		"Expression", "ChoiceExpr", "first",
		"ActionExpr", "rest", "SeqExpr",
		"LabeledExpr", "label", "Identifier",
		"PrefixedExpr", "op", "PrefixedOp",
		"SuffixedExpr", "PrimaryExpr", "SuffixedOp",
		"LitMatcher", "CharClassMatcher", "AnyMatcher",
		"RuleRefExpr", "SemanticPredExpr", "SemanticPredOp",
		"SourceChar", "Comment", "MultiLineComment",
		"SingleLineComment", "MultiLineCommentNoLineTerminator", "EOL",
		"IdentifierStart", "IdentifierPart", "lit",
		"ignore", "DoubleStringChar", "SingleStringChar",
		"RawStringChar", "DoubleStringEscape", "SingleStringEscape",
		"CommonEscapeSequence", "SingleCharEscape", "OctalEscape",
		"HexEscape", "LongUnicodeEscape", "ShortUnicodeEscape",
		"OctalDigit", "HexDigit", "DecimalDigit",
		"ClassCharRange", "ClassChar", "UnicodeClassEscape",
		"CharClassEscape", "SingleCharUnicodeClass", "UnicodeClass",
		"Code", "Whitespace", "_",
		"EOF",
	},
	ms: []ϡmatcher{
		ϡstringMatcher{
			ignoreCase: false,
			value:      "/",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ":",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "&",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "!",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "?",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "*",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "+",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "(",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ")",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "=",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "<-",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "←",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "⟵",
		},
		ϡanyMatcher{},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "/*",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "*/",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "//",
		},
		ϡcharClassMatcher{
			ignoreCase: true,
			inverted:   false,
			chars:      []rune{'_'},
			ranges:     []rune{'a', 'z'},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '9'},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "i",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\"",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "'",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "`",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\\",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "a",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "b",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "n",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "f",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "r",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "t",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "v",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "x",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "U",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "u",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '7'},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			ignoreCase: true,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '9', 'a', 'f'},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "[",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "]",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "-",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "^",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "p",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "{",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "}",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'L', 'M', 'N', 'C', 'P', 'Z', 'S'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ".",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'{', '}'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{' ', '\t', '\r'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\n",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ";",
		},
	},
	as: []func(*ϡvm) (interface{}, error){
		(*ϡvm).callOnGrammar1,
		(*ϡvm).callOnInitializer1,
		(*ϡvm).callOnRule1,
		(*ϡvm).callOnChoiceExpr1,
		(*ϡvm).callOnActionExpr1,
		(*ϡvm).callOnSeqExpr1,
		(*ϡvm).callOnLabeledExpr2,
		(*ϡvm).callOnPrefixedExpr2,
		(*ϡvm).callOnPrefixedOp1,
		(*ϡvm).callOnSuffixedExpr2,
		(*ϡvm).callOnSuffixedOp1,
		(*ϡvm).callOnPrimaryExpr7,
		(*ϡvm).callOnRuleRefExpr1,
		(*ϡvm).callOnSemanticPredExpr1,
		(*ϡvm).callOnSemanticPredOp1,
		(*ϡvm).callOnIdentifierName1,
		(*ϡvm).callOnLitMatcher1,
		(*ϡvm).callOnStringLiteral1,
		(*ϡvm).callOnCharClassMatcher1,
		(*ϡvm).callOnAnyMatcher1,
		(*ϡvm).callOnCodeBlock1,
	},
	bs: []func(*ϡvm) (bool, error){},
}

//+pigeon: err.go

var (
	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errNoMatch is returned if no match could be found and no other
	// error has been raised.
	errNoMatch = errors.New("no match found")
)

// errList cumulates the errors found by the parser. It is part
// of the supported API.
type errList []error

// ϡadd adds err to the list of errors.
func (e *errList) ϡadd(err error) {
	*e = append(*e, err)
}

// ϡerr returns the error list as an error, or nil if the list is empty.
func (e errList) ϡerr() error {
	if len(e) == 0 {
		return nil
	}
	e.ϡdedupe()
	return e
}

// ϡdedupe removes duplicate error messages from the list.
func (e *errList) ϡdedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

// Error returns the error message for the errList. It implements the
// error interface.
func (e errList) Error() string {
	var buf bytes.Buffer

	for i, err := range e {
		if i > 0 {
			buf.WriteRune('\n')
		}
		buf.WriteString(err.Error())
	}
	return buf.String()
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
// It is part of the supported API.
type parserError struct {
	Inner   error
	ϡpos    position
	ϡprefix string
}

// Error returns the prefixed error message. It implements the error
// interface.
func (p *parserError) Error() string {
	return p.ϡprefix + ": " + p.Inner.Error()
}

//+pigeon: matchers.go

// ϡpeekReader is the interface that defines the peek and read
// methods.
type ϡpeekReader interface {
	peek() ϡsvpt
	read()
}

// ϡmatcher is the interface that defines the match method.
type ϡmatcher interface {
	match(ϡpeekReader) bool
}

// ϡanyMatcher is a matcher that matches any character but the
// EOF.
type ϡanyMatcher struct{}

// match tries to match a character in the peekReader.
func (a ϡanyMatcher) match(pr ϡpeekReader) bool {
	pt := pr.peek()
	pr.read()
	return pt.rn != utf8.RuneError
}

func (a ϡanyMatcher) String() string {
	return "."
}

// ϡstringMatcher is a matcher that matches a string.
type ϡstringMatcher struct {
	ignoreCase bool
	value      string // value must be lowercase if ignoreCase is true
}

// match tries to match the string in the peekReader.
func (s ϡstringMatcher) match(pr ϡpeekReader) bool {
	for _, want := range s.value {
		pt := pr.peek()
		if s.ignoreCase {
			pt.rn = unicode.ToLower(pt.rn)
		}
		if pt.rn != want {
			return false
		}
		pr.read()
	}
	return true
}

func (s ϡstringMatcher) String() string {
	v := strconv.Quote(s.value)
	if s.ignoreCase {
		v += "i"
	}
	return v
}

// ϡcharClassMatcher is a matcher that matches classes of characters.
type ϡcharClassMatcher struct {
	chars   []rune // runes must be lowercase if ignoreCase is true
	ranges  []rune // TODO : document potential issues if ignore case is used with ranges
	classes []*unicode.RangeTable

	ignoreCase bool
	inverted   bool
}

func (c ϡcharClassMatcher) String() string {
	var buf bytes.Buffer

	buf.WriteString("[")
	if c.inverted {
		buf.WriteString("^")
	}
	for _, c := range c.chars {
		buf.WriteRune(c)
	}
	for i := 0; i < len(c.ranges); i += 2 {
		buf.WriteString(fmt.Sprintf("%c-%c", c.ranges[i], c.ranges[i+1]))
	}
	// unicode classes can't be stringified
	if l := len(c.classes); l > 0 {
		buf.WriteString(fmt.Sprintf("\\p{%d classes}", l))
	}
	buf.WriteString("]")
	if c.ignoreCase {
		buf.WriteString("i")
	}
	return buf.String()
}

// match tries to match classes of characters in the peekReader.
func (c ϡcharClassMatcher) match(pr ϡpeekReader) bool {
	pt := pr.peek()
	pr.read()

	if c.ignoreCase {
		pt.rn = unicode.ToLower(pt.rn)
	}

	// try to match in the list of available chars
	for _, rn := range c.chars {
		if pt.rn == rn {
			return !c.inverted
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(c.ranges); i += 2 {
		if pt.rn >= c.ranges[i] && pt.rn <= c.ranges[i+1] {
			return !c.inverted
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range c.classes {
		if unicode.Is(cl, pt.rn) {
			return !c.inverted
		}
	}

	return c.inverted
}

// ϡrangeTable returns the corresponding unicode range table from the
// provided class name.
func ϡrangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

//+pigeon: ops.go

// ϡop represents an opcode.
type ϡop byte

// list of opcodes in the pigeon VM.
const (
	ϡopExit ϡop = iota
	ϡopCall
	ϡopCallA
	ϡopCallB
	ϡopCumulOrF
	ϡopJump
	ϡopJumpIfF
	ϡopJumpIfT
	ϡopMatch
	ϡopNilIfF
	ϡopNilIfT
	ϡopPop
	ϡopPopVJumpIfF
	ϡopPush
	ϡopRestore
	ϡopRestoreIfF
	ϡopReturn
	ϡopStoreIfT
	ϡopTakeLOrJump
	ϡopmax // must always be after the last valid opcode

	// ϡopPlaceholder is an (invalid) opcode used by the Generator
	// to insert opcodes that need the index of the starting instruction
	// of a rule that hasn't been generated yet.
	//
	// It must be placed after ϡopmax (because it is invalid in the
	// final program) and it has one argument, the index in the strings
	// array of the identifier of the rule.
	ϡopPlaceholder
)

// ϡlookupOp translates an opcode to a string.
var ϡlookupOp = []string{
	ϡopExit: "exit", ϡopCall: "call", ϡopCallA: "callA",
	ϡopCallB: "callB", ϡopCumulOrF: "cumulOrF",
	ϡopJump: "jump", ϡopJumpIfF: "jumpIfF", ϡopJumpIfT: "jumpIfT",
	ϡopMatch: "match", ϡopNilIfF: "nilIfF", ϡopNilIfT: "nilIfT",
	ϡopPop: "pop", ϡopPopVJumpIfF: "popVJumpIfF",
	ϡopPush: "push", ϡopRestore: "restore", ϡopRestoreIfF: "restoreIfF",
	ϡopReturn: "return", ϡopStoreIfT: "storeIfT", ϡopTakeLOrJump: "takeLOrJump",
}

// String returns the string representation of the opcode.
func (op ϡop) String() string {
	if 0 <= op && int(op) < len(ϡlookupOp) {
		return ϡlookupOp[op]
	}
	return "ϡop(" + strconv.Itoa(int(op)) + ")"
}

// ϡinstr encodes an opcode with its arguments as a 64-bits unsigned
// integer. The bits are used as follows:
//
// o : 6 bits = opcode (max=63)
// n : 10 bits = for PUSHL, number of values in array (max=1023)
// l : 16 bits = instruction index (max=65535)
//
// So a single PUSH instruction can encode 2 indices (first arg is the stack ID).
// The 64-bit value looks like this:
// oooooonn nnnnnnnn llllllll llllllll llllllll llllllll llllllll llllllll
//
// And if a PUSH (L) instruction has more than 2 indices, it can store 4 full
// indices per subsequent values (4 * 16 bits = 64 bits).
type ϡinstr uint64

// limits and masks.
const (
	ϡiBits = 64
	ϡlBits = 16
	ϡnBits = 10
	ϡoBits = 6
	ϡlPerI = ϡiBits / ϡlBits

	ϡlMask = 1<<ϡlBits - 1
	ϡnMask = 1<<ϡnBits - 1
	ϡoMask = 1<<ϡoBits - 1
)

// decode decodes the instruction and returns the 5 parts:
// the opcode, the number of L array values, and the 3 instruction
// indices.
func (i ϡinstr) decode() (op ϡop, n, ix0, ix1, ix2 int) {
	ix2 = int(i & ϡlMask)
	i >>= ϡlBits
	ix1 = int(i & ϡlMask)
	i >>= ϡlBits
	ix0 = int(i & ϡlMask)
	i >>= ϡlBits
	n = int(i & ϡnMask)
	i >>= ϡnBits
	op = ϡop(i & ϡoMask)
	return
}

// decodeLs decodes the instruction as a list of L instruction
// indices (as a follow-up value to a PUSHL opcode).
func (i ϡinstr) decodeLs() (ix0, ix1, ix2, ix3 int) {
	ix3 = int(i & ϡlMask)
	i >>= ϡlBits
	ix2 = int(i & ϡlMask)
	i >>= ϡlBits
	ix1 = int(i & ϡlMask)
	i >>= ϡlBits
	ix0 = int(i & ϡlMask)
	return
}

// ϡencodeInstr encodes the provided operation and its arguments into
// a list of instruction values. It may return an error if any part
// of the instruction overflows the allowed values.
func ϡencodeInstr(op ϡop, args ...int) ([]ϡinstr, error) {
	var is []ϡinstr

	if op >= ϡopmax && op != ϡopPlaceholder {
		return nil, errors.New("invalid op value")
	}
	if len(args) > ϡnMask {
		return nil, errors.New("too many arguments")
	}

	// first instruction contains opcode
	is = append(is, ϡinstr(op)<<(ϡiBits-ϡoBits))
	n := uint(len(args))
	if n == 0 {
		return is, nil
	}
	off := uint(ϡiBits - ϡoBits - ϡnBits)
	is[0] |= ϡinstr(n) << off

	ix := 0
	for i, arg := range args {
		if arg > ϡlMask {
			return nil, errors.New("argument value too big")
		}

		mod := uint((i + 1) % ϡlPerI)
		if mod == 0 {
			is = append(is, 0)
			ix++
		}

		is[ix] |= ϡinstr(arg) << (off - (mod * ϡlBits))
	}

	return is, nil
}

//+pigeon: parser.go

// position records a position in the text. It is part of the supported
// API.
type position struct {
	// line is the 1-based index of the line of the current rune.
	line int
	// col is the 1-based index of the current rune on the line.
	col int
	// offset is the 0-based index of the starting byte of the current rune.
	offset int
}

// String formats a position as a string.
func (p position) String() string {
	return fmt.Sprintf("%d:%d (%d)", p.line, p.col, p.offset)
}

// current represents current matching data. It is the value on which
// action and predicate code blocks are generated as methods. It is
// part of the supported API.
type current struct {
	// pos holds the start position of the current match.
	pos position
	// text contains the raw text of the match. It is a slice in the
	// source data, so it should not be modified.
	text []byte
}

// ϡsvpt stores all state required to go back to a point in the
// parser.
type ϡsvpt struct {
	position
	rn rune
	w  int
}

// ϡparser parses the input text as rune code points.
type ϡparser struct {
	data []byte
	pt   ϡsvpt
	cur  current
}

// peek returns the current savepoint information.
func (p *ϡparser) peek() ϡsvpt {
	return p.pt
}

// read advances the parser to the next rune.
func (p *ϡparser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n

	if rn == utf8.RuneError {
		if n > 0 {
			panic(errInvalidEncoding)
		}
	} else {
		p.pt.col++
		if rn == '\n' {
			p.pt.line++
			p.pt.col = 0
		}
	}
}

// sliceFrom gets the slice of bytes from the start savepoint to
// the current position, non inclusive.
func (p *ϡparser) sliceFrom(start ϡsvpt) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

//+pigeon: pub.go

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*ϡvm) Option

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.debug
		v.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.memoize
		v.memoize = b
		return Memoize(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.recover
		v.recover = b
		return Recover(old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (interface{}, error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	p := &ϡparser{
		data: b,
		pt:   ϡsvpt{position: position{line: 1}},
	}
	v := &ϡvm{
		filename: filename,
		parser:   p,
		recover:  true,
	}
	return v.setOptions(opts).run(ϡtheProgram)
}

//+pigeon: stacks.go

// ϡpstack implements the Position stack. It stores savepoints.
type ϡpstack []ϡsvpt

// push adds a value on the stack.
func (p *ϡpstack) push(pt ϡsvpt) {
	*p = append(*p, pt)
}

// pop removes a value from the stack.
func (p *ϡpstack) pop() ϡsvpt {
	n := len(*p)
	if n == 0 {
		panic("pstack is empty")
	}
	v := (*p)[n-1]
	*p = (*p)[:n-1]
	return v
}

// ϡistack implements the Instruction index stack. It stores integers.
type ϡistack []int

// push adds a value on the stack.
func (i *ϡistack) push(v int) {
	*i = append(*i, v)
}

// pop removes a value from the stack.
func (i *ϡistack) pop() int {
	n := len(*i)
	if n == 0 {
		panic("istack is empty")
	}
	v := (*i)[n-1]
	*i = (*i)[:n-1]
	return v
}

// ϡvstack implements the Value stack. It stores empty interfaces.
type ϡvstack []interface{}

// push adds a value on the stack.
func (v *ϡvstack) push(i interface{}) {
	*v = append(*v, i)
}

// pop removes a value from the stack.
func (v *ϡvstack) pop() interface{} {
	i := v.peek()
	*v = (*v)[:len(*v)-1]
	return i
}

// peek returns the value at the top of the stack, leaving it there.
func (v *ϡvstack) peek() interface{} {
	n := len(*v)
	if n == 0 {
		panic("vstack is empty")
	}
	i := (*v)[n-1]
	return i
}

// ϡlstack implements the Loop stack. It stores slices of integers.
type ϡlstack [][]int

// push adds a value on the stack.
func (l *ϡlstack) push(a []int) {
	*l = append(*l, a)
}

// pop removes a value from the stack.
func (l *ϡlstack) pop() []int {
	n := len(*l)
	if n == 0 {
		panic("lstack is empty")
	}
	a := (*l)[n-1]
	*l = (*l)[:n-1]
	return a
}

// take removes the integer at index 0 from the slice at the top of the
// stack. It returns -1 if the slice is empty. The slice is left on the
// stack.
func (l *ϡlstack) take() int {
	n := len(*l)
	if n == 0 {
		panic("lstack is empty")
	}

	v := -1
	a := (*l)[n-1]
	if len(a) > 0 {
		v = a[0]
		(*l)[n-1] = a[1:]
	}
	return v
}

// ϡargsSet holds the list of arguments (key and value) to pass
// to the code blocks.
type ϡargsSet map[string]interface{}

// ϡastack is a stack of ϡargsSet.
type ϡastack []ϡargsSet

// push adds an empty ϡargsSet on top of the stack.
func (a *ϡastack) push() {
	*a = append(*a, ϡargsSet{})
}

// pop removes the top ϡargsSet from the stack.
func (a *ϡastack) pop() {
	n := len(*a)
	if n == 0 {
		panic("astack is empty")
	}
	*a = (*a)[:n-1]
}

// peek returns the current top ϡargsSet.
func (a *ϡastack) peek() ϡargsSet {
	n := len(*a)
	if n == 0 {
		panic("astack is empty")
	}
	as := (*a)[n-1]
	return as
}

//+pigeon: vm.go

// ϡsentinel is a type used to define sentinel values that shouldn't
// be equal to something else.
type ϡsentinel int

const (
	// ϡmatchFailed is a sentinel value used to indicate a match failure.
	ϡmatchFailed ϡsentinel = iota - 1
)

const (
	// stack IDs, used in PUSH and POP's first argument
	ϡpstackID = iota + 1
	ϡlstackID
	ϡvstackID
	ϡistackID
	ϡastackID

	// special V stack values
	ϡvValNil    = 0
	ϡvValFailed = 1
	ϡvValEmpty  = 2
)

var (
	ϡstackNm = []string{
		ϡpstackID: "P",
		ϡlstackID: "L",
		ϡvstackID: "V",
		ϡistackID: "I",
		ϡastackID: "A",
	}
)

// special values that may be pushed on the V stack.
var ϡvSpecialValues = []interface{}{
	nil,
	ϡmatchFailed,
	[]interface{}(nil),
}

type ϡmemoizedResult struct {
	v  interface{}
	pt ϡsvpt
}

// ϡprogram is the data structure that is generated by the builder
// based on an input PEG. It contains the program information required
// to execute the grammar using the vm.
type ϡprogram struct {
	instrs []ϡinstr

	// lists
	ms []ϡmatcher
	as []func(*ϡvm) (interface{}, error)
	bs []func(*ϡvm) (bool, error)
	ss []string

	// instrToRule is the mapping of an instruction index to a rule
	// identifier (or display name) in the ss list:
	//
	// ss[instrToRule[instrIndex]] == name of the rule
	//
	// Since instructions are limited to 65535, the size of this slice
	// is bounded.
	instrToRule []int
}

// String formats the program's instructions in a human-readable format.
func (pg ϡprogram) String() string {
	var buf bytes.Buffer
	var n int

	for i, instr := range pg.instrs {
		if n > 0 {
			n -= 4
			continue
		}
		_, n, _, _, _ = instr.decode()
		n -= 3

		buf.WriteString(fmt.Sprintf("[%3d]: %s\n", i, pg.instrToString(instr, i)))
	}
	return buf.String()
}

// instrToString formats an instruction in a human-readable format, in the
// context of the program.
func (pg ϡprogram) instrToString(instr ϡinstr, ix int) string {
	var buf bytes.Buffer

	op, n, a0, a1, a2 := instr.decode()
	rule := pg.ruleNameAt(ix)
	if rule == "" {
		rule = "<none>"
	}
	stdFmt := "%s.%s"
	switch op {
	case ϡopCall, ϡopCumulOrF, ϡopReturn, ϡopExit, ϡopRestore,
		ϡopRestoreIfF, ϡopNilIfF, ϡopNilIfT:
		buf.WriteString(fmt.Sprintf(stdFmt, rule, op))
	case ϡopCallA, ϡopCallB, ϡopJump, ϡopJumpIfT, ϡopJumpIfF, ϡopPopVJumpIfF, ϡopTakeLOrJump:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d", rule, op, a0))
	case ϡopPush:
		buf.WriteString(fmt.Sprintf(stdFmt+" %s %d %d", rule, op, ϡstackNm[a0], a1, a2))
		orin := n
		n -= 3
		for n > 0 {
			ix++
			a0, a1, a2, a3 := pg.instrs[ix].decodeLs()
			n -= 4
			buf.WriteString(fmt.Sprintf(" %d %d %d %d", a0, a1, a2, a3))
		}
		buf.WriteString(fmt.Sprintf(" (n=%d)", orin))
	case ϡopPop:
		buf.WriteString(fmt.Sprintf(stdFmt+" %s", rule, op, ϡstackNm[a0]))
	case ϡopMatch:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d (%s)", rule, op, a0, pg.ms[a0]))
	case ϡopStoreIfT:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d (%s)", rule, op, a0, pg.ss[a0]))
	default:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d %d", rule, op, a0, a1))
	}
	return buf.String()
}

// ruleNameAt returns the name of the rule that contains the instruction
// index. It returns an empty string is the instruction is not part of a
// rule (bootstrap instruction, invalid index).
func (pg ϡprogram) ruleNameAt(instrIx int) string {
	if instrIx < 0 || instrIx >= len(pg.instrToRule) {
		return ""
	}
	ssIx := pg.instrToRule[instrIx]
	if ssIx < 0 || ssIx >= len(pg.ss) {
		return ""
	}
	return pg.ss[ssIx]
}

// ϡvm holds the state to execute a compiled grammar.
type ϡvm struct {
	// input
	filename string
	parser   *ϡparser

	// options
	debug   bool
	memoize bool
	recover bool
	// TODO : no bounds checking option (for stacks)? benchmark to see if it's worth it.

	// program data
	pc  int
	pg  *ϡprogram
	cur current

	// stacks
	p ϡpstack
	l ϡlstack
	v ϡvstack
	i ϡistack
	a ϡastack

	// TODO: memoization...
	// TODO: farthest failure position

	// error list
	errs errList
}

// setOptions applies the options in sequence on the vm. It returns the
// vm to allow for chaining calls.
func (v *ϡvm) setOptions(opts []Option) *ϡvm {
	for _, opt := range opts {
		opt(v)
	}
	return v
}

// addErr adds the error at the current parser position, without rule name
// information.
func (v *ϡvm) addErr(err error) {
	v.addErrAt(err, -1, v.parser.pt.position)
}

// addErrAt adds the error at the specified position, for the instruction
// at instrIx.
func (v *ϡvm) addErrAt(err error, instrIx int, pos position) {
	var buf bytes.Buffer
	if v.filename != "" {
		buf.WriteString(v.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%s", pos))

	ruleNm := v.pg.ruleNameAt(instrIx)
	if ruleNm != "" {
		buf.WriteString(": ")
		buf.WriteString("rule " + ruleNm)
	}

	pe := &parserError{Inner: err, ϡprefix: buf.String()}
	v.errs.ϡadd(pe)
}

// dumpSnapshot writes a dump of the current VM state to w.
func (v *ϡvm) dumpSnapshot(w io.Writer) {
	var buf bytes.Buffer

	if v.filename != "" {
		buf.WriteString(v.filename + ":")
	}
	buf.WriteString(fmt.Sprintf("%s: %#U\n", v.parser.pt.position, v.parser.pt.rn))

	// write the next 5 instructions
	ix := v.pc - 1
	if ix > 0 {
		ix--
	}
	stdFmt := ". [%d]: %s"
	for i := 0; i < 5; i++ {
		stdFmt := stdFmt
		if ix == v.pc-1 {
			stdFmt = ">" + stdFmt[1:]
		}
		instr := v.pg.instrs[ix]
		op, n, _, _, _ := instr.decode()
		switch op {
		case ϡopCall:
			buf.WriteString(fmt.Sprintf(stdFmt+"\n", ix, v.pg.instrToString(instr, ix)))
			ix = v.i.pop() // continue with instructions at this index
			v.i.push(ix)
			continue
		default:
			buf.WriteString(fmt.Sprintf(stdFmt+"\n", ix, v.pg.instrToString(instr, ix)))
		}
		ix++
		n -= 3
		for n > 0 {
			ix++
			n -= 4
		}
		if ix >= len(v.pg.instrs) {
			break
		}
	}

	// print the stacks
	buf.WriteString("[ P: ")
	for i := 0; i < 3; i++ {
		if len(v.p) <= i {
			break
		}
		if i > 0 {
			buf.WriteString(", ")
		}
		val := v.p[len(v.p)-i-1]
		buf.WriteString(fmt.Sprintf("\"%v\"", val))
	}
	buf.WriteString(" ]\n[ V: ")
	for i := 0; i < 3; i++ {
		if len(v.v) <= i {
			break
		}
		if i > 0 {
			buf.WriteString(", ")
		}
		val := v.v[len(v.v)-i-1]
		buf.WriteString(fmt.Sprintf("%#v", val))
	}
	buf.WriteString(" ]\n[ I: ")
	for i := 0; i < 3; i++ {
		if len(v.i) <= i {
			break
		}
		if i > 0 {
			buf.WriteString(", ")
		}
		val := v.i[len(v.i)-i-1]
		buf.WriteString(fmt.Sprintf("%d", val))
	}
	buf.WriteString(" ]\n[ L: ")
	for i := 0; i < 3; i++ {
		if len(v.l) <= i {
			break
		}
		if i > 0 {
			buf.WriteString(", ")
		}
		val := v.l[len(v.l)-i-1]
		buf.WriteString(fmt.Sprintf("%v", val))
	}
	buf.WriteString(" ]\n")
	fmt.Fprintln(w, buf.String())
}

// run executes the provided program in this VM, and returns the result.
func (v *ϡvm) run(pg *ϡprogram) (interface{}, error) {
	v.pg = pg
	ret := v.dispatch()

	// if the match failed, translate that to a nil result and make
	// sure it returns an error
	if ret == ϡmatchFailed {
		ret = nil
		if len(v.errs) == 0 {
			v.addErr(errNoMatch)
		}
	}

	return ret, v.errs.ϡerr()
}

// dispatch is the proper execution method of the VM, it loops over
// the instructions and executes each opcode.
func (v *ϡvm) dispatch() interface{} {
	var instrPath []int
	if v.debug {
		fmt.Fprintln(os.Stderr, v.pg)
		defer func() {
			var buf bytes.Buffer

			buf.WriteString("Execution path:\n")
			for _, ix := range instrPath {
				buf.WriteString(fmt.Sprintf("[%3d]: %s\n", ix, v.pg.instrToString(v.pg.instrs[ix], ix)))
			}
			fmt.Fprintln(os.Stderr, buf.String())
		}()
	}

	// move to first rune before starting the loop
	v.parser.read()
	for {
		// fetch and decode the instruction
		instr := v.pg.instrs[v.pc]
		op, n, a0, a1, a2 := instr.decode()
		instrPath = append(instrPath, v.pc)

		// increment program counter
		v.pc++

		switch op {
		case ϡopCall:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			ix := v.i.pop()
			v.i.push(v.pc)
			v.pc = ix

		case ϡopCallA:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			v.v.pop()
			start := v.p.pop()
			v.cur.pos = start.position
			v.cur.text = v.parser.sliceFrom(start)
			if a0 >= len(v.pg.as) {
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}
			fn := v.pg.as[a0]
			val, err := fn(v)
			if err != nil {
				v.addErrAt(err, v.pc-1, start.position)
			}
			v.v.push(val)

		case ϡopCallB:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			v.cur.pos = v.parser.pt.position
			v.cur.text = nil
			if a0 >= len(v.pg.bs) {
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}
			fn := v.pg.bs[a0]
			val, err := fn(v)
			if err != nil {
				v.addErrAt(err, v.pc-1, v.parser.pt.position)
			}
			if !val {
				v.v.push(ϡmatchFailed)
				break
			}
			v.v.push(nil)

		case ϡopCumulOrF:
			va, vb := v.v.pop(), v.v.pop()
			if va == ϡmatchFailed {
				v.v.push(ϡmatchFailed)
				break
			}
			switch vb := vb.(type) {
			case []interface{}:
				vb = append(vb, va)
				v.v.push(vb)
			case ϡsentinel:
				v.v.push([]interface{}{va})
			default:
				panic(fmt.Sprintf("invalid %s value type on the V stack: %T", op, vb))
			}

		case ϡopExit:
			return v.v.pop()

		case ϡopNilIfF:
			if top := v.v.pop(); top == ϡmatchFailed {
				v.v.push(nil)
				break
			}
			v.v.push(ϡmatchFailed)

		case ϡopNilIfT:
			if top := v.v.pop(); top != ϡmatchFailed {
				v.v.push(nil)
				break
			}
			v.v.push(ϡmatchFailed)

		case ϡopJump:
			v.pc = a0

		case ϡopJumpIfF:
			if top := v.v.peek(); top == ϡmatchFailed {
				v.pc = a0
			}

		case ϡopJumpIfT:
			if top := v.v.peek(); top != ϡmatchFailed {
				v.pc = a0
			}

		case ϡopMatch:
			start := v.parser.pt
			if a0 >= len(v.pg.ms) {
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}
			m := v.pg.ms[a0]
			if ok := m.match(v.parser); ok {
				v.v.push(v.parser.sliceFrom(start))
				break
			}
			v.v.push(ϡmatchFailed)
			v.parser.pt = start

		case ϡopPop:
			switch a0 {
			case ϡlstackID:
				v.l.pop()
			case ϡpstackID:
				v.p.pop()
			case ϡastackID:
				v.a.pop()
			default:
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}

		case ϡopPopVJumpIfF:
			if top := v.v.peek(); top == ϡmatchFailed {
				v.v.pop()
				v.pc = a0
			}

		case ϡopPush:
			switch a0 {
			case ϡpstackID:
				v.p.push(v.parser.pt)
			case ϡistackID:
				v.i.push(a1)
			case ϡvstackID:
				if a1 >= len(ϡvSpecialValues) {
					panic(fmt.Sprintf("invalid %s V stack argument: %d", op, a1))
				}
				v.v.push(ϡvSpecialValues[a1])
			case ϡastackID:
				v.a.push()
			case ϡlstackID:
				// n = L args to push + 1, for the lstackID
				n--
				ar := make([]int, n)
				src := []int{a1, a2}
				n -= 2
				for n > 0 {
					// need more
					instr := v.pg.instrs[v.pc]
					a0, a1, a2, a3 := instr.decodeLs()
					src = append(src, a0, a1, a2, a3)
					v.pc++
					n -= 4
				}
				copy(ar, src)
				v.l.push(ar)
			default:
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}

		case ϡopRestore:
			pt := v.p.pop()
			v.parser.pt = pt

		case ϡopRestoreIfF:
			pt := v.p.pop()
			if top := v.v.peek(); top == ϡmatchFailed {
				v.parser.pt = pt
			}

		case ϡopReturn:
			ix := v.i.pop()
			v.pc = ix

		case ϡopStoreIfT:
			if top := v.v.peek(); top != ϡmatchFailed {
				// get the label name
				if a0 >= len(v.pg.ss) {
					panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
				}
				lbl := v.pg.ss[a0]

				// store the value
				as := v.a.peek()
				as[lbl] = top
			}

		case ϡopTakeLOrJump:
			ix := v.l.take()
			if ix < 0 {
				v.pc = a0
				break
			}
			v.i.push(ix)

		default:
			panic(fmt.Sprintf("unknown opcode %s", op))
		}
	}
}
