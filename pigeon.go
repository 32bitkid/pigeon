// Code generated by pigeon (https://github.com/PuerkitoBio/pigeon)
// on 2015-05-08 12:03:58.064474436 -0400 EDT

package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"unicode"
	"unicode/utf8"

	"github.com/PuerkitoBio/pigeon/ast"
)

func (c *current) onGrammar1(initializer, rules interface{}) (interface{}, error) {
	pos := c.astPos()

	// create the grammar, assign its initializer
	g := ast.NewGrammar(pos)
	initSlice := toIfaceSlice(initializer)
	if len(initSlice) > 0 {
		g.Init = initSlice[0].(*ast.CodeBlock)
	}

	rulesSlice := toIfaceSlice(rules)
	g.Rules = make([]*ast.Rule, len(rulesSlice))
	for i, duo := range rulesSlice {
		g.Rules[i] = duo.([]interface{})[0].(*ast.Rule)
	}

	return g, nil
}

func (v *ϡvm) callOnGrammar1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onGrammar1(stack["initializer"], stack["rules"])
}

func (c *current) onInitializer1(code interface{}) (interface{}, error) {
	return code, nil
}

func (v *ϡvm) callOnInitializer1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onInitializer1(stack["code"])
}

func (c *current) onRule1(name, display, expr interface{}) (interface{}, error) {
	pos := c.astPos()

	rule := ast.NewRule(pos, name.(*ast.Identifier))
	displaySlice := toIfaceSlice(display)
	if len(displaySlice) > 0 {
		rule.DisplayName = displaySlice[0].(*ast.StringLit)
	}
	rule.Expr = expr.(ast.Expression)

	return rule, nil
}

func (v *ϡvm) callOnRule1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onRule1(stack["name"], stack["display"], stack["expr"])
}

func (c *current) onChoiceExpr1(first, rest interface{}) (interface{}, error) {
	restSlice := toIfaceSlice(rest)
	if len(restSlice) == 0 {
		return first, nil
	}

	pos := c.astPos()
	choice := ast.NewChoiceExpr(pos)
	choice.Alternatives = []ast.Expression{first.(ast.Expression)}
	for _, sl := range restSlice {
		choice.Alternatives = append(choice.Alternatives, sl.([]interface{})[3].(ast.Expression))
	}
	return choice, nil
}

func (v *ϡvm) callOnChoiceExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onChoiceExpr1(stack["first"], stack["rest"])
}

func (c *current) onActionExpr1(expr, code interface{}) (interface{}, error) {
	if code == nil {
		return expr, nil
	}

	pos := c.astPos()
	act := ast.NewActionExpr(pos)
	act.Expr = expr.(ast.Expression)
	codeSlice := toIfaceSlice(code)
	act.Code = codeSlice[1].(*ast.CodeBlock)

	return act, nil
}

func (v *ϡvm) callOnActionExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onActionExpr1(stack["expr"], stack["code"])
}

func (c *current) onSeqExpr1(first, rest interface{}) (interface{}, error) {
	restSlice := toIfaceSlice(rest)
	if len(restSlice) == 0 {
		return first, nil
	}
	seq := ast.NewSeqExpr(c.astPos())
	seq.Exprs = []ast.Expression{first.(ast.Expression)}
	for _, sl := range restSlice {
		seq.Exprs = append(seq.Exprs, sl.([]interface{})[1].(ast.Expression))
	}
	return seq, nil
}

func (v *ϡvm) callOnSeqExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSeqExpr1(stack["first"], stack["rest"])
}

func (c *current) onLabeledExpr2(label, expr interface{}) (interface{}, error) {
	pos := c.astPos()
	lab := ast.NewLabeledExpr(pos)
	lab.Label = label.(*ast.Identifier)
	lab.Expr = expr.(ast.Expression)
	return lab, nil
}

func (v *ϡvm) callOnLabeledExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onLabeledExpr2(stack["label"], stack["expr"])
}

func (c *current) onPrefixedExpr2(op, expr interface{}) (interface{}, error) {
	pos := c.astPos()
	opStr := op.(string)
	if opStr == "&" {
		and := ast.NewAndExpr(pos)
		and.Expr = expr.(ast.Expression)
		return and, nil
	}
	not := ast.NewNotExpr(pos)
	not.Expr = expr.(ast.Expression)
	return not, nil
}

func (v *ϡvm) callOnPrefixedExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onPrefixedExpr2(stack["op"], stack["expr"])
}

func (c *current) onPrefixedOp1() (interface{}, error) {
	return string(c.text), nil
}

func (v *ϡvm) callOnPrefixedOp1() (interface{}, error) {
	return v.cur.onPrefixedOp1()
}

func (c *current) onSuffixedExpr2(expr, op interface{}) (interface{}, error) {
	pos := c.astPos()
	opStr := op.(string)
	switch opStr {
	case "?":
		zero := ast.NewZeroOrOneExpr(pos)
		zero.Expr = expr.(ast.Expression)
		return zero, nil
	case "*":
		zero := ast.NewZeroOrMoreExpr(pos)
		zero.Expr = expr.(ast.Expression)
		return zero, nil
	case "+":
		one := ast.NewOneOrMoreExpr(pos)
		one.Expr = expr.(ast.Expression)
		return one, nil
	default:
		return nil, errors.New("unknown operator: " + opStr)
	}
}

func (v *ϡvm) callOnSuffixedExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSuffixedExpr2(stack["expr"], stack["op"])
}

func (c *current) onSuffixedOp1() (interface{}, error) {
	return string(c.text), nil
}

func (v *ϡvm) callOnSuffixedOp1() (interface{}, error) {
	return v.cur.onSuffixedOp1()
}

func (c *current) onPrimaryExpr7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (v *ϡvm) callOnPrimaryExpr7() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onPrimaryExpr7(stack["expr"])
}

func (c *current) onRuleRefExpr1(name interface{}) (interface{}, error) {
	ref := ast.NewRuleRefExpr(c.astPos())
	ref.Name = name.(*ast.Identifier)
	return ref, nil
}

func (v *ϡvm) callOnRuleRefExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onRuleRefExpr1(stack["name"])
}

func (c *current) onSemanticPredExpr1(op, code interface{}) (interface{}, error) {
	opStr := op.(string)
	if opStr == "&" {
		and := ast.NewAndCodeExpr(c.astPos())
		and.Code = code.(*ast.CodeBlock)
		return and, nil
	}
	not := ast.NewNotCodeExpr(c.astPos())
	not.Code = code.(*ast.CodeBlock)
	return not, nil
}

func (v *ϡvm) callOnSemanticPredExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSemanticPredExpr1(stack["op"], stack["code"])
}

func (c *current) onSemanticPredOp1() (interface{}, error) {
	return string(c.text), nil
}

func (v *ϡvm) callOnSemanticPredOp1() (interface{}, error) {
	return v.cur.onSemanticPredOp1()
}

func (c *current) onIdentifier1(ident interface{}) (interface{}, error) {
	astIdent := ast.NewIdentifier(c.astPos(), string(c.text))
	if reservedWords[astIdent.Val] {
		return astIdent, errors.New("identifier is a reserved word")
	}
	return astIdent, nil
}

func (v *ϡvm) callOnIdentifier1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onIdentifier1(stack["ident"])
}

func (c *current) onIdentifierName1() (interface{}, error) {
	return ast.NewIdentifier(c.astPos(), string(c.text)), nil
}

func (v *ϡvm) callOnIdentifierName1() (interface{}, error) {
	return v.cur.onIdentifierName1()
}

func (c *current) onLitMatcher1(lit, ignore interface{}) (interface{}, error) {
	rawStr := lit.(*ast.StringLit).Val
	s, err := strconv.Unquote(rawStr)
	if err != nil {
		// an invalid string literal raises an error in the escape rules,
		// so simply replace the literal with an empty string here to
		// avoid a cascade of errors.
		s = ""
	}
	m := ast.NewLitMatcher(c.astPos(), s)
	m.IgnoreCase = ignore != nil
	return m, nil
}

func (v *ϡvm) callOnLitMatcher1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onLitMatcher1(stack["lit"], stack["ignore"])
}

func (c *current) onStringLiteral2() (interface{}, error) {
	return ast.NewStringLit(c.astPos(), string(c.text)), nil
}

func (v *ϡvm) callOnStringLiteral2() (interface{}, error) {
	return v.cur.onStringLiteral2()
}

func (c *current) onStringLiteral18() (interface{}, error) {
	return ast.NewStringLit(c.astPos(), "``"), errors.New("string literal not terminated")
}

func (v *ϡvm) callOnStringLiteral18() (interface{}, error) {
	return v.cur.onStringLiteral18()
}

func (c *current) onDoubleStringEscape5() (interface{}, error) {
	return nil, errors.New("invalid escape character")
}

func (v *ϡvm) callOnDoubleStringEscape5() (interface{}, error) {
	return v.cur.onDoubleStringEscape5()
}

func (c *current) onSingleStringEscape5() (interface{}, error) {
	return nil, errors.New("invalid escape character")
}

func (v *ϡvm) callOnSingleStringEscape5() (interface{}, error) {
	return v.cur.onSingleStringEscape5()
}

func (c *current) onOctalEscape6() (interface{}, error) {
	return nil, errors.New("invalid octal escape")
}

func (v *ϡvm) callOnOctalEscape6() (interface{}, error) {
	return v.cur.onOctalEscape6()
}

func (c *current) onHexEscape6() (interface{}, error) {
	return nil, errors.New("invalid hexadecimal escape")
}

func (v *ϡvm) callOnHexEscape6() (interface{}, error) {
	return v.cur.onHexEscape6()
}

func (c *current) onLongUnicodeEscape2() (interface{}, error) {
	return validateUnicodeEscape(string(c.text), "invalid Unicode escape")
}

func (v *ϡvm) callOnLongUnicodeEscape2() (interface{}, error) {
	return v.cur.onLongUnicodeEscape2()
}

func (c *current) onLongUnicodeEscape13() (interface{}, error) {
	return nil, errors.New("invalid Unicode escape")
}

func (v *ϡvm) callOnLongUnicodeEscape13() (interface{}, error) {
	return v.cur.onLongUnicodeEscape13()
}

func (c *current) onShortUnicodeEscape2() (interface{}, error) {
	return validateUnicodeEscape(string(c.text), "invalid Unicode escape")
}

func (v *ϡvm) callOnShortUnicodeEscape2() (interface{}, error) {
	return v.cur.onShortUnicodeEscape2()
}

func (c *current) onShortUnicodeEscape9() (interface{}, error) {
	return nil, errors.New("invalid Unicode escape")
}

func (v *ϡvm) callOnShortUnicodeEscape9() (interface{}, error) {
	return v.cur.onShortUnicodeEscape9()
}

func (c *current) onCharClassMatcher2() (interface{}, error) {
	pos := c.astPos()
	cc := ast.NewCharClassMatcher(pos, string(c.text))
	return cc, nil
}

func (v *ϡvm) callOnCharClassMatcher2() (interface{}, error) {
	return v.cur.onCharClassMatcher2()
}

func (c *current) onCharClassMatcher15() (interface{}, error) {
	return ast.NewCharClassMatcher(c.astPos(), "[]"), errors.New("character class not terminated")
}

func (v *ϡvm) callOnCharClassMatcher15() (interface{}, error) {
	return v.cur.onCharClassMatcher15()
}

func (c *current) onCharClassEscape6() (interface{}, error) {
	return nil, errors.New("invalid escape character")
}

func (v *ϡvm) callOnCharClassEscape6() (interface{}, error) {
	return v.cur.onCharClassEscape6()
}

func (c *current) onUnicodeClassEscape5() (interface{}, error) {
	return nil, errors.New("invalid Unicode class escape")
}

func (v *ϡvm) callOnUnicodeClassEscape5() (interface{}, error) {
	return v.cur.onUnicodeClassEscape5()
}

func (c *current) onUnicodeClassEscape13(ident interface{}) (interface{}, error) {
	if !unicodeClasses[ident.(*ast.Identifier).Val] {
		return nil, errors.New("invalid Unicode class escape")
	}
	return nil, nil
}

func (v *ϡvm) callOnUnicodeClassEscape13() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onUnicodeClassEscape13(stack["ident"])
}

func (c *current) onUnicodeClassEscape19() (interface{}, error) {
	return nil, errors.New("Unicode class not terminated")
}

func (v *ϡvm) callOnUnicodeClassEscape19() (interface{}, error) {
	return v.cur.onUnicodeClassEscape19()
}

func (c *current) onAnyMatcher1() (interface{}, error) {
	any := ast.NewAnyMatcher(c.astPos(), ".")
	return any, nil
}

func (v *ϡvm) callOnAnyMatcher1() (interface{}, error) {
	return v.cur.onAnyMatcher1()
}

func (c *current) onCodeBlock2() (interface{}, error) {
	pos := c.astPos()
	cb := ast.NewCodeBlock(pos, string(c.text))
	return cb, nil
}

func (v *ϡvm) callOnCodeBlock2() (interface{}, error) {
	return v.cur.onCodeBlock2()
}

func (c *current) onCodeBlock7() (interface{}, error) {
	return nil, errors.New("code block not terminated")
}

func (v *ϡvm) callOnCodeBlock7() (interface{}, error) {
	return v.cur.onCodeBlock7()
}

var ϡtheProgram = &ϡprogram{
	instrs: []ϡinstr{
		{13, -1, []uint16{4, 96}}, {13, -1, []uint16{5}},
		{1, -1, nil}, {0, -1, nil},
		{13, 0, []uint16{4, 3135}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{16, 0, nil}, {13, 0, []uint16{4, 131}},
		{13, 0, []uint16{5}}, {1, 0, nil},
		{11, 0, []uint16{5}}, {16, 0, nil},
		{13, 0, []uint16{4, 3135}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{16, 0, nil}, {13, 0, []uint16{1}},
		{13, 0, []uint16{3, 1}}, {13, 0, []uint16{2, 9, 14}},
		{18, 0, []uint16{27}}, {1, 0, nil},
		{4, 0, nil}, {6, 0, []uint16{27}},
		{5, 0, []uint16{22}}, {11, 0, []uint16{2}},
		{15, 0, nil}, {16, 0, nil},
		{13, 0, []uint16{4, 19}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{12, 0, []uint16{36}}, {16, 0, nil},
		{13, 0, []uint16{3, 0}}, {16, 0, nil},
		{13, 0, []uint16{4, 30}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{17, 0, []uint16{2}}, {16, 0, nil},
		{13, 0, []uint16{4, 227}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{16, 0, nil}, {13, 0, []uint16{4, 3135}},
		{13, 0, []uint16{5}}, {1, 0, nil},
		{11, 0, []uint16{5}}, {16, 0, nil},
		{13, 0, []uint16{1}}, {13, 0, []uint16{3, 1}},
		{13, 0, []uint16{2, 44, 49}}, {18, 0, []uint16{62}},
		{1, 0, nil}, {4, 0, nil},
		{6, 0, []uint16{62}}, {5, 0, []uint16{57}},
		{11, 0, []uint16{2}}, {15, 0, nil},
		{16, 0, nil}, {13, 0, []uint16{3, 1}},
		{13, 0, []uint16{4, 54}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{12, 0, []uint16{73}}, {4, 0, nil},
		{5, 0, []uint16{66}}, {16, 0, nil},
		{13, 0, []uint16{4, 65}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{17, 0, []uint16{4}}, {16, 0, nil},
		{13, 0, []uint16{4, 3272}}, {13, 0, []uint16{5}},
		{1, 0, nil}, {11, 0, []uint16{5}},
		{16, 0, nil}, {13, 0, []uint16{1}},
		{13, 0, []uint16{3, 1}}, {13, 0, []uint16{2, 4, 38, 74, 80}},
		{18, 0, []uint16{93}}, {1, 0, nil},
		{4, 0, nil}, {6, 0, []uint16{93}},
		{5, 0, []uint16{88}}, {11, 0, []uint16{2}},
		{15, 0, nil}, {16, 0, nil},
		{13, 0, []uint16{1}}, {13, 0, []uint16{4, 85}},
		{1, 0, nil}, {6, 0, []uint16{102}},
		{2, 0, []uint16{0}}, {16, 0, nil},
		{11, 0, []uint16{1}}, {16, 0, nil},
		{13, 3, []uint16{4, 3017}}, {13, 3, []uint16{5}},
		{1, 3, nil}, {11, 3, []uint16{5}},
		{16, 3, nil}, {13, 3, []uint16{4, 104}},
		{13, 3, []uint16{5}}, {1, 3, nil},
		{11, 3, []uint16{5}}, {17, 3, []uint16{7}},
		{16, 3, nil}, {13, 3, []uint16{4, 3257}},
		{13, 3, []uint16{5}}, {1, 3, nil},
		{11, 3, []uint16{5}}, {16, 3, nil},
		{13, 3, []uint16{1}}, {13, 3, []uint16{3, 1}},
		{13, 3, []uint16{2, 109, 115}}, {18, 3, []uint16{128}},
		{1, 3, nil}, {4, 3, nil},
		{6, 3, []uint16{128}}, {5, 3, []uint16{123}},
		{11, 3, []uint16{2}}, {15, 3, nil},
		{16, 3, nil}, {13, 3, []uint16{1}},
		{13, 3, []uint16{4, 120}}, {1, 3, nil},
		{6, 3, []uint16{137}}, {2, 3, []uint16{1}},
		{16, 3, nil}, {11, 3, []uint16{1}},
		{16, 3, nil}, {13, 5, []uint16{4, 1226}},
		{13, 5, []uint16{5}}, {1, 5, nil},
		{11, 5, []uint16{5}}, {16, 5, nil},
		{13, 5, []uint16{4, 139}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{17, 5, []uint16{10}}, {16, 5, nil},
		{13, 5, []uint16{4, 3135}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{16, 5, nil}, {13, 5, []uint16{4, 1567}},
		{13, 5, []uint16{5}}, {1, 5, nil},
		{11, 5, []uint16{5}}, {16, 5, nil},
		{13, 5, []uint16{4, 3135}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{16, 5, nil}, {13, 5, []uint16{1}},
		{13, 5, []uint16{3, 1}}, {13, 5, []uint16{2, 155, 160}},
		{18, 5, []uint16{173}}, {1, 5, nil},
		{4, 5, nil}, {6, 5, []uint16{173}},
		{5, 5, []uint16{168}}, {11, 5, []uint16{2}},
		{15, 5, nil}, {16, 5, nil},
		{13, 5, []uint16{4, 165}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{12, 5, []uint16{182}}, {16, 5, nil},
		{13, 5, []uint16{3, 0}}, {16, 5, nil},
		{13, 5, []uint16{4, 176}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{17, 5, []uint16{12}}, {16, 5, nil},
		{13, 5, []uint16{4, 960}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{16, 5, nil}, {13, 5, []uint16{4, 3135}},
		{13, 5, []uint16{5}}, {1, 5, nil},
		{11, 5, []uint16{5}}, {16, 5, nil},
		{13, 5, []uint16{4, 235}}, {13, 5, []uint16{5}},
		{1, 5, nil}, {11, 5, []uint16{5}},
		{16, 5, nil}, {13, 5, []uint16{4, 200}},
		{13, 5, []uint16{5}}, {1, 5, nil},
		{11, 5, []uint16{5}}, {17, 5, []uint16{15}},
		{16, 5, nil}, {13, 5, []uint16{4, 3257}},
		{13, 5, []uint16{5}}, {1, 5, nil},
		{11, 5, []uint16{5}}, {16, 5, nil},
		{13, 5, []uint16{1}}, {13, 5, []uint16{3, 1}},
		{13, 5, []uint16{2, 144, 150, 184, 190, 195, 205, 211}}, {18, 5, []uint16{224}},
		{1, 5, nil}, {4, 5, nil},
		{6, 5, []uint16{224}}, {5, 5, []uint16{219}},
		{11, 5, []uint16{2}}, {15, 5, nil},
		{16, 5, nil}, {13, 5, []uint16{1}},
		{13, 5, []uint16{4, 216}}, {1, 5, nil},
		{6, 5, []uint16{233}}, {2, 5, []uint16{2}},
		{16, 5, nil}, {11, 5, []uint16{1}},
		{16, 5, nil}, {13, 16, []uint16{4, 307}},
		{13, 16, []uint16{5}}, {1, 16, nil},
		{11, 16, []uint16{5}}, {16, 16, nil},
		{13, 17, []uint16{4, 372}}, {13, 17, []uint16{5}},
		{1, 17, nil}, {11, 17, []uint16{5}},
		{16, 17, nil}, {13, 17, []uint16{4, 240}},
		{13, 17, []uint16{5}}, {1, 17, nil},
		{11, 17, []uint16{5}}, {17, 17, []uint16{18}},
		{16, 17, nil}, {13, 17, []uint16{4, 3135}},
		{13, 17, []uint16{5}}, {1, 17, nil},
		{11, 17, []uint16{5}}, {16, 17, nil},
		{13, 17, []uint16{1}}, {8, 17, []uint16{0}},
		{15, 17, nil}, {16, 17, nil},
		{13, 17, []uint16{4, 3135}}, {13, 17, []uint16{5}},
		{1, 17, nil}, {11, 17, []uint16{5}},
		{16, 17, nil}, {13, 17, []uint16{4, 372}},
		{13, 17, []uint16{5}}, {1, 17, nil},
		{11, 17, []uint16{5}}, {16, 17, nil},
		{13, 17, []uint16{1}}, {13, 17, []uint16{3, 1}},
		{13, 17, []uint16{2, 251, 256, 260, 265}}, {18, 17, []uint16{278}},
		{1, 17, nil}, {4, 17, nil},
		{6, 17, []uint16{278}}, {5, 17, []uint16{273}},
		{11, 17, []uint16{2}}, {15, 17, nil},
		{16, 17, nil}, {13, 17, []uint16{3, 2}},
		{13, 17, []uint16{4, 270}}, {13, 17, []uint16{5}},
		{1, 17, nil}, {11, 17, []uint16{5}},
		{12, 17, []uint16{289}}, {4, 17, nil},
		{5, 17, []uint16{282}}, {16, 17, nil},
		{13, 17, []uint16{4, 281}}, {13, 17, []uint16{5}},
		{1, 17, nil}, {11, 17, []uint16{5}},
		{17, 17, []uint16{20}}, {16, 17, nil},
		{13, 17, []uint16{1}}, {13, 17, []uint16{3, 1}},
		{13, 17, []uint16{2, 245, 290}}, {18, 17, []uint16{304}},
		{1, 17, nil}, {4, 17, nil},
		{6, 17, []uint16{304}}, {5, 17, []uint16{299}},
		{11, 17, []uint16{2}}, {15, 17, nil},
		{16, 17, nil}, {13, 17, []uint16{1}},
		{13, 17, []uint16{4, 296}}, {1, 17, nil},
		{6, 17, []uint16{313}}, {2, 17, []uint16{3}},
		{16, 17, nil}, {11, 17, []uint16{1}},
		{16, 17, nil}, {13, 19, []uint16{4, 438}},
		{13, 19, []uint16{5}}, {1, 19, nil},
		{11, 19, []uint16{5}}, {16, 19, nil},
		{13, 19, []uint16{4, 315}}, {13, 19, []uint16{5}},
		{1, 19, nil}, {11, 19, []uint16{5}},
		{17, 19, []uint16{15}}, {16, 19, nil},
		{13, 19, []uint16{4, 3135}}, {13, 19, []uint16{5}},
		{1, 19, nil}, {11, 19, []uint16{5}},
		{16, 19, nil}, {13, 19, []uint16{4, 3017}},
		{13, 19, []uint16{5}}, {1, 19, nil},
		{11, 19, []uint16{5}}, {16, 19, nil},
		{13, 19, []uint16{1}}, {13, 19, []uint16{3, 1}},
		{13, 19, []uint16{2, 326, 331}}, {18, 19, []uint16{344}},
		{1, 19, nil}, {4, 19, nil},
		{6, 19, []uint16{344}}, {5, 19, []uint16{339}},
		{11, 19, []uint16{2}}, {15, 19, nil},
		{16, 19, nil}, {13, 19, []uint16{4, 336}},
		{13, 19, []uint16{5}}, {1, 19, nil},
		{11, 19, []uint16{5}}, {12, 19, []uint16{353}},
		{16, 19, nil}, {13, 19, []uint16{3, 0}},
		{16, 19, nil}, {13, 19, []uint16{4, 347}},
		{13, 19, []uint16{5}}, {1, 19, nil},
		{11, 19, []uint16{5}}, {17, 19, []uint16{7}},
		{16, 19, nil}, {13, 19, []uint16{1}},
		{13, 19, []uint16{3, 1}}, {13, 19, []uint16{2, 320, 355}},
		{18, 19, []uint16{369}}, {1, 19, nil},
		{4, 19, nil}, {6, 19, []uint16{369}},
		{5, 19, []uint16{364}}, {11, 19, []uint16{2}},
		{15, 19, nil}, {16, 19, nil},
		{13, 19, []uint16{1}}, {13, 19, []uint16{4, 361}},
		{1, 19, nil}, {6, 19, []uint16{378}},
		{2, 19, []uint16{4}}, {16, 19, nil},
		{11, 19, []uint16{1}}, {16, 19, nil},
		{13, 21, []uint16{4, 506}}, {13, 21, []uint16{5}},
		{1, 21, nil}, {11, 21, []uint16{5}},
		{16, 21, nil}, {13, 21, []uint16{4, 380}},
		{13, 21, []uint16{5}}, {1, 21, nil},
		{11, 21, []uint16{5}}, {17, 21, []uint16{18}},
		{16, 21, nil}, {13, 21, []uint16{4, 3135}},
		{13, 21, []uint16{5}}, {1, 21, nil},
		{11, 21, []uint16{5}}, {16, 21, nil},
		{13, 21, []uint16{4, 506}}, {13, 21, []uint16{5}},
		{1, 21, nil}, {11, 21, []uint16{5}},
		{16, 21, nil}, {13, 21, []uint16{1}},
		{13, 21, []uint16{3, 1}}, {13, 21, []uint16{2, 391, 396}},
		{18, 21, []uint16{409}}, {1, 21, nil},
		{4, 21, nil}, {6, 21, []uint16{409}},
		{5, 21, []uint16{404}}, {11, 21, []uint16{2}},
		{15, 21, nil}, {16, 21, nil},
		{13, 21, []uint16{3, 2}}, {13, 21, []uint16{4, 401}},
		{13, 21, []uint16{5}}, {1, 21, nil},
		{11, 21, []uint16{5}}, {12, 21, []uint16{420}},
		{4, 21, nil}, {5, 21, []uint16{413}},
		{16, 21, nil}, {13, 21, []uint16{4, 412}},
		{13, 21, []uint16{5}}, {1, 21, nil},
		{11, 21, []uint16{5}}, {17, 21, []uint16{20}},
		{16, 21, nil}, {13, 21, []uint16{1}},
		{13, 21, []uint16{3, 1}}, {13, 21, []uint16{2, 385, 421}},
		{18, 21, []uint16{435}}, {1, 21, nil},
		{4, 21, nil}, {6, 21, []uint16{435}},
		{5, 21, []uint16{430}}, {11, 21, []uint16{2}},
		{15, 21, nil}, {16, 21, nil},
		{13, 21, []uint16{1}}, {13, 21, []uint16{4, 427}},
		{1, 21, nil}, {6, 21, []uint16{444}},
		{2, 21, []uint16{5}}, {16, 21, nil},
		{11, 21, []uint16{1}}, {16, 21, nil},
		{13, 22, []uint16{4, 1188}}, {13, 22, []uint16{5}},
		{1, 22, nil}, {11, 22, []uint16{5}},
		{16, 22, nil}, {13, 22, []uint16{4, 446}},
		{13, 22, []uint16{5}}, {1, 22, nil},
		{11, 22, []uint16{5}}, {17, 22, []uint16{23}},
		{16, 22, nil}, {13, 22, []uint16{4, 3135}},
		{13, 22, []uint16{5}}, {1, 22, nil},
		{11, 22, []uint16{5}}, {16, 22, nil},
		{13, 22, []uint16{1}}, {8, 22, []uint16{1}},
		{15, 22, nil}, {16, 22, nil},
		{13, 22, []uint16{4, 3135}}, {13, 22, []uint16{5}},
		{1, 22, nil}, {11, 22, []uint16{5}},
		{16, 22, nil}, {13, 22, []uint16{4, 568}},
		{13, 22, []uint16{5}}, {1, 22, nil},
		{11, 22, []uint16{5}}, {16, 22, nil},
		{13, 22, []uint16{4, 471}}, {13, 22, []uint16{5}},
		{1, 22, nil}, {11, 22, []uint16{5}},
		{17, 22, []uint16{15}}, {16, 22, nil},
		{13, 22, []uint16{1}}, {13, 22, []uint16{3, 1}},
		{13, 22, []uint16{2, 451, 457, 462, 466, 476}}, {18, 22, []uint16{490}},
		{1, 22, nil}, {4, 22, nil},
		{6, 22, []uint16{490}}, {5, 22, []uint16{485}},
		{11, 22, []uint16{2}}, {15, 22, nil},
		{16, 22, nil}, {13, 22, []uint16{1}},
		{13, 22, []uint16{4, 482}}, {1, 22, nil},
		{6, 22, []uint16{499}}, {2, 22, []uint16{6}},
		{16, 22, nil}, {11, 22, []uint16{1}},
		{16, 22, nil}, {13, 22, []uint16{4, 568}},
		{13, 22, []uint16{5}}, {1, 22, nil},
		{11, 22, []uint16{5}}, {16, 22, nil},
		{13, 22, []uint16{2, 493, 501}}, {18, 22, []uint16{514}},
		{13, 22, []uint16{5}}, {1, 22, nil},
		{11, 22, []uint16{5}}, {7, 22, []uint16{515}},
		{11, 22, []uint16{3}}, {5, 22, []uint16{507}},
		{13, 22, []uint16{3, 1}}, {11, 22, []uint16{2}},
		{16, 22, nil}, {13, 25, []uint16{4, 598}},
		{13, 25, []uint16{5}}, {1, 25, nil},
		{11, 25, []uint16{5}}, {16, 25, nil},
		{13, 25, []uint16{4, 517}}, {13, 25, []uint16{5}},
		{1, 25, nil}, {11, 25, []uint16{5}},
		{17, 25, []uint16{26}}, {16, 25, nil},
		{13, 25, []uint16{4, 3135}}, {13, 25, []uint16{5}},
		{1, 25, nil}, {11, 25, []uint16{5}},
		{16, 25, nil}, {13, 25, []uint16{4, 657}},
		{13, 25, []uint16{5}}, {1, 25, nil},
		{11, 25, []uint16{5}}, {16, 25, nil},
		{13, 25, []uint16{4, 533}}, {13, 25, []uint16{5}},
		{1, 25, nil}, {11, 25, []uint16{5}},
		{17, 25, []uint16{15}}, {16, 25, nil},
		{13, 25, []uint16{1}}, {13, 25, []uint16{3, 1}},
		{13, 25, []uint16{2, 522, 528, 538}}, {18, 25, []uint16{552}},
		{1, 25, nil}, {4, 25, nil},
		{6, 25, []uint16{552}}, {5, 25, []uint16{547}},
		{11, 25, []uint16{2}}, {15, 25, nil},
		{16, 25, nil}, {13, 25, []uint16{1}},
		{13, 25, []uint16{4, 544}}, {1, 25, nil},
		{6, 25, []uint16{561}}, {2, 25, []uint16{7}},
		{16, 25, nil}, {11, 25, []uint16{1}},
		{16, 25, nil}, {13, 25, []uint16{4, 657}},
		{13, 25, []uint16{5}}, {1, 25, nil},
		{11, 25, []uint16{5}}, {16, 25, nil},
		{13, 25, []uint16{2, 555, 563}}, {18, 25, []uint16{576}},
		{13, 25, []uint16{5}}, {1, 25, nil},
		{11, 25, []uint16{5}}, {7, 25, []uint16{577}},
		{11, 25, []uint16{3}}, {5, 25, []uint16{569}},
		{13, 25, []uint16{3, 1}}, {11, 25, []uint16{2}},
		{16, 25, nil}, {13, 27, []uint16{1}},
		{8, 27, []uint16{2}}, {15, 27, nil},
		{16, 27, nil}, {13, 27, []uint16{1}},
		{8, 27, []uint16{3}}, {15, 27, nil},
		{16, 27, nil}, {13, 27, []uint16{2, 579, 583}},
		{18, 27, []uint16{595}}, {13, 27, []uint16{5}},
		{1, 27, nil}, {11, 27, []uint16{5}},
		{7, 27, []uint16{596}}, {11, 27, []uint16{3}},
		{5, 27, []uint16{588}}, {13, 27, []uint16{3, 1}},
		{11, 27, []uint16{2}}, {16, 27, nil},
		{13, 27, []uint16{1}}, {13, 27, []uint16{4, 587}},
		{1, 27, nil}, {6, 27, []uint16{604}},
		{2, 27, []uint16{8}}, {16, 27, nil},
		{11, 27, []uint16{1}}, {16, 27, nil},
		{13, 28, []uint16{4, 772}}, {13, 28, []uint16{5}},
		{1, 28, nil}, {11, 28, []uint16{5}},
		{16, 28, nil}, {13, 28, []uint16{4, 606}},
		{13, 28, []uint16{5}}, {1, 28, nil},
		{11, 28, []uint16{5}}, {17, 28, []uint16{15}},
		{16, 28, nil}, {13, 28, []uint16{4, 3135}},
		{13, 28, []uint16{5}}, {1, 28, nil},
		{11, 28, []uint16{5}}, {16, 28, nil},
		{13, 28, []uint16{4, 691}}, {13, 28, []uint16{5}},
		{1, 28, nil}, {11, 28, []uint16{5}},
		{16, 28, nil}, {13, 28, []uint16{4, 622}},
		{13, 28, []uint16{5}}, {1, 28, nil},
		{11, 28, []uint16{5}}, {17, 28, []uint16{26}},
		{16, 28, nil}, {13, 28, []uint16{1}},
		{13, 28, []uint16{3, 1}}, {13, 28, []uint16{2, 611, 617, 627}},
		{18, 28, []uint16{641}}, {1, 28, nil},
		{4, 28, nil}, {6, 28, []uint16{641}},
		{5, 28, []uint16{636}}, {11, 28, []uint16{2}},
		{15, 28, nil}, {16, 28, nil},
		{13, 28, []uint16{1}}, {13, 28, []uint16{4, 633}},
		{1, 28, nil}, {6, 28, []uint16{650}},
		{2, 28, []uint16{9}}, {16, 28, nil},
		{11, 28, []uint16{1}}, {16, 28, nil},
		{13, 28, []uint16{4, 772}}, {13, 28, []uint16{5}},
		{1, 28, nil}, {11, 28, []uint16{5}},
		{16, 28, nil}, {13, 28, []uint16{2, 644, 652}},
		{18, 28, []uint16{665}}, {13, 28, []uint16{5}},
		{1, 28, nil}, {11, 28, []uint16{5}},
		{7, 28, []uint16{666}}, {11, 28, []uint16{3}},
		{5, 28, []uint16{658}}, {13, 28, []uint16{3, 1}},
		{11, 28, []uint16{2}}, {16, 28, nil},
		{13, 30, []uint16{1}}, {8, 30, []uint16{4}},
		{15, 30, nil}, {16, 30, nil},
		{13, 30, []uint16{1}}, {8, 30, []uint16{5}},
		{15, 30, nil}, {16, 30, nil},
		{13, 30, []uint16{1}}, {8, 30, []uint16{6}},
		{15, 30, nil}, {16, 30, nil},
		{13, 30, []uint16{2, 668, 672, 676}}, {18, 30, []uint16{688}},
		{13, 30, []uint16{5}}, {1, 30, nil},
		{11, 30, []uint16{5}}, {7, 30, []uint16{689}},
		{11, 30, []uint16{3}}, {5, 30, []uint16{681}},
		{13, 30, []uint16{3, 1}}, {11, 30, []uint16{2}},
		{16, 30, nil}, {13, 30, []uint16{1}},
		{13, 30, []uint16{4, 680}}, {1, 30, nil},
		{6, 30, []uint16{697}}, {2, 30, []uint16{10}},
		{16, 30, nil}, {11, 30, []uint16{1}},
		{16, 30, nil}, {13, 29, []uint16{4, 1298}},
		{13, 29, []uint16{5}}, {1, 29, nil},
		{11, 29, []uint16{5}}, {16, 29, nil},
		{13, 29, []uint16{4, 2550}}, {13, 29, []uint16{5}},
		{1, 29, nil}, {11, 29, []uint16{5}},
		{16, 29, nil}, {13, 29, []uint16{4, 2944}},
		{13, 29, []uint16{5}}, {1, 29, nil},
		{11, 29, []uint16{5}}, {16, 29, nil},
		{13, 29, []uint16{4, 863}}, {13, 29, []uint16{5}},
		{1, 29, nil}, {11, 29, []uint16{5}},
		{16, 29, nil}, {13, 29, []uint16{4, 909}},
		{13, 29, []uint16{5}}, {1, 29, nil},
		{11, 29, []uint16{5}}, {16, 29, nil},
		{13, 29, []uint16{1}}, {8, 29, []uint16{7}},
		{15, 29, nil}, {16, 29, nil},
		{13, 29, []uint16{4, 3135}}, {13, 29, []uint16{5}},
		{1, 29, nil}, {11, 29, []uint16{5}},
		{16, 29, nil}, {13, 29, []uint16{4, 235}},
		{13, 29, []uint16{5}}, {1, 29, nil},
		{11, 29, []uint16{5}}, {16, 29, nil},
		{13, 29, []uint16{4, 733}}, {13, 29, []uint16{5}},
		{1, 29, nil}, {11, 29, []uint16{5}},
		{17, 29, []uint16{15}}, {16, 29, nil},
		{13, 29, []uint16{4, 3135}}, {13, 29, []uint16{5}},
		{1, 29, nil}, {11, 29, []uint16{5}},
		{16, 29, nil}, {13, 29, []uint16{1}},
		{8, 29, []uint16{8}}, {15, 29, nil},
		{16, 29, nil}, {13, 29, []uint16{1}},
		{13, 29, []uint16{3, 1}}, {13, 29, []uint16{2, 724, 728, 738, 744, 749}},
		{18, 29, []uint16{761}}, {1, 29, nil},
		{4, 29, nil}, {6, 29, []uint16{761}},
		{5, 29, []uint16{756}}, {11, 29, []uint16{2}},
		{15, 29, nil}, {16, 29, nil},
		{13, 29, []uint16{1}}, {13, 29, []uint16{4, 753}},
		{1, 29, nil}, {6, 29, []uint16{770}},
		{2, 29, []uint16{11}}, {16, 29, nil},
		{11, 29, []uint16{1}}, {16, 29, nil},
		{13, 29, []uint16{2, 699, 704, 709, 714, 719, 764}}, {18, 29, []uint16{780}},
		{13, 29, []uint16{5}}, {1, 29, nil},
		{11, 29, []uint16{5}}, {7, 29, []uint16{781}},
		{11, 29, []uint16{3}}, {5, 29, []uint16{773}},
		{13, 29, []uint16{3, 1}}, {11, 29, []uint16{2}},
		{16, 29, nil}, {13, 34, []uint16{4, 1226}},
		{13, 34, []uint16{5}}, {1, 34, nil},
		{11, 34, []uint16{5}}, {16, 34, nil},
		{13, 34, []uint16{4, 783}}, {13, 34, []uint16{5}},
		{1, 34, nil}, {11, 34, []uint16{5}},
		{17, 34, []uint16{10}}, {16, 34, nil},
		{13, 34, []uint16{4, 3135}}, {13, 34, []uint16{5}},
		{1, 34, nil}, {11, 34, []uint16{5}},
		{16, 34, nil}, {13, 34, []uint16{4, 1567}},
		{13, 34, []uint16{5}}, {1, 34, nil},
		{11, 34, []uint16{5}}, {16, 34, nil},
		{13, 34, []uint16{4, 3135}}, {13, 34, []uint16{5}},
		{1, 34, nil}, {11, 34, []uint16{5}},
		{16, 34, nil}, {13, 34, []uint16{1}},
		{13, 34, []uint16{3, 1}}, {13, 34, []uint16{2, 799, 804}},
		{18, 34, []uint16{817}}, {1, 34, nil},
		{4, 34, nil}, {6, 34, []uint16{817}},
		{5, 34, []uint16{812}}, {11, 34, []uint16{2}},
		{15, 34, nil}, {16, 34, nil},
		{13, 34, []uint16{4, 809}}, {13, 34, []uint16{5}},
		{1, 34, nil}, {11, 34, []uint16{5}},
		{12, 34, []uint16{826}}, {16, 34, nil},
		{13, 34, []uint16{3, 0}}, {16, 34, nil},
		{13, 34, []uint16{4, 960}}, {13, 34, []uint16{5}},
		{1, 34, nil}, {11, 34, []uint16{5}},
		{16, 34, nil}, {13, 34, []uint16{1}},
		{13, 34, []uint16{3, 1}}, {13, 34, []uint16{2, 794, 820, 828}},
		{18, 34, []uint16{841}}, {1, 34, nil},
		{4, 34, nil}, {6, 34, []uint16{841}},
		{5, 34, []uint16{836}}, {11, 34, []uint16{2}},
		{15, 34, nil}, {16, 34, nil},
		{13, 34, []uint16{1}}, {13, 34, []uint16{4, 833}},
		{13, 34, []uint16{5}}, {1, 34, nil},
		{11, 34, []uint16{5}}, {9, 34, nil},
		{14, 34, nil}, {16, 34, nil},
		{13, 34, []uint16{1}}, {13, 34, []uint16{3, 1}},
		{13, 34, []uint16{2, 788, 844}}, {18, 34, []uint16{860}},
		{1, 34, nil}, {4, 34, nil},
		{6, 34, []uint16{860}}, {5, 34, []uint16{855}},
		{11, 34, []uint16{2}}, {15, 34, nil},
		{16, 34, nil}, {13, 34, []uint16{1}},
		{13, 34, []uint16{4, 852}}, {1, 34, nil},
		{6, 34, []uint16{869}}, {2, 34, []uint16{12}},
		{16, 34, nil}, {11, 34, []uint16{1}},
		{16, 34, nil}, {13, 35, []uint16{4, 936}},
		{13, 35, []uint16{5}}, {1, 35, nil},
		{11, 35, []uint16{5}}, {16, 35, nil},
		{13, 35, []uint16{4, 871}}, {13, 35, []uint16{5}},
		{1, 35, nil}, {11, 35, []uint16{5}},
		{17, 35, []uint16{26}}, {16, 35, nil},
		{13, 35, []uint16{4, 3135}}, {13, 35, []uint16{5}},
		{1, 35, nil}, {11, 35, []uint16{5}},
		{16, 35, nil}, {13, 35, []uint16{4, 3017}},
		{13, 35, []uint16{5}}, {1, 35, nil},
		{11, 35, []uint16{5}}, {16, 35, nil},
		{13, 35, []uint16{4, 887}}, {13, 35, []uint16{5}},
		{1, 35, nil}, {11, 35, []uint16{5}},
		{17, 35, []uint16{7}}, {16, 35, nil},
		{13, 35, []uint16{1}}, {13, 35, []uint16{3, 1}},
		{13, 35, []uint16{2, 876, 882, 892}}, {18, 35, []uint16{906}},
		{1, 35, nil}, {4, 35, nil},
		{6, 35, []uint16{906}}, {5, 35, []uint16{901}},
		{11, 35, []uint16{2}}, {15, 35, nil},
		{16, 35, nil}, {13, 35, []uint16{1}},
		{13, 35, []uint16{4, 898}}, {1, 35, nil},
		{6, 35, []uint16{915}}, {2, 35, []uint16{13}},
		{16, 35, nil}, {11, 35, []uint16{1}},
		{16, 35, nil}, {13, 36, []uint16{1}},
		{8, 36, []uint16{2}}, {15, 36, nil},
		{16, 36, nil}, {13, 36, []uint16{1}},
		{8, 36, []uint16{3}}, {15, 36, nil},
		{16, 36, nil}, {13, 36, []uint16{2, 917, 921}},
		{18, 36, []uint16{933}}, {13, 36, []uint16{5}},
		{1, 36, nil}, {11, 36, []uint16{5}},
		{7, 36, []uint16{934}}, {11, 36, []uint16{3}},
		{5, 36, []uint16{926}}, {13, 36, []uint16{3, 1}},
		{11, 36, []uint16{2}}, {16, 36, nil},
		{13, 36, []uint16{1}}, {13, 36, []uint16{4, 925}},
		{1, 36, nil}, {6, 36, []uint16{942}},
		{2, 36, []uint16{14}}, {16, 36, nil},
		{11, 36, []uint16{1}}, {16, 36, nil},
		{13, 14, []uint16{1}}, {8, 14, []uint16{9}},
		{15, 14, nil}, {16, 14, nil},
		{13, 14, []uint16{1}}, {8, 14, []uint16{10}},
		{15, 14, nil}, {16, 14, nil},
		{13, 14, []uint16{1}}, {8, 14, []uint16{11}},
		{15, 14, nil}, {16, 14, nil},
		{13, 14, []uint16{1}}, {8, 14, []uint16{12}},
		{15, 14, nil}, {16, 14, nil},
		{13, 14, []uint16{2, 944, 948, 952, 956}}, {18, 14, []uint16{968}},
		{13, 14, []uint16{5}}, {1, 14, nil},
		{11, 14, []uint16{5}}, {7, 14, []uint16{969}},
		{11, 14, []uint16{3}}, {5, 14, []uint16{961}},
		{13, 14, []uint16{3, 1}}, {11, 14, []uint16{2}},
		{16, 14, nil}, {13, 37, []uint16{1}},
		{8, 37, []uint16{13}}, {15, 37, nil},
		{16, 37, nil}, {13, 38, []uint16{4, 1041}},
		{13, 38, []uint16{5}}, {1, 38, nil},
		{11, 38, []uint16{5}}, {16, 38, nil},
		{13, 38, []uint16{4, 1166}}, {13, 38, []uint16{5}},
		{1, 38, nil}, {11, 38, []uint16{5}},
		{16, 38, nil}, {13, 38, []uint16{2, 975, 980}},
		{18, 38, []uint16{993}}, {13, 38, []uint16{5}},
		{1, 38, nil}, {11, 38, []uint16{5}},
		{7, 38, []uint16{994}}, {11, 38, []uint16{3}},
		{5, 38, []uint16{986}}, {13, 38, []uint16{3, 1}},
		{11, 38, []uint16{2}}, {16, 38, nil},
		{13, 39, []uint16{1}}, {8, 39, []uint16{14}},
		{15, 39, nil}, {16, 39, nil},
		{13, 39, []uint16{1}}, {8, 39, []uint16{15}},
		{15, 39, nil}, {16, 39, nil},
		{13, 39, []uint16{1}}, {13, 39, []uint16{4, 1000}},
		{13, 39, []uint16{5}}, {1, 39, nil},
		{11, 39, []uint16{5}}, {9, 39, nil},
		{14, 39, nil}, {16, 39, nil},
		{13, 39, []uint16{4, 971}}, {13, 39, []uint16{5}},
		{1, 39, nil}, {11, 39, []uint16{5}},
		{16, 39, nil}, {13, 39, []uint16{1}},
		{13, 39, []uint16{3, 1}}, {13, 39, []uint16{2, 1004, 1012}},
		{18, 39, []uint16{1025}}, {1, 39, nil},
		{4, 39, nil}, {6, 39, []uint16{1025}},
		{5, 39, []uint16{1020}}, {11, 39, []uint16{2}},
		{15, 39, nil}, {16, 39, nil},
		{13, 39, []uint16{3, 2}}, {13, 39, []uint16{4, 1017}},
		{13, 39, []uint16{5}}, {1, 39, nil},
		{11, 39, []uint16{5}}, {12, 39, []uint16{1036}},
		{4, 39, nil}, {5, 39, []uint16{1029}},
		{16, 39, nil}, {13, 39, []uint16{1}},
		{8, 39, []uint16{15}}, {15, 39, nil},
		{16, 39, nil}, {13, 39, []uint16{1}},
		{13, 39, []uint16{3, 1}}, {13, 39, []uint16{2, 996, 1028, 1037}},
		{18, 39, []uint16{1049}}, {1, 39, nil},
		{4, 39, nil}, {6, 39, []uint16{1049}},
		{5, 39, []uint16{1044}}, {11, 39, []uint16{2}},
		{15, 39, nil}, {16, 39, nil},
		{13, 41, []uint16{1}}, {8, 41, []uint16{14}},
		{15, 41, nil}, {16, 41, nil},
		{13, 41, []uint16{1}}, {8, 41, []uint16{15}},
		{15, 41, nil}, {16, 41, nil},
		{13, 41, []uint16{4, 3178}}, {13, 41, []uint16{5}},
		{1, 41, nil}, {11, 41, []uint16{5}},
		{16, 41, nil}, {13, 41, []uint16{2, 1056, 1060}},
		{18, 41, []uint16{1073}}, {13, 41, []uint16{5}},
		{1, 41, nil}, {11, 41, []uint16{5}},
		{7, 41, []uint16{1074}}, {11, 41, []uint16{3}},
		{5, 41, []uint16{1066}}, {13, 41, []uint16{3, 1}},
		{11, 41, []uint16{2}}, {16, 41, nil},
		{13, 41, []uint16{1}}, {13, 41, []uint16{4, 1065}},
		{13, 41, []uint16{5}}, {1, 41, nil},
		{11, 41, []uint16{5}}, {9, 41, nil},
		{14, 41, nil}, {16, 41, nil},
		{13, 41, []uint16{4, 971}}, {13, 41, []uint16{5}},
		{1, 41, nil}, {11, 41, []uint16{5}},
		{16, 41, nil}, {13, 41, []uint16{1}},
		{13, 41, []uint16{3, 1}}, {13, 41, []uint16{2, 1076, 1084}},
		{18, 41, []uint16{1097}}, {1, 41, nil},
		{4, 41, nil}, {6, 41, []uint16{1097}},
		{5, 41, []uint16{1092}}, {11, 41, []uint16{2}},
		{15, 41, nil}, {16, 41, nil},
		{13, 41, []uint16{3, 2}}, {13, 41, []uint16{4, 1089}},
		{13, 41, []uint16{5}}, {1, 41, nil},
		{11, 41, []uint16{5}}, {12, 41, []uint16{1108}},
		{4, 41, nil}, {5, 41, []uint16{1101}},
		{16, 41, nil}, {13, 41, []uint16{1}},
		{8, 41, []uint16{15}}, {15, 41, nil},
		{16, 41, nil}, {13, 41, []uint16{1}},
		{13, 41, []uint16{3, 1}}, {13, 41, []uint16{2, 1052, 1100, 1109}},
		{18, 41, []uint16{1121}}, {1, 41, nil},
		{4, 41, nil}, {6, 41, []uint16{1121}},
		{5, 41, []uint16{1116}}, {11, 41, []uint16{2}},
		{15, 41, nil}, {16, 41, nil},
		{13, 40, []uint16{1}}, {8, 40, []uint16{16}},
		{15, 40, nil}, {16, 40, nil},
		{13, 40, []uint16{4, 3178}}, {13, 40, []uint16{5}},
		{1, 40, nil}, {11, 40, []uint16{5}},
		{16, 40, nil}, {13, 40, []uint16{1}},
		{13, 40, []uint16{4, 1128}}, {13, 40, []uint16{5}},
		{1, 40, nil}, {11, 40, []uint16{5}},
		{9, 40, nil}, {14, 40, nil},
		{16, 40, nil}, {13, 40, []uint16{4, 971}},
		{13, 40, []uint16{5}}, {1, 40, nil},
		{11, 40, []uint16{5}}, {16, 40, nil},
		{13, 40, []uint16{1}}, {13, 40, []uint16{3, 1}},
		{13, 40, []uint16{2, 1133, 1141}}, {18, 40, []uint16{1154}},
		{1, 40, nil}, {4, 40, nil},
		{6, 40, []uint16{1154}}, {5, 40, []uint16{1149}},
		{11, 40, []uint16{2}}, {15, 40, nil},
		{16, 40, nil}, {13, 40, []uint16{3, 2}},
		{13, 40, []uint16{4, 1146}}, {13, 40, []uint16{5}},
		{1, 40, nil}, {11, 40, []uint16{5}},
		{12, 40, []uint16{1165}}, {4, 40, nil},
		{5, 40, []uint16{1158}}, {16, 40, nil},
		{13, 40, []uint16{1}}, {13, 40, []uint16{3, 1}},
		{13, 40, []uint16{2, 1124, 1157}}, {18, 40, []uint16{1174}},
		{1, 40, nil}, {4, 40, nil},
		{6, 40, []uint16{1174}}, {5, 40, []uint16{1169}},
		{11, 40, []uint16{2}}, {15, 40, nil},
		{16, 40, nil}, {13, 24, []uint16{4, 1226}},
		{13, 24, []uint16{5}}, {1, 24, nil},
		{11, 24, []uint16{5}}, {16, 24, nil},
		{13, 24, []uint16{4, 1177}}, {13, 24, []uint16{5}},
		{1, 24, nil}, {11, 24, []uint16{5}},
		{17, 24, []uint16{43}}, {16, 24, nil},
		{13, 24, []uint16{1}}, {13, 24, []uint16{4, 1182}},
		{1, 24, nil}, {6, 24, []uint16{1194}},
		{2, 24, []uint16{15}}, {16, 24, nil},
		{11, 24, []uint16{1}}, {16, 24, nil},
		{13, 11, []uint16{4, 1234}}, {13, 11, []uint16{5}},
		{1, 11, nil}, {11, 11, []uint16{5}},
		{16, 11, nil}, {13, 11, []uint16{4, 1247}},
		{13, 11, []uint16{5}}, {1, 11, nil},
		{11, 11, []uint16{5}}, {16, 11, nil},
		{13, 11, []uint16{3, 2}}, {13, 11, []uint16{4, 1201}},
		{13, 11, []uint16{5}}, {1, 11, nil},
		{11, 11, []uint16{5}}, {12, 11, []uint16{1214}},
		{4, 11, nil}, {5, 11, []uint16{1207}},
		{16, 11, nil}, {13, 11, []uint16{1}},
		{13, 11, []uint16{3, 1}}, {13, 11, []uint16{2, 1196, 1206}},
		{18, 11, []uint16{1223}}, {1, 11, nil},
		{4, 11, nil}, {6, 11, []uint16{1223}},
		{5, 11, []uint16{1218}}, {11, 11, []uint16{2}},
		{15, 11, nil}, {16, 11, nil},
		{13, 11, []uint16{1}}, {13, 11, []uint16{4, 1215}},
		{1, 11, nil}, {6, 11, []uint16{1232}},
		{2, 11, []uint16{16}}, {16, 11, nil},
		{11, 11, []uint16{1}}, {16, 11, nil},
		{13, 44, []uint16{1}}, {8, 44, []uint16{17}},
		{15, 44, nil}, {16, 44, nil},
		{13, 45, []uint16{4, 1234}}, {13, 45, []uint16{5}},
		{1, 45, nil}, {11, 45, []uint16{5}},
		{16, 45, nil}, {13, 45, []uint16{1}},
		{8, 45, []uint16{18}}, {15, 45, nil},
		{16, 45, nil}, {13, 45, []uint16{2, 1238, 1243}},
		{18, 45, []uint16{1255}}, {13, 45, []uint16{5}},
		{1, 45, nil}, {11, 45, []uint16{5}},
		{7, 45, []uint16{1256}}, {11, 45, []uint16{3}},
		{5, 45, []uint16{1248}}, {13, 45, []uint16{3, 1}},
		{11, 45, []uint16{2}}, {16, 45, nil},
		{13, 31, []uint16{4, 1567}}, {13, 31, []uint16{5}},
		{1, 31, nil}, {11, 31, []uint16{5}},
		{16, 31, nil}, {13, 31, []uint16{4, 1258}},
		{13, 31, []uint16{5}}, {1, 31, nil},
		{11, 31, []uint16{5}}, {17, 31, []uint16{46}},
		{16, 31, nil}, {13, 31, []uint16{1}},
		{8, 31, []uint16{19}}, {15, 31, nil},
		{16, 31, nil}, {13, 31, []uint16{4, 1269}},
		{13, 31, []uint16{5}}, {1, 31, nil},
		{11, 31, []uint16{5}}, {12, 31, []uint16{1279}},
		{16, 31, nil}, {13, 31, []uint16{3, 0}},
		{16, 31, nil}, {13, 31, []uint16{4, 1273}},
		{13, 31, []uint16{5}}, {1, 31, nil},
		{11, 31, []uint16{5}}, {17, 31, []uint16{47}},
		{16, 31, nil}, {13, 31, []uint16{1}},
		{13, 31, []uint16{3, 1}}, {13, 31, []uint16{2, 1263, 1281}},
		{18, 31, []uint16{1295}}, {1, 31, nil},
		{4, 31, nil}, {6, 31, []uint16{1295}},
		{5, 31, []uint16{1290}}, {11, 31, []uint16{2}},
		{15, 31, nil}, {16, 31, nil},
		{13, 31, []uint16{1}}, {13, 31, []uint16{4, 1287}},
		{1, 31, nil}, {6, 31, []uint16{1304}},
		{2, 31, []uint16{17}}, {16, 31, nil},
		{11, 31, []uint16{1}}, {16, 31, nil},
		{13, 13, []uint16{1}}, {8, 13, []uint16{20}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{4, 1646}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{16, 13, nil}, {13, 13, []uint16{3, 2}},
		{13, 13, []uint16{4, 1310}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{12, 13, []uint16{1323}}, {4, 13, nil},
		{5, 13, []uint16{1316}}, {16, 13, nil},
		{13, 13, []uint16{1}}, {8, 13, []uint16{20}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{1}}, {13, 13, []uint16{3, 1}},
		{13, 13, []uint16{2, 1306, 1315, 1324}}, {18, 13, []uint16{1336}},
		{1, 13, nil}, {4, 13, nil},
		{6, 13, []uint16{1336}}, {5, 13, []uint16{1331}},
		{11, 13, []uint16{2}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{8, 13, []uint16{21}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{4, 1725}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {16, 13, nil},
		{13, 13, []uint16{1}}, {8, 13, []uint16{21}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{1}}, {13, 13, []uint16{3, 1}},
		{13, 13, []uint16{2, 1339, 1343, 1348}}, {18, 13, []uint16{1360}},
		{1, 13, nil}, {4, 13, nil},
		{6, 13, []uint16{1360}}, {5, 13, []uint16{1355}},
		{11, 13, []uint16{2}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{8, 13, []uint16{22}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{4, 1753}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {16, 13, nil},
		{13, 13, []uint16{3, 2}}, {13, 13, []uint16{4, 1367}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {12, 13, []uint16{1380}},
		{4, 13, nil}, {5, 13, []uint16{1373}},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{8, 13, []uint16{22}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{13, 13, []uint16{3, 1}}, {13, 13, []uint16{2, 1363, 1372, 1381}},
		{18, 13, []uint16{1393}}, {1, 13, nil},
		{4, 13, nil}, {6, 13, []uint16{1393}},
		{5, 13, []uint16{1388}}, {11, 13, []uint16{2}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{2, 1328, 1352, 1385}}, {18, 13, []uint16{1404}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {7, 13, []uint16{1405}},
		{11, 13, []uint16{3}}, {5, 13, []uint16{1397}},
		{13, 13, []uint16{3, 1}}, {11, 13, []uint16{2}},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{13, 13, []uint16{4, 1396}}, {1, 13, nil},
		{6, 13, []uint16{1413}}, {2, 13, []uint16{18}},
		{16, 13, nil}, {11, 13, []uint16{1}},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{8, 13, []uint16{20}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{4, 1646}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {16, 13, nil},
		{13, 13, []uint16{3, 2}}, {13, 13, []uint16{4, 1419}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {12, 13, []uint16{1432}},
		{4, 13, nil}, {5, 13, []uint16{1425}},
		{16, 13, nil}, {13, 13, []uint16{4, 3178}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {16, 13, nil},
		{13, 13, []uint16{4, 3272}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{16, 13, nil}, {13, 13, []uint16{2, 1433, 1438}},
		{18, 13, []uint16{1451}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{7, 13, []uint16{1452}}, {11, 13, []uint16{3}},
		{5, 13, []uint16{1444}}, {13, 13, []uint16{3, 1}},
		{11, 13, []uint16{2}}, {16, 13, nil},
		{13, 13, []uint16{1}}, {13, 13, []uint16{3, 1}},
		{13, 13, []uint16{2, 1415, 1424, 1443}}, {18, 13, []uint16{1462}},
		{1, 13, nil}, {4, 13, nil},
		{6, 13, []uint16{1462}}, {5, 13, []uint16{1457}},
		{11, 13, []uint16{2}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{8, 13, []uint16{21}}, {15, 13, nil},
		{16, 13, nil}, {13, 13, []uint16{4, 1725}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {16, 13, nil},
		{13, 13, []uint16{4, 1469}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{12, 13, []uint16{1480}}, {16, 13, nil},
		{13, 13, []uint16{3, 0}}, {16, 13, nil},
		{13, 13, []uint16{4, 3178}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{16, 13, nil}, {13, 13, []uint16{4, 3272}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {16, 13, nil},
		{13, 13, []uint16{2, 1482, 1487}}, {18, 13, []uint16{1500}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {7, 13, []uint16{1501}},
		{11, 13, []uint16{3}}, {5, 13, []uint16{1493}},
		{13, 13, []uint16{3, 1}}, {11, 13, []uint16{2}},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{13, 13, []uint16{3, 1}}, {13, 13, []uint16{2, 1465, 1474, 1492}},
		{18, 13, []uint16{1511}}, {1, 13, nil},
		{4, 13, nil}, {6, 13, []uint16{1511}},
		{5, 13, []uint16{1506}}, {11, 13, []uint16{2}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{1}}, {8, 13, []uint16{22}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{4, 1753}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{16, 13, nil}, {13, 13, []uint16{3, 2}},
		{13, 13, []uint16{4, 1518}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{12, 13, []uint16{1531}}, {4, 13, nil},
		{5, 13, []uint16{1524}}, {16, 13, nil},
		{13, 13, []uint16{4, 3272}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{13, 13, []uint16{3, 1}}, {13, 13, []uint16{2, 1514, 1523, 1532}},
		{18, 13, []uint16{1545}}, {1, 13, nil},
		{4, 13, nil}, {6, 13, []uint16{1545}},
		{5, 13, []uint16{1540}}, {11, 13, []uint16{2}},
		{15, 13, nil}, {16, 13, nil},
		{13, 13, []uint16{2, 1454, 1503, 1537}}, {18, 13, []uint16{1556}},
		{13, 13, []uint16{5}}, {1, 13, nil},
		{11, 13, []uint16{5}}, {7, 13, []uint16{1557}},
		{11, 13, []uint16{3}}, {5, 13, []uint16{1549}},
		{13, 13, []uint16{3, 1}}, {11, 13, []uint16{2}},
		{16, 13, nil}, {13, 13, []uint16{1}},
		{13, 13, []uint16{4, 1548}}, {1, 13, nil},
		{6, 13, []uint16{1565}}, {2, 13, []uint16{19}},
		{16, 13, nil}, {11, 13, []uint16{1}},
		{16, 13, nil}, {13, 13, []uint16{2, 1407, 1559}},
		{18, 13, []uint16{1575}}, {13, 13, []uint16{5}},
		{1, 13, nil}, {11, 13, []uint16{5}},
		{7, 13, []uint16{1576}}, {11, 13, []uint16{3}},
		{5, 13, []uint16{1568}}, {13, 13, []uint16{3, 1}},
		{11, 13, []uint16{2}}, {16, 13, nil},
		{13, 48, []uint16{1}}, {8, 48, []uint16{20}},
		{15, 48, nil}, {16, 48, nil},
		{13, 48, []uint16{1}}, {8, 48, []uint16{23}},
		{15, 48, nil}, {16, 48, nil},
		{13, 48, []uint16{4, 3178}}, {13, 48, []uint16{5}},
		{1, 48, nil}, {11, 48, []uint16{5}},
		{16, 48, nil}, {13, 48, []uint16{2, 1578, 1582, 1586}},
		{18, 48, []uint16{1599}}, {13, 48, []uint16{5}},
		{1, 48, nil}, {11, 48, []uint16{5}},
		{7, 48, []uint16{1600}}, {11, 48, []uint16{3}},
		{5, 48, []uint16{1592}}, {13, 48, []uint16{3, 1}},
		{11, 48, []uint16{2}}, {16, 48, nil},
		{13, 48, []uint16{1}}, {13, 48, []uint16{4, 1591}},
		{13, 48, []uint16{5}}, {1, 48, nil},
		{11, 48, []uint16{5}}, {9, 48, nil},
		{14, 48, nil}, {16, 48, nil},
		{13, 48, []uint16{4, 971}}, {13, 48, []uint16{5}},
		{1, 48, nil}, {11, 48, []uint16{5}},
		{16, 48, nil}, {13, 48, []uint16{1}},
		{13, 48, []uint16{3, 1}}, {13, 48, []uint16{2, 1602, 1610}},
		{18, 48, []uint16{1623}}, {1, 48, nil},
		{4, 48, nil}, {6, 48, []uint16{1623}},
		{5, 48, []uint16{1618}}, {11, 48, []uint16{2}},
		{15, 48, nil}, {16, 48, nil},
		{13, 48, []uint16{1}}, {8, 48, []uint16{23}},
		{15, 48, nil}, {16, 48, nil},
		{13, 48, []uint16{4, 1818}}, {13, 48, []uint16{5}},
		{1, 48, nil}, {11, 48, []uint16{5}},
		{16, 48, nil}, {13, 48, []uint16{1}},
		{13, 48, []uint16{3, 1}}, {13, 48, []uint16{2, 1626, 1630}},
		{18, 48, []uint16{1643}}, {1, 48, nil},
		{4, 48, nil}, {6, 48, []uint16{1643}},
		{5, 48, []uint16{1638}}, {11, 48, []uint16{2}},
		{15, 48, nil}, {16, 48, nil},
		{13, 48, []uint16{2, 1615, 1635}}, {18, 48, []uint16{1654}},
		{13, 48, []uint16{5}}, {1, 48, nil},
		{11, 48, []uint16{5}}, {7, 48, []uint16{1655}},
		{11, 48, []uint16{3}}, {5, 48, []uint16{1647}},
		{13, 48, []uint16{3, 1}}, {11, 48, []uint16{2}},
		{16, 48, nil}, {13, 49, []uint16{1}},
		{8, 49, []uint16{21}}, {15, 49, nil},
		{16, 49, nil}, {13, 49, []uint16{1}},
		{8, 49, []uint16{23}}, {15, 49, nil},
		{16, 49, nil}, {13, 49, []uint16{4, 3178}},
		{13, 49, []uint16{5}}, {1, 49, nil},
		{11, 49, []uint16{5}}, {16, 49, nil},
		{13, 49, []uint16{2, 1657, 1661, 1665}}, {18, 49, []uint16{1678}},
		{13, 49, []uint16{5}}, {1, 49, nil},
		{11, 49, []uint16{5}}, {7, 49, []uint16{1679}},
		{11, 49, []uint16{3}}, {5, 49, []uint16{1671}},
		{13, 49, []uint16{3, 1}}, {11, 49, []uint16{2}},
		{16, 49, nil}, {13, 49, []uint16{1}},
		{13, 49, []uint16{4, 1670}}, {13, 49, []uint16{5}},
		{1, 49, nil}, {11, 49, []uint16{5}},
		{9, 49, nil}, {14, 49, nil},
		{16, 49, nil}, {13, 49, []uint16{4, 971}},
		{13, 49, []uint16{5}}, {1, 49, nil},
		{11, 49, []uint16{5}}, {16, 49, nil},
		{13, 49, []uint16{1}}, {13, 49, []uint16{3, 1}},
		{13, 49, []uint16{2, 1681, 1689}}, {18, 49, []uint16{1702}},
		{1, 49, nil}, {4, 49, nil},
		{6, 49, []uint16{1702}}, {5, 49, []uint16{1697}},
		{11, 49, []uint16{2}}, {15, 49, nil},
		{16, 49, nil}, {13, 49, []uint16{1}},
		{8, 49, []uint16{23}}, {15, 49, nil},
		{16, 49, nil}, {13, 49, []uint16{4, 1883}},
		{13, 49, []uint16{5}}, {1, 49, nil},
		{11, 49, []uint16{5}}, {16, 49, nil},
		{13, 49, []uint16{1}}, {13, 49, []uint16{3, 1}},
		{13, 49, []uint16{2, 1705, 1709}}, {18, 49, []uint16{1722}},
		{1, 49, nil}, {4, 49, nil},
		{6, 49, []uint16{1722}}, {5, 49, []uint16{1717}},
		{11, 49, []uint16{2}}, {15, 49, nil},
		{16, 49, nil}, {13, 49, []uint16{2, 1694, 1714}},
		{18, 49, []uint16{1733}}, {13, 49, []uint16{5}},
		{1, 49, nil}, {11, 49, []uint16{5}},
		{7, 49, []uint16{1734}}, {11, 49, []uint16{3}},
		{5, 49, []uint16{1726}}, {13, 49, []uint16{3, 1}},
		{11, 49, []uint16{2}}, {16, 49, nil},
		{13, 50, []uint16{1}}, {8, 50, []uint16{22}},
		{15, 50, nil}, {16, 50, nil},
		{13, 50, []uint16{1}}, {13, 50, []uint16{4, 1736}},
		{13, 50, []uint16{5}}, {1, 50, nil},
		{11, 50, []uint16{5}}, {9, 50, nil},
		{14, 50, nil}, {16, 50, nil},
		{13, 50, []uint16{4, 971}}, {13, 50, []uint16{5}},
		{1, 50, nil}, {11, 50, []uint16{5}},
		{16, 50, nil}, {13, 50, []uint16{1}},
		{13, 50, []uint16{3, 1}}, {13, 50, []uint16{2, 1740, 1748}},
		{18, 50, []uint16{1761}}, {1, 50, nil},
		{4, 50, nil}, {6, 50, []uint16{1761}},
		{5, 50, []uint16{1756}}, {11, 50, []uint16{2}},
		{15, 50, nil}, {16, 50, nil},
		{13, 51, []uint16{1}}, {8, 51, []uint16{20}},
		{15, 51, nil}, {16, 51, nil},
		{13, 51, []uint16{4, 1919}}, {13, 51, []uint16{5}},
		{1, 51, nil}, {11, 51, []uint16{5}},
		{16, 51, nil}, {13, 51, []uint16{2, 1764, 1768}},
		{18, 51, []uint16{1781}}, {13, 51, []uint16{5}},
		{1, 51, nil}, {11, 51, []uint16{5}},
		{7, 51, []uint16{1782}}, {11, 51, []uint16{3}},
		{5, 51, []uint16{1774}}, {13, 51, []uint16{3, 1}},
		{11, 51, []uint16{2}}, {16, 51, nil},
		{13, 51, []uint16{4, 971}}, {13, 51, []uint16{5}},
		{1, 51, nil}, {11, 51, []uint16{5}},
		{16, 51, nil}, {13, 51, []uint16{4, 3178}},
		{13, 51, []uint16{5}}, {1, 51, nil},
		{11, 51, []uint16{5}}, {16, 51, nil},
		{13, 51, []uint16{4, 3272}}, {13, 51, []uint16{5}},
		{1, 51, nil}, {11, 51, []uint16{5}},
		{16, 51, nil}, {13, 51, []uint16{2, 1784, 1789, 1794}},
		{18, 51, []uint16{1807}}, {13, 51, []uint16{5}},
		{1, 51, nil}, {11, 51, []uint16{5}},
		{7, 51, []uint16{1808}}, {11, 51, []uint16{3}},
		{5, 51, []uint16{1800}}, {13, 51, []uint16{3, 1}},
		{11, 51, []uint16{2}}, {16, 51, nil},
		{13, 51, []uint16{1}}, {13, 51, []uint16{4, 1799}},
		{1, 51, nil}, {6, 51, []uint16{1816}},
		{2, 51, []uint16{20}}, {16, 51, nil},
		{11, 51, []uint16{1}}, {16, 51, nil},
		{13, 51, []uint16{2, 1773, 1810}}, {18, 51, []uint16{1826}},
		{13, 51, []uint16{5}}, {1, 51, nil},
		{11, 51, []uint16{5}}, {7, 51, []uint16{1827}},
		{11, 51, []uint16{3}}, {5, 51, []uint16{1819}},
		{13, 51, []uint16{3, 1}}, {11, 51, []uint16{2}},
		{16, 51, nil}, {13, 52, []uint16{1}},
		{8, 52, []uint16{21}}, {15, 52, nil},
		{16, 52, nil}, {13, 52, []uint16{4, 1919}},
		{13, 52, []uint16{5}}, {1, 52, nil},
		{11, 52, []uint16{5}}, {16, 52, nil},
		{13, 52, []uint16{2, 1829, 1833}}, {18, 52, []uint16{1846}},
		{13, 52, []uint16{5}}, {1, 52, nil},
		{11, 52, []uint16{5}}, {7, 52, []uint16{1847}},
		{11, 52, []uint16{3}}, {5, 52, []uint16{1839}},
		{13, 52, []uint16{3, 1}}, {11, 52, []uint16{2}},
		{16, 52, nil}, {13, 52, []uint16{4, 971}},
		{13, 52, []uint16{5}}, {1, 52, nil},
		{11, 52, []uint16{5}}, {16, 52, nil},
		{13, 52, []uint16{4, 3178}}, {13, 52, []uint16{5}},
		{1, 52, nil}, {11, 52, []uint16{5}},
		{16, 52, nil}, {13, 52, []uint16{4, 3272}},
		{13, 52, []uint16{5}}, {1, 52, nil},
		{11, 52, []uint16{5}}, {16, 52, nil},
		{13, 52, []uint16{2, 1849, 1854, 1859}}, {18, 52, []uint16{1872}},
		{13, 52, []uint16{5}}, {1, 52, nil},
		{11, 52, []uint16{5}}, {7, 52, []uint16{1873}},
		{11, 52, []uint16{3}}, {5, 52, []uint16{1865}},
		{13, 52, []uint16{3, 1}}, {11, 52, []uint16{2}},
		{16, 52, nil}, {13, 52, []uint16{1}},
		{13, 52, []uint16{4, 1864}}, {1, 52, nil},
		{6, 52, []uint16{1881}}, {2, 52, []uint16{21}},
		{16, 52, nil}, {11, 52, []uint16{1}},
		{16, 52, nil}, {13, 52, []uint16{2, 1838, 1875}},
		{18, 52, []uint16{1891}}, {13, 52, []uint16{5}},
		{1, 52, nil}, {11, 52, []uint16{5}},
		{7, 52, []uint16{1892}}, {11, 52, []uint16{3}},
		{5, 52, []uint16{1884}}, {13, 52, []uint16{3, 1}},
		{11, 52, []uint16{2}}, {16, 52, nil},
		{13, 53, []uint16{4, 1962}}, {13, 53, []uint16{5}},
		{1, 53, nil}, {11, 53, []uint16{5}},
		{16, 53, nil}, {13, 53, []uint16{4, 2049}},
		{13, 53, []uint16{5}}, {1, 53, nil},
		{11, 53, []uint16{5}}, {16, 53, nil},
		{13, 53, []uint16{4, 2134}}, {13, 53, []uint16{5}},
		{1, 53, nil}, {11, 53, []uint16{5}},
		{16, 53, nil}, {13, 53, []uint16{4, 2257}},
		{13, 53, []uint16{5}}, {1, 53, nil},
		{11, 53, []uint16{5}}, {16, 53, nil},
		{13, 53, []uint16{4, 2360}}, {13, 53, []uint16{5}},
		{1, 53, nil}, {11, 53, []uint16{5}},
		{16, 53, nil}, {13, 53, []uint16{2, 1894, 1899, 1904, 1909, 1914}},
		{18, 53, []uint16{1927}}, {13, 53, []uint16{5}},
		{1, 53, nil}, {11, 53, []uint16{5}},
		{7, 53, []uint16{1928}}, {11, 53, []uint16{3}},
		{5, 53, []uint16{1920}}, {13, 53, []uint16{3, 1}},
		{11, 53, []uint16{2}}, {16, 53, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{24}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{25}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{26}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{27}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{28}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{29}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{30}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{1}}, {8, 54, []uint16{23}},
		{15, 54, nil}, {16, 54, nil},
		{13, 54, []uint16{2, 1930, 1934, 1938, 1942, 1946, 1950, 1954, 1958}}, {18, 54, []uint16{1970}},
		{13, 54, []uint16{5}}, {1, 54, nil},
		{11, 54, []uint16{5}}, {7, 54, []uint16{1971}},
		{11, 54, []uint16{3}}, {5, 54, []uint16{1963}},
		{13, 54, []uint16{3, 1}}, {11, 54, []uint16{2}},
		{16, 54, nil}, {13, 55, []uint16{4, 2371}},
		{13, 55, []uint16{5}}, {1, 55, nil},
		{11, 55, []uint16{5}}, {16, 55, nil},
		{13, 55, []uint16{4, 2371}}, {13, 55, []uint16{5}},
		{1, 55, nil}, {11, 55, []uint16{5}},
		{16, 55, nil}, {13, 55, []uint16{4, 2371}},
		{13, 55, []uint16{5}}, {1, 55, nil},
		{11, 55, []uint16{5}}, {16, 55, nil},
		{13, 55, []uint16{1}}, {13, 55, []uint16{3, 1}},
		{13, 55, []uint16{2, 1973, 1978, 1983}}, {18, 55, []uint16{1996}},
		{1, 55, nil}, {4, 55, nil},
		{6, 55, []uint16{1996}}, {5, 55, []uint16{1991}},
		{11, 55, []uint16{2}}, {15, 55, nil},
		{16, 55, nil}, {13, 55, []uint16{4, 2371}},
		{13, 55, []uint16{5}}, {1, 55, nil},
		{11, 55, []uint16{5}}, {16, 55, nil},
		{13, 55, []uint16{4, 971}}, {13, 55, []uint16{5}},
		{1, 55, nil}, {11, 55, []uint16{5}},
		{16, 55, nil}, {13, 55, []uint16{4, 3178}},
		{13, 55, []uint16{5}}, {1, 55, nil},
		{11, 55, []uint16{5}}, {16, 55, nil},
		{13, 55, []uint16{4, 3272}}, {13, 55, []uint16{5}},
		{1, 55, nil}, {11, 55, []uint16{5}},
		{16, 55, nil}, {13, 55, []uint16{2, 2004, 2009, 2014}},
		{18, 55, []uint16{2027}}, {13, 55, []uint16{5}},
		{1, 55, nil}, {11, 55, []uint16{5}},
		{7, 55, []uint16{2028}}, {11, 55, []uint16{3}},
		{5, 55, []uint16{2020}}, {13, 55, []uint16{3, 1}},
		{11, 55, []uint16{2}}, {16, 55, nil},
		{13, 55, []uint16{1}}, {13, 55, []uint16{3, 1}},
		{13, 55, []uint16{2, 1999, 2019}}, {18, 55, []uint16{2038}},
		{1, 55, nil}, {4, 55, nil},
		{6, 55, []uint16{2038}}, {5, 55, []uint16{2033}},
		{11, 55, []uint16{2}}, {15, 55, nil},
		{16, 55, nil}, {13, 55, []uint16{1}},
		{13, 55, []uint16{4, 2030}}, {1, 55, nil},
		{6, 55, []uint16{2047}}, {2, 55, []uint16{22}},
		{16, 55, nil}, {11, 55, []uint16{1}},
		{16, 55, nil}, {13, 55, []uint16{2, 1988, 2041}},
		{18, 55, []uint16{2057}}, {13, 55, []uint16{5}},
		{1, 55, nil}, {11, 55, []uint16{5}},
		{7, 55, []uint16{2058}}, {11, 55, []uint16{3}},
		{5, 55, []uint16{2050}}, {13, 55, []uint16{3, 1}},
		{11, 55, []uint16{2}}, {16, 55, nil},
		{13, 56, []uint16{1}}, {8, 56, []uint16{31}},
		{15, 56, nil}, {16, 56, nil},
		{13, 56, []uint16{4, 2375}}, {13, 56, []uint16{5}},
		{1, 56, nil}, {11, 56, []uint16{5}},
		{16, 56, nil}, {13, 56, []uint16{4, 2375}},
		{13, 56, []uint16{5}}, {1, 56, nil},
		{11, 56, []uint16{5}}, {16, 56, nil},
		{13, 56, []uint16{1}}, {13, 56, []uint16{3, 1}},
		{13, 56, []uint16{2, 2060, 2064, 2069}}, {18, 56, []uint16{2082}},
		{1, 56, nil}, {4, 56, nil},
		{6, 56, []uint16{2082}}, {5, 56, []uint16{2077}},
		{11, 56, []uint16{2}}, {15, 56, nil},
		{16, 56, nil}, {13, 56, []uint16{1}},
		{8, 56, []uint16{31}}, {15, 56, nil},
		{16, 56, nil}, {13, 56, []uint16{4, 971}},
		{13, 56, []uint16{5}}, {1, 56, nil},
		{11, 56, []uint16{5}}, {16, 56, nil},
		{13, 56, []uint16{4, 3178}}, {13, 56, []uint16{5}},
		{1, 56, nil}, {11, 56, []uint16{5}},
		{16, 56, nil}, {13, 56, []uint16{4, 3272}},
		{13, 56, []uint16{5}}, {1, 56, nil},
		{11, 56, []uint16{5}}, {16, 56, nil},
		{13, 56, []uint16{2, 2089, 2094, 2099}}, {18, 56, []uint16{2112}},
		{13, 56, []uint16{5}}, {1, 56, nil},
		{11, 56, []uint16{5}}, {7, 56, []uint16{2113}},
		{11, 56, []uint16{3}}, {5, 56, []uint16{2105}},
		{13, 56, []uint16{3, 1}}, {11, 56, []uint16{2}},
		{16, 56, nil}, {13, 56, []uint16{1}},
		{13, 56, []uint16{3, 1}}, {13, 56, []uint16{2, 2085, 2104}},
		{18, 56, []uint16{2123}}, {1, 56, nil},
		{4, 56, nil}, {6, 56, []uint16{2123}},
		{5, 56, []uint16{2118}}, {11, 56, []uint16{2}},
		{15, 56, nil}, {16, 56, nil},
		{13, 56, []uint16{1}}, {13, 56, []uint16{4, 2115}},
		{1, 56, nil}, {6, 56, []uint16{2132}},
		{2, 56, []uint16{23}}, {16, 56, nil},
		{11, 56, []uint16{1}}, {16, 56, nil},
		{13, 56, []uint16{2, 2074, 2126}}, {18, 56, []uint16{2142}},
		{13, 56, []uint16{5}}, {1, 56, nil},
		{11, 56, []uint16{5}}, {7, 56, []uint16{2143}},
		{11, 56, []uint16{3}}, {5, 56, []uint16{2135}},
		{13, 56, []uint16{3, 1}}, {11, 56, []uint16{2}},
		{16, 56, nil}, {13, 57, []uint16{1}},
		{8, 57, []uint16{32}}, {15, 57, nil},
		{16, 57, nil}, {13, 57, []uint16{4, 2375}},
		{13, 57, []uint16{5}}, {1, 57, nil},
		{11, 57, []uint16{5}}, {16, 57, nil},
		{13, 57, []uint16{4, 2375}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{16, 57, nil}, {13, 57, []uint16{4, 2375}},
		{13, 57, []uint16{5}}, {1, 57, nil},
		{11, 57, []uint16{5}}, {16, 57, nil},
		{13, 57, []uint16{4, 2375}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{16, 57, nil}, {13, 57, []uint16{4, 2375}},
		{13, 57, []uint16{5}}, {1, 57, nil},
		{11, 57, []uint16{5}}, {16, 57, nil},
		{13, 57, []uint16{4, 2375}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{16, 57, nil}, {13, 57, []uint16{4, 2375}},
		{13, 57, []uint16{5}}, {1, 57, nil},
		{11, 57, []uint16{5}}, {16, 57, nil},
		{13, 57, []uint16{4, 2375}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{16, 57, nil}, {13, 57, []uint16{1}},
		{13, 57, []uint16{3, 1}}, {13, 57, []uint16{2, 2145, 2149, 2154, 2159, 2164, 2169, 2174, 2179, 2184}},
		{18, 57, []uint16{2197}}, {1, 57, nil},
		{4, 57, nil}, {6, 57, []uint16{2197}},
		{5, 57, []uint16{2192}}, {11, 57, []uint16{2}},
		{15, 57, nil}, {16, 57, nil},
		{13, 57, []uint16{1}}, {13, 57, []uint16{4, 2189}},
		{1, 57, nil}, {6, 57, []uint16{2206}},
		{2, 57, []uint16{24}}, {16, 57, nil},
		{11, 57, []uint16{1}}, {16, 57, nil},
		{13, 57, []uint16{1}}, {8, 57, []uint16{32}},
		{15, 57, nil}, {16, 57, nil},
		{13, 57, []uint16{4, 971}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{16, 57, nil}, {13, 57, []uint16{4, 3178}},
		{13, 57, []uint16{5}}, {1, 57, nil},
		{11, 57, []uint16{5}}, {16, 57, nil},
		{13, 57, []uint16{4, 3272}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{16, 57, nil}, {13, 57, []uint16{2, 2212, 2217, 2222}},
		{18, 57, []uint16{2235}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{7, 57, []uint16{2236}}, {11, 57, []uint16{3}},
		{5, 57, []uint16{2228}}, {13, 57, []uint16{3, 1}},
		{11, 57, []uint16{2}}, {16, 57, nil},
		{13, 57, []uint16{1}}, {13, 57, []uint16{3, 1}},
		{13, 57, []uint16{2, 2208, 2227}}, {18, 57, []uint16{2246}},
		{1, 57, nil}, {4, 57, nil},
		{6, 57, []uint16{2246}}, {5, 57, []uint16{2241}},
		{11, 57, []uint16{2}}, {15, 57, nil},
		{16, 57, nil}, {13, 57, []uint16{1}},
		{13, 57, []uint16{4, 2238}}, {1, 57, nil},
		{6, 57, []uint16{2255}}, {2, 57, []uint16{25}},
		{16, 57, nil}, {11, 57, []uint16{1}},
		{16, 57, nil}, {13, 57, []uint16{2, 2200, 2249}},
		{18, 57, []uint16{2265}}, {13, 57, []uint16{5}},
		{1, 57, nil}, {11, 57, []uint16{5}},
		{7, 57, []uint16{2266}}, {11, 57, []uint16{3}},
		{5, 57, []uint16{2258}}, {13, 57, []uint16{3, 1}},
		{11, 57, []uint16{2}}, {16, 57, nil},
		{13, 58, []uint16{1}}, {8, 58, []uint16{33}},
		{15, 58, nil}, {16, 58, nil},
		{13, 58, []uint16{4, 2375}}, {13, 58, []uint16{5}},
		{1, 58, nil}, {11, 58, []uint16{5}},
		{16, 58, nil}, {13, 58, []uint16{4, 2375}},
		{13, 58, []uint16{5}}, {1, 58, nil},
		{11, 58, []uint16{5}}, {16, 58, nil},
		{13, 58, []uint16{4, 2375}}, {13, 58, []uint16{5}},
		{1, 58, nil}, {11, 58, []uint16{5}},
		{16, 58, nil}, {13, 58, []uint16{4, 2375}},
		{13, 58, []uint16{5}}, {1, 58, nil},
		{11, 58, []uint16{5}}, {16, 58, nil},
		{13, 58, []uint16{1}}, {13, 58, []uint16{3, 1}},
		{13, 58, []uint16{2, 2268, 2272, 2277, 2282, 2287}}, {18, 58, []uint16{2300}},
		{1, 58, nil}, {4, 58, nil},
		{6, 58, []uint16{2300}}, {5, 58, []uint16{2295}},
		{11, 58, []uint16{2}}, {15, 58, nil},
		{16, 58, nil}, {13, 58, []uint16{1}},
		{13, 58, []uint16{4, 2292}}, {1, 58, nil},
		{6, 58, []uint16{2309}}, {2, 58, []uint16{26}},
		{16, 58, nil}, {11, 58, []uint16{1}},
		{16, 58, nil}, {13, 58, []uint16{1}},
		{8, 58, []uint16{33}}, {15, 58, nil},
		{16, 58, nil}, {13, 58, []uint16{4, 971}},
		{13, 58, []uint16{5}}, {1, 58, nil},
		{11, 58, []uint16{5}}, {16, 58, nil},
		{13, 58, []uint16{4, 3178}}, {13, 58, []uint16{5}},
		{1, 58, nil}, {11, 58, []uint16{5}},
		{16, 58, nil}, {13, 58, []uint16{4, 3272}},
		{13, 58, []uint16{5}}, {1, 58, nil},
		{11, 58, []uint16{5}}, {16, 58, nil},
		{13, 58, []uint16{2, 2315, 2320, 2325}}, {18, 58, []uint16{2338}},
		{13, 58, []uint16{5}}, {1, 58, nil},
		{11, 58, []uint16{5}}, {7, 58, []uint16{2339}},
		{11, 58, []uint16{3}}, {5, 58, []uint16{2331}},
		{13, 58, []uint16{3, 1}}, {11, 58, []uint16{2}},
		{16, 58, nil}, {13, 58, []uint16{1}},
		{13, 58, []uint16{3, 1}}, {13, 58, []uint16{2, 2311, 2330}},
		{18, 58, []uint16{2349}}, {1, 58, nil},
		{4, 58, nil}, {6, 58, []uint16{2349}},
		{5, 58, []uint16{2344}}, {11, 58, []uint16{2}},
		{15, 58, nil}, {16, 58, nil},
		{13, 58, []uint16{1}}, {13, 58, []uint16{4, 2341}},
		{1, 58, nil}, {6, 58, []uint16{2358}},
		{2, 58, []uint16{27}}, {16, 58, nil},
		{11, 58, []uint16{1}}, {16, 58, nil},
		{13, 58, []uint16{2, 2303, 2352}}, {18, 58, []uint16{2368}},
		{13, 58, []uint16{5}}, {1, 58, nil},
		{11, 58, []uint16{5}}, {7, 58, []uint16{2369}},
		{11, 58, []uint16{3}}, {5, 58, []uint16{2361}},
		{13, 58, []uint16{3, 1}}, {11, 58, []uint16{2}},
		{16, 58, nil}, {13, 59, []uint16{1}},
		{8, 59, []uint16{34}}, {15, 59, nil},
		{16, 59, nil}, {13, 60, []uint16{1}},
		{8, 60, []uint16{35}}, {15, 60, nil},
		{16, 60, nil}, {13, 32, []uint16{1}},
		{8, 32, []uint16{36}}, {15, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{4, 2575}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {16, 32, nil},
		{13, 32, []uint16{4, 2654}}, {13, 32, []uint16{5}},
		{1, 32, nil}, {11, 32, []uint16{5}},
		{16, 32, nil}, {13, 32, []uint16{1}},
		{8, 32, []uint16{23}}, {15, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{4, 2925}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {16, 32, nil},
		{13, 32, []uint16{1}}, {13, 32, []uint16{3, 1}},
		{13, 32, []uint16{2, 2393, 2397}}, {18, 32, []uint16{2410}},
		{1, 32, nil}, {4, 32, nil},
		{6, 32, []uint16{2410}}, {5, 32, []uint16{2405}},
		{11, 32, []uint16{2}}, {15, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{2, 2383, 2388, 2402}},
		{18, 32, []uint16{2421}}, {13, 32, []uint16{5}},
		{1, 32, nil}, {11, 32, []uint16{5}},
		{7, 32, []uint16{2422}}, {11, 32, []uint16{3}},
		{5, 32, []uint16{2414}}, {13, 32, []uint16{3, 1}},
		{11, 32, []uint16{2}}, {16, 32, nil},
		{13, 32, []uint16{3, 2}}, {13, 32, []uint16{4, 2413}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {12, 32, []uint16{2432}},
		{4, 32, nil}, {5, 32, []uint16{2425}},
		{16, 32, nil}, {13, 32, []uint16{1}},
		{8, 32, []uint16{37}}, {15, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{1}},
		{8, 32, []uint16{19}}, {15, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{4, 2437}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {12, 32, []uint16{2447}},
		{16, 32, nil}, {13, 32, []uint16{3, 0}},
		{16, 32, nil}, {13, 32, []uint16{1}},
		{13, 32, []uint16{3, 1}}, {13, 32, []uint16{2, 2379, 2424, 2433, 2441}},
		{18, 32, []uint16{2457}}, {1, 32, nil},
		{4, 32, nil}, {6, 32, []uint16{2457}},
		{5, 32, []uint16{2452}}, {11, 32, []uint16{2}},
		{15, 32, nil}, {16, 32, nil},
		{13, 32, []uint16{1}}, {13, 32, []uint16{4, 2449}},
		{1, 32, nil}, {6, 32, []uint16{2466}},
		{2, 32, []uint16{28}}, {16, 32, nil},
		{11, 32, []uint16{1}}, {16, 32, nil},
		{13, 32, []uint16{1}}, {8, 32, []uint16{36}},
		{15, 32, nil}, {16, 32, nil},
		{13, 32, []uint16{4, 3178}}, {13, 32, []uint16{5}},
		{1, 32, nil}, {11, 32, []uint16{5}},
		{16, 32, nil}, {13, 32, []uint16{1}},
		{13, 32, []uint16{4, 2472}}, {13, 32, []uint16{5}},
		{1, 32, nil}, {11, 32, []uint16{5}},
		{9, 32, nil}, {14, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{4, 971}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {16, 32, nil},
		{13, 32, []uint16{1}}, {13, 32, []uint16{3, 1}},
		{13, 32, []uint16{2, 2477, 2485}}, {18, 32, []uint16{2498}},
		{1, 32, nil}, {4, 32, nil},
		{6, 32, []uint16{2498}}, {5, 32, []uint16{2493}},
		{11, 32, []uint16{2}}, {15, 32, nil},
		{16, 32, nil}, {13, 32, []uint16{3, 2}},
		{13, 32, []uint16{4, 2490}}, {13, 32, []uint16{5}},
		{1, 32, nil}, {11, 32, []uint16{5}},
		{12, 32, []uint16{2509}}, {4, 32, nil},
		{5, 32, []uint16{2502}}, {16, 32, nil},
		{13, 32, []uint16{4, 3178}}, {13, 32, []uint16{5}},
		{1, 32, nil}, {11, 32, []uint16{5}},
		{16, 32, nil}, {13, 32, []uint16{4, 3272}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {16, 32, nil},
		{13, 32, []uint16{2, 2510, 2515}}, {18, 32, []uint16{2528}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {7, 32, []uint16{2529}},
		{11, 32, []uint16{3}}, {5, 32, []uint16{2521}},
		{13, 32, []uint16{3, 1}}, {11, 32, []uint16{2}},
		{16, 32, nil}, {13, 32, []uint16{1}},
		{13, 32, []uint16{3, 1}}, {13, 32, []uint16{2, 2468, 2501, 2520}},
		{18, 32, []uint16{2539}}, {1, 32, nil},
		{4, 32, nil}, {6, 32, []uint16{2539}},
		{5, 32, []uint16{2534}}, {11, 32, []uint16{2}},
		{15, 32, nil}, {16, 32, nil},
		{13, 32, []uint16{1}}, {13, 32, []uint16{4, 2531}},
		{1, 32, nil}, {6, 32, []uint16{2548}},
		{2, 32, []uint16{29}}, {16, 32, nil},
		{11, 32, []uint16{1}}, {16, 32, nil},
		{13, 32, []uint16{2, 2460, 2542}}, {18, 32, []uint16{2558}},
		{13, 32, []uint16{5}}, {1, 32, nil},
		{11, 32, []uint16{5}}, {7, 32, []uint16{2559}},
		{11, 32, []uint16{3}}, {5, 32, []uint16{2551}},
		{13, 32, []uint16{3, 1}}, {11, 32, []uint16{2}},
		{16, 32, nil}, {13, 61, []uint16{4, 2654}},
		{13, 61, []uint16{5}}, {1, 61, nil},
		{11, 61, []uint16{5}}, {16, 61, nil},
		{13, 61, []uint16{1}}, {8, 61, []uint16{38}},
		{15, 61, nil}, {16, 61, nil},
		{13, 61, []uint16{4, 2654}}, {13, 61, []uint16{5}},
		{1, 61, nil}, {11, 61, []uint16{5}},
		{16, 61, nil}, {13, 61, []uint16{1}},
		{13, 61, []uint16{3, 1}}, {13, 61, []uint16{2, 2561, 2566, 2570}},
		{18, 61, []uint16{2583}}, {1, 61, nil},
		{4, 61, nil}, {6, 61, []uint16{2583}},
		{5, 61, []uint16{2578}}, {11, 61, []uint16{2}},
		{15, 61, nil}, {16, 61, nil},
		{13, 62, []uint16{1}}, {8, 62, []uint16{37}},
		{15, 62, nil}, {16, 62, nil},
		{13, 62, []uint16{1}}, {8, 62, []uint16{23}},
		{15, 62, nil}, {16, 62, nil},
		{13, 62, []uint16{4, 3178}}, {13, 62, []uint16{5}},
		{1, 62, nil}, {11, 62, []uint16{5}},
		{16, 62, nil}, {13, 62, []uint16{2, 2586, 2590, 2594}},
		{18, 62, []uint16{2607}}, {13, 62, []uint16{5}},
		{1, 62, nil}, {11, 62, []uint16{5}},
		{7, 62, []uint16{2608}}, {11, 62, []uint16{3}},
		{5, 62, []uint16{2600}}, {13, 62, []uint16{3, 1}},
		{11, 62, []uint16{2}}, {16, 62, nil},
		{13, 62, []uint16{1}}, {13, 62, []uint16{4, 2599}},
		{13, 62, []uint16{5}}, {1, 62, nil},
		{11, 62, []uint16{5}}, {9, 62, nil},
		{14, 62, nil}, {16, 62, nil},
		{13, 62, []uint16{4, 971}}, {13, 62, []uint16{5}},
		{1, 62, nil}, {11, 62, []uint16{5}},
		{16, 62, nil}, {13, 62, []uint16{1}},
		{13, 62, []uint16{3, 1}}, {13, 62, []uint16{2, 2610, 2618}},
		{18, 62, []uint16{2631}}, {1, 62, nil},
		{4, 62, nil}, {6, 62, []uint16{2631}},
		{5, 62, []uint16{2626}}, {11, 62, []uint16{2}},
		{15, 62, nil}, {16, 62, nil},
		{13, 62, []uint16{1}}, {8, 62, []uint16{23}},
		{15, 62, nil}, {16, 62, nil},
		{13, 62, []uint16{4, 2746}}, {13, 62, []uint16{5}},
		{1, 62, nil}, {11, 62, []uint16{5}},
		{16, 62, nil}, {13, 62, []uint16{1}},
		{13, 62, []uint16{3, 1}}, {13, 62, []uint16{2, 2634, 2638}},
		{18, 62, []uint16{2651}}, {1, 62, nil},
		{4, 62, nil}, {6, 62, []uint16{2651}},
		{5, 62, []uint16{2646}}, {11, 62, []uint16{2}},
		{15, 62, nil}, {16, 62, nil},
		{13, 62, []uint16{2, 2623, 2643}}, {18, 62, []uint16{2662}},
		{13, 62, []uint16{5}}, {1, 62, nil},
		{11, 62, []uint16{5}}, {7, 62, []uint16{2663}},
		{11, 62, []uint16{3}}, {5, 62, []uint16{2655}},
		{13, 62, []uint16{3, 1}}, {11, 62, []uint16{2}},
		{16, 62, nil}, {13, 64, []uint16{1}},
		{8, 64, []uint16{37}}, {15, 64, nil},
		{16, 64, nil}, {13, 64, []uint16{1}},
		{8, 64, []uint16{39}}, {15, 64, nil},
		{16, 64, nil}, {13, 64, []uint16{4, 1919}},
		{13, 64, []uint16{5}}, {1, 64, nil},
		{11, 64, []uint16{5}}, {16, 64, nil},
		{13, 64, []uint16{2, 2665, 2669, 2673}}, {18, 64, []uint16{2686}},
		{13, 64, []uint16{5}}, {1, 64, nil},
		{11, 64, []uint16{5}}, {7, 64, []uint16{2687}},
		{11, 64, []uint16{3}}, {5, 64, []uint16{2679}},
		{13, 64, []uint16{3, 1}}, {11, 64, []uint16{2}},
		{16, 64, nil}, {13, 64, []uint16{1}},
		{8, 64, []uint16{40}}, {15, 64, nil},
		{16, 64, nil}, {13, 64, []uint16{1}},
		{13, 64, []uint16{4, 2689}}, {13, 64, []uint16{5}},
		{1, 64, nil}, {11, 64, []uint16{5}},
		{9, 64, nil}, {14, 64, nil},
		{16, 64, nil}, {13, 64, []uint16{4, 971}},
		{13, 64, []uint16{5}}, {1, 64, nil},
		{11, 64, []uint16{5}}, {16, 64, nil},
		{13, 64, []uint16{4, 3178}}, {13, 64, []uint16{5}},
		{1, 64, nil}, {11, 64, []uint16{5}},
		{16, 64, nil}, {13, 64, []uint16{4, 3272}},
		{13, 64, []uint16{5}}, {1, 64, nil},
		{11, 64, []uint16{5}}, {16, 64, nil},
		{13, 64, []uint16{2, 2701, 2706, 2711}}, {18, 64, []uint16{2724}},
		{13, 64, []uint16{5}}, {1, 64, nil},
		{11, 64, []uint16{5}}, {7, 64, []uint16{2725}},
		{11, 64, []uint16{3}}, {5, 64, []uint16{2717}},
		{13, 64, []uint16{3, 1}}, {11, 64, []uint16{2}},
		{16, 64, nil}, {13, 64, []uint16{1}},
		{13, 64, []uint16{3, 1}}, {13, 64, []uint16{2, 2693, 2716}},
		{18, 64, []uint16{2735}}, {1, 64, nil},
		{4, 64, nil}, {6, 64, []uint16{2735}},
		{5, 64, []uint16{2730}}, {11, 64, []uint16{2}},
		{15, 64, nil}, {16, 64, nil},
		{13, 64, []uint16{1}}, {13, 64, []uint16{4, 2727}},
		{1, 64, nil}, {6, 64, []uint16{2744}},
		{2, 64, []uint16{30}}, {16, 64, nil},
		{11, 64, []uint16{1}}, {16, 64, nil},
		{13, 64, []uint16{2, 2678, 2738}}, {18, 64, []uint16{2754}},
		{13, 64, []uint16{5}}, {1, 64, nil},
		{11, 64, []uint16{5}}, {7, 64, []uint16{2755}},
		{11, 64, []uint16{3}}, {5, 64, []uint16{2747}},
		{13, 64, []uint16{3, 1}}, {11, 64, []uint16{2}},
		{16, 64, nil}, {13, 63, []uint16{1}},
		{8, 63, []uint16{40}}, {15, 63, nil},
		{16, 63, nil}, {13, 63, []uint16{4, 2936}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {16, 63, nil},
		{13, 63, []uint16{1}}, {8, 63, []uint16{41}},
		{15, 63, nil}, {16, 63, nil},
		{13, 63, []uint16{1}}, {13, 63, []uint16{4, 2766}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {9, 63, nil},
		{14, 63, nil}, {16, 63, nil},
		{13, 63, []uint16{4, 971}}, {13, 63, []uint16{5}},
		{1, 63, nil}, {11, 63, []uint16{5}},
		{16, 63, nil}, {13, 63, []uint16{4, 3178}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {16, 63, nil},
		{13, 63, []uint16{4, 3272}}, {13, 63, []uint16{5}},
		{1, 63, nil}, {11, 63, []uint16{5}},
		{16, 63, nil}, {13, 63, []uint16{2, 2778, 2783, 2788}},
		{18, 63, []uint16{2801}}, {13, 63, []uint16{5}},
		{1, 63, nil}, {11, 63, []uint16{5}},
		{7, 63, []uint16{2802}}, {11, 63, []uint16{3}},
		{5, 63, []uint16{2794}}, {13, 63, []uint16{3, 1}},
		{11, 63, []uint16{2}}, {16, 63, nil},
		{13, 63, []uint16{1}}, {13, 63, []uint16{3, 1}},
		{13, 63, []uint16{2, 2770, 2793}}, {18, 63, []uint16{2812}},
		{1, 63, nil}, {4, 63, nil},
		{6, 63, []uint16{2812}}, {5, 63, []uint16{2807}},
		{11, 63, []uint16{2}}, {15, 63, nil},
		{16, 63, nil}, {13, 63, []uint16{1}},
		{13, 63, []uint16{4, 2804}}, {1, 63, nil},
		{6, 63, []uint16{2821}}, {2, 63, []uint16{31}},
		{16, 63, nil}, {11, 63, []uint16{1}},
		{16, 63, nil}, {13, 63, []uint16{1}},
		{8, 63, []uint16{41}}, {15, 63, nil},
		{16, 63, nil}, {13, 63, []uint16{4, 1226}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {16, 63, nil},
		{13, 63, []uint16{4, 2827}}, {13, 63, []uint16{5}},
		{1, 63, nil}, {11, 63, []uint16{5}},
		{17, 63, []uint16{43}}, {16, 63, nil},
		{13, 63, []uint16{1}}, {8, 63, []uint16{42}},
		{15, 63, nil}, {16, 63, nil},
		{13, 63, []uint16{1}}, {13, 63, []uint16{3, 1}},
		{13, 63, []uint16{2, 2823, 2832, 2838}}, {18, 63, []uint16{2850}},
		{1, 63, nil}, {4, 63, nil},
		{6, 63, []uint16{2850}}, {5, 63, []uint16{2845}},
		{11, 63, []uint16{2}}, {15, 63, nil},
		{16, 63, nil}, {13, 63, []uint16{1}},
		{13, 63, []uint16{4, 2842}}, {1, 63, nil},
		{6, 63, []uint16{2859}}, {2, 63, []uint16{32}},
		{16, 63, nil}, {11, 63, []uint16{1}},
		{16, 63, nil}, {13, 63, []uint16{1}},
		{8, 63, []uint16{41}}, {15, 63, nil},
		{16, 63, nil}, {13, 63, []uint16{4, 1226}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {16, 63, nil},
		{13, 63, []uint16{1}}, {8, 63, []uint16{37}},
		{15, 63, nil}, {16, 63, nil},
		{13, 63, []uint16{4, 3178}}, {13, 63, []uint16{5}},
		{1, 63, nil}, {11, 63, []uint16{5}},
		{16, 63, nil}, {13, 63, []uint16{4, 3272}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {16, 63, nil},
		{13, 63, []uint16{2, 2870, 2874, 2879}}, {18, 63, []uint16{2892}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {7, 63, []uint16{2893}},
		{11, 63, []uint16{3}}, {5, 63, []uint16{2885}},
		{13, 63, []uint16{3, 1}}, {11, 63, []uint16{2}},
		{16, 63, nil}, {13, 63, []uint16{1}},
		{13, 63, []uint16{3, 1}}, {13, 63, []uint16{2, 2861, 2865, 2884}},
		{18, 63, []uint16{2903}}, {1, 63, nil},
		{4, 63, nil}, {6, 63, []uint16{2903}},
		{5, 63, []uint16{2898}}, {11, 63, []uint16{2}},
		{15, 63, nil}, {16, 63, nil},
		{13, 63, []uint16{1}}, {13, 63, []uint16{4, 2895}},
		{1, 63, nil}, {6, 63, []uint16{2912}},
		{2, 63, []uint16{33}}, {16, 63, nil},
		{11, 63, []uint16{1}}, {16, 63, nil},
		{13, 63, []uint16{2, 2761, 2815, 2853, 2906}}, {18, 63, []uint16{2922}},
		{13, 63, []uint16{5}}, {1, 63, nil},
		{11, 63, []uint16{5}}, {7, 63, []uint16{2923}},
		{11, 63, []uint16{3}}, {5, 63, []uint16{2915}},
		{13, 63, []uint16{3, 1}}, {11, 63, []uint16{2}},
		{16, 63, nil}, {13, 63, []uint16{1}},
		{13, 63, []uint16{3, 1}}, {13, 63, []uint16{2, 2757, 2914}},
		{18, 63, []uint16{2933}}, {1, 63, nil},
		{4, 63, nil}, {6, 63, []uint16{2933}},
		{5, 63, []uint16{2928}}, {11, 63, []uint16{2}},
		{15, 63, nil}, {16, 63, nil},
		{13, 65, []uint16{1}}, {8, 65, []uint16{43}},
		{15, 65, nil}, {16, 65, nil},
		{13, 33, []uint16{1}}, {8, 33, []uint16{44}},
		{15, 33, nil}, {16, 33, nil},
		{13, 33, []uint16{1}}, {13, 33, []uint16{4, 2940}},
		{1, 33, nil}, {6, 33, []uint16{2950}},
		{2, 33, []uint16{34}}, {16, 33, nil},
		{11, 33, []uint16{1}}, {16, 33, nil},
		{13, 8, []uint16{1}}, {8, 8, []uint16{41}},
		{15, 8, nil}, {16, 8, nil},
		{13, 8, []uint16{4, 3100}}, {13, 8, []uint16{5}},
		{1, 8, nil}, {11, 8, []uint16{5}},
		{16, 8, nil}, {13, 8, []uint16{1}},
		{8, 8, []uint16{42}}, {15, 8, nil},
		{16, 8, nil}, {13, 8, []uint16{1}},
		{13, 8, []uint16{3, 1}}, {13, 8, []uint16{2, 2952, 2956, 2961}},
		{18, 8, []uint16{2973}}, {1, 8, nil},
		{4, 8, nil}, {6, 8, []uint16{2973}},
		{5, 8, []uint16{2968}}, {11, 8, []uint16{2}},
		{15, 8, nil}, {16, 8, nil},
		{13, 8, []uint16{1}}, {13, 8, []uint16{4, 2965}},
		{1, 8, nil}, {6, 8, []uint16{2982}},
		{2, 8, []uint16{35}}, {16, 8, nil},
		{11, 8, []uint16{1}}, {16, 8, nil},
		{13, 8, []uint16{1}}, {8, 8, []uint16{41}},
		{15, 8, nil}, {16, 8, nil},
		{13, 8, []uint16{4, 3100}}, {13, 8, []uint16{5}},
		{1, 8, nil}, {11, 8, []uint16{5}},
		{16, 8, nil}, {13, 8, []uint16{4, 3272}},
		{13, 8, []uint16{5}}, {1, 8, nil},
		{11, 8, []uint16{5}}, {16, 8, nil},
		{13, 8, []uint16{1}}, {13, 8, []uint16{3, 1}},
		{13, 8, []uint16{2, 2984, 2988, 2993}}, {18, 8, []uint16{3006}},
		{1, 8, nil}, {4, 8, nil},
		{6, 8, []uint16{3006}}, {5, 8, []uint16{3001}},
		{11, 8, []uint16{2}}, {15, 8, nil},
		{16, 8, nil}, {13, 8, []uint16{1}},
		{13, 8, []uint16{4, 2998}}, {1, 8, nil},
		{6, 8, []uint16{3015}}, {2, 8, []uint16{36}},
		{16, 8, nil}, {11, 8, []uint16{1}},
		{16, 8, nil}, {13, 8, []uint16{2, 2976, 3009}},
		{18, 8, []uint16{3025}}, {13, 8, []uint16{5}},
		{1, 8, nil}, {11, 8, []uint16{5}},
		{7, 8, []uint16{3026}}, {11, 8, []uint16{3}},
		{5, 8, []uint16{3018}}, {13, 8, []uint16{3, 1}},
		{11, 8, []uint16{2}}, {16, 8, nil},
		{13, 66, []uint16{1}}, {8, 66, []uint16{45}},
		{15, 66, nil}, {16, 66, nil},
		{13, 66, []uint16{1}}, {13, 66, []uint16{4, 3028}},
		{13, 66, []uint16{5}}, {1, 66, nil},
		{11, 66, []uint16{5}}, {9, 66, nil},
		{14, 66, nil}, {16, 66, nil},
		{13, 66, []uint16{4, 971}}, {13, 66, []uint16{5}},
		{1, 66, nil}, {11, 66, []uint16{5}},
		{16, 66, nil}, {13, 66, []uint16{1}},
		{13, 66, []uint16{3, 1}}, {13, 66, []uint16{2, 3032, 3040}},
		{18, 66, []uint16{3053}}, {1, 66, nil},
		{4, 66, nil}, {6, 66, []uint16{3053}},
		{5, 66, []uint16{3048}}, {11, 66, []uint16{2}},
		{15, 66, nil}, {16, 66, nil},
		{13, 66, []uint16{3, 1}}, {13, 66, []uint16{4, 3045}},
		{13, 66, []uint16{5}}, {1, 66, nil},
		{11, 66, []uint16{5}}, {12, 66, []uint16{3064}},
		{4, 66, nil}, {5, 66, []uint16{3057}},
		{16, 66, nil}, {13, 66, []uint16{1}},
		{8, 66, []uint16{41}}, {15, 66, nil},
		{16, 66, nil}, {13, 66, []uint16{4, 3100}},
		{13, 66, []uint16{5}}, {1, 66, nil},
		{11, 66, []uint16{5}}, {16, 66, nil},
		{13, 66, []uint16{1}}, {8, 66, []uint16{42}},
		{15, 66, nil}, {16, 66, nil},
		{13, 66, []uint16{1}}, {13, 66, []uint16{3, 1}},
		{13, 66, []uint16{2, 3065, 3069, 3074}}, {18, 66, []uint16{3086}},
		{1, 66, nil}, {4, 66, nil},
		{6, 66, []uint16{3086}}, {5, 66, []uint16{3081}},
		{11, 66, []uint16{2}}, {15, 66, nil},
		{16, 66, nil}, {13, 66, []uint16{2, 3056, 3078}},
		{18, 66, []uint16{3097}}, {13, 66, []uint16{5}},
		{1, 66, nil}, {11, 66, []uint16{5}},
		{7, 66, []uint16{3098}}, {11, 66, []uint16{3}},
		{5, 66, []uint16{3090}}, {13, 66, []uint16{3, 1}},
		{11, 66, []uint16{2}}, {16, 66, nil},
		{13, 66, []uint16{3, 2}}, {13, 66, []uint16{4, 3089}},
		{13, 66, []uint16{5}}, {1, 66, nil},
		{11, 66, []uint16{5}}, {12, 66, []uint16{3108}},
		{4, 66, nil}, {5, 66, []uint16{3101}},
		{16, 66, nil}, {13, 1, []uint16{4, 3174}},
		{13, 1, []uint16{5}}, {1, 1, nil},
		{11, 1, []uint16{5}}, {16, 1, nil},
		{13, 1, []uint16{4, 3178}}, {13, 1, []uint16{5}},
		{1, 1, nil}, {11, 1, []uint16{5}},
		{16, 1, nil}, {13, 1, []uint16{4, 985}},
		{13, 1, []uint16{5}}, {1, 1, nil},
		{11, 1, []uint16{5}}, {16, 1, nil},
		{13, 1, []uint16{2, 3109, 3114, 3119}}, {18, 1, []uint16{3132}},
		{13, 1, []uint16{5}}, {1, 1, nil},
		{11, 1, []uint16{5}}, {7, 1, []uint16{3133}},
		{11, 1, []uint16{3}}, {5, 1, []uint16{3125}},
		{13, 1, []uint16{3, 1}}, {11, 1, []uint16{2}},
		{16, 1, nil}, {13, 1, []uint16{3, 2}},
		{13, 1, []uint16{4, 3124}}, {13, 1, []uint16{5}},
		{1, 1, nil}, {11, 1, []uint16{5}},
		{12, 1, []uint16{3143}}, {4, 1, nil},
		{5, 1, []uint16{3136}}, {16, 1, nil},
		{13, 68, []uint16{4, 3174}}, {13, 68, []uint16{5}},
		{1, 68, nil}, {11, 68, []uint16{5}},
		{16, 68, nil}, {13, 68, []uint16{4, 1113}},
		{13, 68, []uint16{5}}, {1, 68, nil},
		{11, 68, []uint16{5}}, {16, 68, nil},
		{13, 68, []uint16{2, 3144, 3149}}, {18, 68, []uint16{3162}},
		{13, 68, []uint16{5}}, {1, 68, nil},
		{11, 68, []uint16{5}}, {7, 68, []uint16{3163}},
		{11, 68, []uint16{3}}, {5, 68, []uint16{3155}},
		{13, 68, []uint16{3, 1}}, {11, 68, []uint16{2}},
		{16, 68, nil}, {13, 68, []uint16{3, 2}},
		{13, 68, []uint16{4, 3154}}, {13, 68, []uint16{5}},
		{1, 68, nil}, {11, 68, []uint16{5}},
		{12, 68, []uint16{3173}}, {4, 68, nil},
		{5, 68, []uint16{3166}}, {16, 68, nil},
		{13, 67, []uint16{1}}, {8, 67, []uint16{46}},
		{15, 67, nil}, {16, 67, nil},
		{13, 42, []uint16{1}}, {8, 42, []uint16{47}},
		{15, 42, nil}, {16, 42, nil},
		{13, 9, []uint16{4, 3135}}, {13, 9, []uint16{5}},
		{1, 9, nil}, {11, 9, []uint16{5}},
		{16, 9, nil}, {13, 9, []uint16{1}},
		{8, 9, []uint16{48}}, {15, 9, nil},
		{16, 9, nil}, {13, 9, []uint16{1}},
		{13, 9, []uint16{3, 1}}, {13, 9, []uint16{2, 3182, 3187}},
		{18, 9, []uint16{3199}}, {1, 9, nil},
		{4, 9, nil}, {6, 9, []uint16{3199}},
		{5, 9, []uint16{3194}}, {11, 9, []uint16{2}},
		{15, 9, nil}, {16, 9, nil},
		{13, 9, []uint16{4, 3165}}, {13, 9, []uint16{5}},
		{1, 9, nil}, {11, 9, []uint16{5}},
		{16, 9, nil}, {13, 9, []uint16{4, 1166}},
		{13, 9, []uint16{5}}, {1, 9, nil},
		{11, 9, []uint16{5}}, {16, 9, nil},
		{13, 9, []uint16{4, 3207}}, {13, 9, []uint16{5}},
		{1, 9, nil}, {11, 9, []uint16{5}},
		{12, 9, []uint16{3218}}, {16, 9, nil},
		{13, 9, []uint16{3, 0}}, {16, 9, nil},
		{13, 9, []uint16{4, 3178}}, {13, 9, []uint16{5}},
		{1, 9, nil}, {11, 9, []uint16{5}},
		{16, 9, nil}, {13, 9, []uint16{1}},
		{13, 9, []uint16{3, 1}}, {13, 9, []uint16{2, 3202, 3212, 3220}},
		{18, 9, []uint16{3233}}, {1, 9, nil},
		{4, 9, nil}, {6, 9, []uint16{3233}},
		{5, 9, []uint16{3228}}, {11, 9, []uint16{2}},
		{15, 9, nil}, {16, 9, nil},
		{13, 9, []uint16{4, 3135}}, {13, 9, []uint16{5}},
		{1, 9, nil}, {11, 9, []uint16{5}},
		{16, 9, nil}, {13, 9, []uint16{4, 3272}},
		{13, 9, []uint16{5}}, {1, 9, nil},
		{11, 9, []uint16{5}}, {16, 9, nil},
		{13, 9, []uint16{1}}, {13, 9, []uint16{3, 1}},
		{13, 9, []uint16{2, 3236, 3241}}, {18, 9, []uint16{3254}},
		{1, 9, nil}, {4, 9, nil},
		{6, 9, []uint16{3254}}, {5, 9, []uint16{3249}},
		{11, 9, []uint16{2}}, {15, 9, nil},
		{16, 9, nil}, {13, 9, []uint16{2, 3191, 3225, 3246}},
		{18, 9, []uint16{3265}}, {13, 9, []uint16{5}},
		{1, 9, nil}, {11, 9, []uint16{5}},
		{7, 9, []uint16{3266}}, {11, 9, []uint16{3}},
		{5, 9, []uint16{3258}}, {13, 9, []uint16{3, 1}},
		{11, 9, []uint16{2}}, {16, 9, nil},
		{13, 6, []uint16{1}}, {8, 6, []uint16{13}},
		{15, 6, nil}, {16, 6, nil},
		{13, 6, []uint16{1}}, {13, 6, []uint16{4, 3268}},
		{13, 6, []uint16{5}}, {1, 6, nil},
		{11, 6, []uint16{5}}, {9, 6, nil},
		{14, 6, nil}, {16, 6, nil},
	},
	ss: []string{
		"Grammar", "__", "initializer",
		"Initializer", "rules", "Rule",
		"EOF", "code", "CodeBlock",
		"EOS", "name", "IdentifierName",
		"display", "StringLiteral", "RuleDefOp",
		"expr", "Expression", "ChoiceExpr",
		"first", "ActionExpr", "rest",
		"SeqExpr", "LabeledExpr", "label",
		"Identifier", "PrefixedExpr", "op",
		"PrefixedOp", "SuffixedExpr", "PrimaryExpr",
		"SuffixedOp", "LitMatcher", "CharClassMatcher",
		"AnyMatcher", "RuleRefExpr", "SemanticPredExpr",
		"SemanticPredOp", "SourceChar", "Comment",
		"MultiLineComment", "SingleLineComment", "MultiLineCommentNoLineTerminator",
		"EOL", "ident", "IdentifierStart",
		"IdentifierPart", "lit", "ignore",
		"DoubleStringChar", "SingleStringChar", "RawStringChar",
		"DoubleStringEscape", "SingleStringEscape", "CommonEscapeSequence",
		"SingleCharEscape", "OctalEscape", "HexEscape",
		"LongUnicodeEscape", "ShortUnicodeEscape", "OctalDigit",
		"HexDigit", "ClassCharRange", "ClassChar",
		"UnicodeClassEscape", "CharClassEscape", "SingleCharUnicodeClass",
		"Code", "Whitespace", "_",
	},
	ms: []ϡmatcher{
		ϡstringMatcher{
			ignoreCase: false,
			value:      "/",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ":",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "&",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "!",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "?",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "*",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "+",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "(",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ")",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "=",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "<-",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "←",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "⟵",
		},
		ϡanyMatcher{},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "/*",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "*/",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "//",
		},
		ϡcharClassMatcher{
			raw:        "[\\pL_]",
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'_'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{ϡrangeTable("L")},
		},
		ϡcharClassMatcher{
			raw:        "[\\p{Nd}]",
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{ϡrangeTable("Nd")},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "i",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\"",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "'",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "`",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\\",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "a",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "b",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "n",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "f",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "r",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "t",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "v",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "x",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "U",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "u",
		},
		ϡcharClassMatcher{
			raw:        "[0-7]",
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '7'},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			raw:        "[0-9a-f]i",
			ignoreCase: true,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '9', 'a', 'f'},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "[",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "]",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "-",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "^",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "p",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "{",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "}",
		},
		ϡcharClassMatcher{
			raw:        "[LMNCPZS]",
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'L', 'M', 'N', 'C', 'P', 'Z', 'S'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ".",
		},
		ϡcharClassMatcher{
			raw:        "[{}]",
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'{', '}'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			raw:        "[ \\t\\r]",
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{' ', '\t', '\r'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\n",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ";",
		},
	},
	as: []func(*ϡvm) (interface{}, error){
		(*ϡvm).callOnGrammar1,
		(*ϡvm).callOnInitializer1,
		(*ϡvm).callOnRule1,
		(*ϡvm).callOnChoiceExpr1,
		(*ϡvm).callOnActionExpr1,
		(*ϡvm).callOnSeqExpr1,
		(*ϡvm).callOnLabeledExpr2,
		(*ϡvm).callOnPrefixedExpr2,
		(*ϡvm).callOnPrefixedOp1,
		(*ϡvm).callOnSuffixedExpr2,
		(*ϡvm).callOnSuffixedOp1,
		(*ϡvm).callOnPrimaryExpr7,
		(*ϡvm).callOnRuleRefExpr1,
		(*ϡvm).callOnSemanticPredExpr1,
		(*ϡvm).callOnSemanticPredOp1,
		(*ϡvm).callOnIdentifier1,
		(*ϡvm).callOnIdentifierName1,
		(*ϡvm).callOnLitMatcher1,
		(*ϡvm).callOnStringLiteral2,
		(*ϡvm).callOnStringLiteral18,
		(*ϡvm).callOnDoubleStringEscape5,
		(*ϡvm).callOnSingleStringEscape5,
		(*ϡvm).callOnOctalEscape6,
		(*ϡvm).callOnHexEscape6,
		(*ϡvm).callOnLongUnicodeEscape2,
		(*ϡvm).callOnLongUnicodeEscape13,
		(*ϡvm).callOnShortUnicodeEscape2,
		(*ϡvm).callOnShortUnicodeEscape9,
		(*ϡvm).callOnCharClassMatcher2,
		(*ϡvm).callOnCharClassMatcher15,
		(*ϡvm).callOnCharClassEscape6,
		(*ϡvm).callOnUnicodeClassEscape5,
		(*ϡvm).callOnUnicodeClassEscape13,
		(*ϡvm).callOnUnicodeClassEscape19,
		(*ϡvm).callOnAnyMatcher1,
		(*ϡvm).callOnCodeBlock2,
		(*ϡvm).callOnCodeBlock7,
	},
	bs: []func(*ϡvm) (bool, error){},
}

//+pigeon: err.go

var (
	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errNoMatch is returned if no match could be found and no other
	// error has been raised.
	errNoMatch = errors.New("no match found")
)

// errList cumulates the errors found by the parser. It is part
// of the supported API.
type errList []error

// ϡadd adds err to the list of errors.
func (e *errList) ϡadd(err error) {
	if err != nil {
		*e = append(*e, err)
	}
}

// ϡerr returns the error list as an error, or nil if the list is empty.
func (e errList) ϡerr() error {
	if len(e) == 0 {
		return nil
	}
	e.ϡdedupe()
	return e
}

// ϡdedupe removes duplicate error messages from the list.
func (e *errList) ϡdedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

// Error returns the error message for the errList. It implements the
// error interface.
func (e errList) Error() string {
	var buf bytes.Buffer

	for i, err := range e {
		if i > 0 {
			buf.WriteRune('\n')
		}
		buf.WriteString(err.Error())
	}
	return buf.String()
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
// It is part of the supported API.
type parserError struct {
	Inner   error
	ϡpos    position
	ϡprefix string
}

// Error returns the prefixed error message. It implements the error
// interface.
func (p *parserError) Error() string {
	return p.ϡprefix + ": " + p.Inner.Error()
}

//+pigeon: matchers.go

// ϡpeekReader is the interface that defines the peek and read
// methods.
type ϡpeekReader interface {
	peek() rune
	read()
}

// ϡmatcher is the interface that defines the match method.
type ϡmatcher interface {
	match(ϡpeekReader) bool
	toDisplayMsg() string
}

// ϡanyMatcher is a matcher that matches any character but the
// EOF.
type ϡanyMatcher struct{}

// match tries to match a character in the peekReader.
func (a ϡanyMatcher) match(pr ϡpeekReader) bool {
	rn := pr.peek()
	pr.read()
	return rn != utf8.RuneError
}

func (a ϡanyMatcher) toDisplayMsg() string {
	return "<any>"
}

func (a ϡanyMatcher) String() string {
	return "."
}

// ϡstringMatcher is a matcher that matches a string.
type ϡstringMatcher struct {
	ignoreCase bool
	value      string // value must be lowercase if ignoreCase is true
}

// match tries to match the string in the peekReader.
func (s ϡstringMatcher) match(pr ϡpeekReader) bool {
	for _, want := range s.value {
		rn := pr.peek()
		pr.read()
		if s.ignoreCase {
			rn = unicode.ToLower(rn)
		}
		if rn != want {
			return false
		}
	}
	return true
}

func (s ϡstringMatcher) toDisplayMsg() string {
	return s.String()
}

func (s ϡstringMatcher) String() string {
	v := strconv.Quote(s.value)
	if s.ignoreCase {
		v += "i"
	}
	return v
}

// ϡcharClassMatcher is a matcher that matches classes of characters.
type ϡcharClassMatcher struct {
	raw     string
	chars   []rune // runes must be lowercase if ignoreCase is true
	ranges  []rune // same for ranges
	classes []*unicode.RangeTable

	ignoreCase bool
	inverted   bool
}

func (c ϡcharClassMatcher) toDisplayMsg() string {
	return c.raw
}

func (c ϡcharClassMatcher) String() string {
	return c.raw
}

// match tries to match classes of characters in the peekReader.
func (c ϡcharClassMatcher) match(pr ϡpeekReader) bool {
	rn := pr.peek()
	pr.read()

	if c.ignoreCase {
		rn = unicode.ToLower(rn)
	}

	// try to match in the list of available chars
	for _, ch := range c.chars {
		if rn == ch {
			return !c.inverted
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(c.ranges); i += 2 {
		if rn >= c.ranges[i] && rn <= c.ranges[i+1] {
			return !c.inverted
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range c.classes {
		if unicode.Is(cl, rn) {
			return !c.inverted
		}
	}

	return c.inverted
}

// ϡrangeTable returns the corresponding unicode range table from the
// provided class name.
func ϡrangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

//+pigeon: ops.go

// ϡop represents an opcode.
type ϡop byte

// list of opcodes in the pigeon VM.
const (
	ϡopExit ϡop = iota
	ϡopCall
	ϡopCallA
	ϡopCallB
	ϡopCumulOrF
	ϡopJump
	ϡopJumpIfF
	ϡopJumpIfT
	ϡopMatch
	ϡopNilIfF
	ϡopNilIfT
	ϡopPop
	ϡopPopVJumpIfF
	ϡopPush
	ϡopRestore
	ϡopRestoreIfF
	ϡopReturn
	ϡopStoreIfT
	ϡopTakeLOrJump
	ϡopmax // must always be after the last valid opcode

	// ϡopPlaceholder is an (invalid) opcode used by the Generator
	// to insert opcodes that need the index of the starting instruction
	// of a rule that hasn't been generated yet.
	//
	// It must be placed after ϡopmax (because it is invalid in the
	// final program) and it has one argument, the index in the strings
	// array of the identifier of the rule.
	ϡopPlaceholder
)

// ϡlookupOp translates an opcode to a string.
var ϡlookupOp = []string{
	ϡopExit: "exit", ϡopCall: "call", ϡopCallA: "callA",
	ϡopCallB: "callB", ϡopCumulOrF: "cumulOrF",
	ϡopJump: "jump", ϡopJumpIfF: "jumpIfF", ϡopJumpIfT: "jumpIfT",
	ϡopMatch: "match", ϡopNilIfF: "nilIfF", ϡopNilIfT: "nilIfT",
	ϡopPop: "pop", ϡopPopVJumpIfF: "popVJumpIfF",
	ϡopPush: "push", ϡopRestore: "restore", ϡopRestoreIfF: "restoreIfF",
	ϡopReturn: "return", ϡopStoreIfT: "storeIfT", ϡopTakeLOrJump: "takeLOrJump",
}

// String returns the string representation of the opcode.
func (op ϡop) String() string {
	if 0 <= op && int(op) < len(ϡlookupOp) {
		return ϡlookupOp[op]
	}
	return "ϡop(" + strconv.Itoa(int(op)) + ")"
}

// ϡinstr holds a single instruction: an opcode with its arguments.
type ϡinstr struct {
	op       ϡop
	ruleNmIx int // because bootstrap instructions have rule index -1
	args     []uint16
}

// String returns the string representation of the instruction.
func (ins ϡinstr) String() string {
	var buf bytes.Buffer

	buf.WriteString("{" + strconv.Itoa(int(ins.op)) + ", " +
		strconv.Itoa(int(ins.ruleNmIx)) + ", ")

	if len(ins.args) > 0 {
		buf.WriteString("[]uint16{")
		for i, arg := range ins.args {
			if i > 0 {
				buf.WriteString(", ")
			}
			buf.WriteString(strconv.Itoa(int(arg)))
		}
		buf.WriteString("}")
	} else {
		buf.WriteString("nil")
	}

	buf.WriteString("}")
	return buf.String()
}

//+pigeon: parser.go

// position records a position in the text. It is part of the supported
// API.
type position struct {
	// line is the 1-based index of the line of the current rune.
	line int
	// col is the 1-based index of the current rune on the line.
	col int
	// offset is the 0-based index of the starting byte of the current rune.
	offset int
}

// String formats a position as a string.
func (p position) String() string {
	return fmt.Sprintf("%d:%d (%d)", p.line, p.col, p.offset)
}

// current represents current matching data. It is the value on which
// action and predicate code blocks are generated as methods. It is
// part of the supported API.
type current struct {
	// pos holds the start position of the current match.
	pos position
	// text contains the raw text of the match. It is a slice in the
	// source data, so it should not be modified.
	text []byte
}

// ϡsvpt stores all state required to go back to a point in the
// parser.
type ϡsvpt struct {
	position
	rn rune
	w  int
}

// ϡparser parses the input text as rune code points.
type ϡparser struct {
	data []byte
	pt   ϡsvpt
	cur  current
}

// peek returns the current rune.
func (p *ϡparser) peek() rune {
	return p.pt.rn
}

// read advances the parser to the next rune.
func (p *ϡparser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n

	if rn == utf8.RuneError {
		if n > 0 {
			panic(errInvalidEncoding)
		}
	} else {
		p.pt.col++
		if rn == '\n' {
			p.pt.line++
			p.pt.col = 0
		}
	}
}

// sliceFrom gets the slice of bytes from the start savepoint to
// the current position, non inclusive.
func (p *ϡparser) sliceFrom(start ϡsvpt) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

//+pigeon: pub.go

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*ϡvm) Option

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.debug
		v.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.memoize
		v.memoize = b
		return Memoize(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.recover
		v.recover = b
		return Recover(old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (interface{}, error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	p := &ϡparser{
		data: b,
		pt:   ϡsvpt{position: position{line: 1}},
	}
	v := &ϡvm{
		filename: filename,
		parser:   p,
		recover:  true,
	}
	return v.setOptions(opts).run(ϡtheProgram)
}

//+pigeon: stacks.go

// ϡpstack implements the Position stack. It stores savepoints.
type ϡpstack struct {
	ar []ϡsvpt
	sp int
}

// push adds a value on the stack.
func (p *ϡpstack) push(pt ϡsvpt) {
	if p.sp >= len(p.ar) {
		p.ar = append(p.ar, pt)
	} else {
		p.ar[p.sp] = pt
	}
	p.sp++
}

// pop removes a value from the stack.
func (p *ϡpstack) pop() ϡsvpt {
	p.sp--
	return p.ar[p.sp]
}

func (p *ϡpstack) len() int {
	return p.sp
}

func newPstack(cap int) *ϡpstack {
	return &ϡpstack{ar: make([]ϡsvpt, cap)}
}

// ϡistack implements the Instruction index stack. It stores integers.
type ϡistack struct {
	ar []uint16
	sp int
}

// push adds a value on the stack.
func (i *ϡistack) push(v uint16) {
	if i.sp >= len(i.ar) {
		i.ar = append(i.ar, v)
	} else {
		i.ar[i.sp] = v
	}
	i.sp++
}

// pop removes a value from the stack.
func (i *ϡistack) pop() uint16 {
	i.sp--
	return i.ar[i.sp]
}

func (i *ϡistack) len() int {
	return i.sp
}

func newIstack(cap int) *ϡistack {
	return &ϡistack{ar: make([]uint16, cap)}
}

// ϡvstack implements the Value stack. It stores empty interfaces.
type ϡvstack struct {
	ar []interface{}
	sp int
}

// push adds a value on the stack.
func (v *ϡvstack) push(i interface{}) {
	if v.sp >= len(v.ar) {
		v.ar = append(v.ar, i)
	} else {
		v.ar[v.sp] = i
	}
	v.sp++
}

// pop removes a value from the stack.
func (v *ϡvstack) pop() interface{} {
	v.sp--
	return v.ar[v.sp]
}

// peek returns the value at the top of the stack, leaving it there.
func (v *ϡvstack) peek() interface{} {
	return v.ar[v.sp-1]
}

func (v *ϡvstack) len() int {
	return v.sp
}

func newVstack(cap int) *ϡvstack {
	return &ϡvstack{ar: make([]interface{}, cap)}
}

// ϡlstack implements the Loop stack. It stores slices of integers.
type ϡlstack struct {
	ar [][]uint16
	sp int
}

// push adds a value on the stack.
func (l *ϡlstack) push(a []uint16) {
	if l.sp >= len(l.ar) {
		l.ar = append(l.ar, a)
	} else {
		l.ar[l.sp] = a
	}
	l.sp++
}

// pop removes a value from the stack.
func (l *ϡlstack) pop() []uint16 {
	l.sp--
	return l.ar[l.sp]
}

// take removes the integer at index 0 from the slice at the top of the
// stack. It returns -1 if the slice is empty. The slice is left on the
// stack.
func (l *ϡlstack) take() int {
	v := -1
	a := l.ar[l.sp-1]
	if len(a) > 0 {
		v = int(a[0])
		l.ar[l.sp-1] = a[1:]
	}
	return v
}

func (l *ϡlstack) len() int {
	return l.sp
}

func newLstack(cap int) *ϡlstack {
	return &ϡlstack{ar: make([][]uint16, cap)}
}

// ϡargsSet holds the list of arguments (key and value) to pass
// to the code blocks.
type ϡargsSet map[string]interface{}

// ϡastack is a stack of ϡargsSet.
type ϡastack struct {
	ar []ϡargsSet
	sp int
}

// push adds an empty ϡargsSet on top of the stack.
func (a *ϡastack) push() {
	if a.sp >= len(a.ar) {
		a.ar = append(a.ar, nil)
	} else {
		a.ar[a.sp] = nil
	}
	a.sp++
}

// pop removes the top ϡargsSet from the stack.
func (a *ϡastack) pop() {
	a.sp--
}

// peek returns the current top ϡargsSet.
func (a *ϡastack) peek() ϡargsSet {
	as := a.ar[a.sp-1]
	if as == nil {
		as = make(ϡargsSet)
		a.ar[a.sp-1] = as
	}
	return as
}

func (a *ϡastack) len() int {
	return a.sp
}

func newAstack(cap int) *ϡastack {
	return &ϡastack{ar: make([]ϡargsSet, cap)}
}

//+pigeon: vm.go

// ϡsentinel is a type used to define sentinel values that shouldn't
// be equal to something else.
type ϡsentinel int

const (
	// ϡmatchFailed is a sentinel value used to indicate a match failure.
	ϡmatchFailed ϡsentinel = iota - 1
)

const (
	// stack IDs, used in PUSH and POP's first argument
	ϡpstackID = iota + 1
	ϡlstackID
	ϡvstackID
	ϡistackID
	ϡastackID

	// special V stack values
	ϡvValNil    uint16 = 0
	ϡvValFailed uint16 = 1
	ϡvValEmpty  uint16 = 2
)

var (
	ϡstackNm = []string{
		ϡpstackID: "P",
		ϡlstackID: "L",
		ϡvstackID: "V",
		ϡistackID: "I",
		ϡastackID: "A",
	}
)

// special values that may be pushed on the V stack.
var ϡvSpecialValues = []interface{}{
	nil,
	ϡmatchFailed,
	[]interface{}(nil),
}

// ϡmemoizedResult holds the state required to reuse a memoized result.
type ϡmemoizedResult struct {
	v  interface{}
	pt ϡsvpt
}

// ϡffp holds state to record the farthest failure position.
type ϡffp struct {
	pos      position
	ruleNmIx int
	got      []byte
	want     string
}

// err returns an error if a farthest failure position has been recorded,
// nil otherwise.
func (ffp ϡffp) err() error {
	if ffp.pos.offset >= 0 {
		return ffp
	}
	return nil
}

// Error implements the error interface.
func (ffp ϡffp) Error() string {
	return fmt.Sprintf("expected %s, got %s", ffp.want, strconv.Quote(string(ffp.got)))
}

// ϡprogram is the data structure that is generated by the builder
// based on an input PEG. It contains the program information required
// to execute the grammar using the vm.
type ϡprogram struct {
	instrs []ϡinstr

	// lists
	ms []ϡmatcher
	as []func(*ϡvm) (interface{}, error)
	bs []func(*ϡvm) (bool, error)
	ss []string
}

// String formats the program's instructions in a human-readable format.
func (pg ϡprogram) String() string {
	var buf bytes.Buffer

	for i, instr := range pg.instrs {
		buf.WriteString(fmt.Sprintf("[%3d]: %s\n", i, pg.instrToString(instr)))
	}
	return buf.String()
}

// instrToString formats an instruction in a human-readable format, in the
// context of the program.
func (pg ϡprogram) instrToString(instr ϡinstr) string {
	var buf bytes.Buffer

	rule := pg.ruleNameAt(instr.ruleNmIx)
	if rule == "" {
		rule = "<bootstrap>"
	}
	buf.WriteString(fmt.Sprintf("%s.%s %v", rule, instr.op, instr.args))
	switch instr.op {
	case ϡopPush, ϡopPop:
		buf.WriteString(" " + ϡstackNm[instr.args[0]])
	case ϡopMatch:
		buf.WriteString(fmt.Sprintf(" %s", pg.ms[instr.args[0]]))
	case ϡopStoreIfT:
		buf.WriteString(" " + pg.ss[instr.args[0]])
	}
	return buf.String()
}

// ruleNameAt returns the name of the rule that contains the instruction
// index. It returns an empty string is the instruction is not part of a
// rule (bootstrap instruction, invalid index).
func (pg ϡprogram) ruleNameAt(ix int) string {
	if ix < 0 || ix >= len(pg.ss) {
		return ""
	}
	return pg.ss[ix]
}

// ϡvm holds the state to execute a compiled grammar.
type ϡvm struct {
	// input
	filename string
	parser   *ϡparser

	// options
	debug   bool
	memoize bool
	recover bool

	// program data
	pc  uint16
	pg  *ϡprogram
	cur current

	// stacks
	p *ϡpstack
	l *ϡlstack
	v *ϡvstack
	i *ϡistack
	a *ϡastack

	// memoized results: by instruction index, then by byte offset
	memo map[uint16]map[int]ϡmemoizedResult
	ffp  ϡffp

	// stats
	matchCnt    int
	callCnt     int
	actionCnt   int
	codePredCnt int

	// error list
	errs errList
}

func (v *ϡvm) fromMemo(ix uint16, pt ϡsvpt) bool {
	if v.memo == nil {
		return false
	}
	m := v.memo[ix]
	if m == nil {
		return false
	}
	result, ok := m[pt.offset]
	if ok {
		v.parser.pt = result.pt
		v.v.push(result.v)
		return true
	}
	return false
}

func (v *ϡvm) memoizeMatch(ix uint16, pt ϡsvpt, match bool) {
	if v.memo == nil {
		v.memo = make(map[uint16]map[int]ϡmemoizedResult)
	}
	m, ok := v.memo[ix]
	if !ok {
		m = make(map[int]ϡmemoizedResult)
		v.memo[ix] = m
	}

	if match {
		m[pt.offset] = ϡmemoizedResult{v.parser.sliceFrom(pt), v.parser.pt}
		return
	}
	m[pt.offset] = ϡmemoizedResult{ϡmatchFailed, pt}
}

// setOptions applies the options in sequence on the vm. It returns the
// vm to allow for chaining calls.
func (v *ϡvm) setOptions(opts []Option) *ϡvm {
	for _, opt := range opts {
		opt(v)
	}
	return v
}

// addErr adds the error at the current parser position, without rule name
// information.
func (v *ϡvm) addErr(err error) {
	v.addErrAt(err, -1, v.parser.pt.position)
}

// addErrAt adds the error at the specified position, for the rule name at
// ruleNmIx.
func (v *ϡvm) addErrAt(err error, ruleNmIx int, pos position) {
	var buf bytes.Buffer
	if v.filename != "" {
		buf.WriteString(v.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%s", pos))

	ruleNm := v.pg.ruleNameAt(ruleNmIx)
	if ruleNm != "" {
		buf.WriteString(": ")
		buf.WriteString("rule " + ruleNm)
	}

	pe := &parserError{Inner: err, ϡprefix: buf.String()}
	v.errs.ϡadd(pe)
}

// dumpSnapshot writes a dump of the current VM state to w.
func (v *ϡvm) dumpSnapshot(w io.Writer) {
	var buf bytes.Buffer

	if v.filename != "" {
		buf.WriteString(v.filename + ":")
	}
	buf.WriteString(fmt.Sprintf("%s: %#U\n", v.parser.pt.position, v.parser.pt.rn))

	// write the next 5 instructions
	ix := v.pc - 1
	if ix > 0 {
		ix--
	}
	stdFmt := ". [%d]: %s"
	for i := 0; i < 5; i++ {
		stdFmt := stdFmt
		if ix == v.pc-1 {
			stdFmt = ">" + stdFmt[1:]
		}
		instr := v.pg.instrs[ix]
		switch instr.op {
		case ϡopCall:
			buf.WriteString(fmt.Sprintf(stdFmt+"\n", ix, v.pg.instrToString(instr)))
			ix = v.i.pop() // continue with instructions at this index
			v.i.push(ix)
			continue
		default:
			buf.WriteString(fmt.Sprintf(stdFmt+"\n", ix, v.pg.instrToString(instr)))
		}
		ix++
		if int(ix) >= len(v.pg.instrs) {
			break
		}
	}

	// // print the stacks
	// buf.WriteString("[ P: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.p) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.p[len(v.p)-i-1]
	// 	buf.WriteString(fmt.Sprintf("\"%v\"", val))
	// }
	// buf.WriteString(" ]\n[ V: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.v) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.v[len(v.v)-i-1]
	// 	buf.WriteString(fmt.Sprintf("%#v", val))
	// }
	// buf.WriteString(" ]\n[ I: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.i) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.i[len(v.i)-i-1]
	// 	buf.WriteString(fmt.Sprintf("%d", val))
	// }
	// buf.WriteString(" ]\n[ L: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.l) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.l[len(v.l)-i-1]
	// 	buf.WriteString(fmt.Sprintf("%v", val))
	// }
	// buf.WriteString(" ]\n")
	fmt.Fprintln(w, buf.String())
}

// run executes the provided program in this VM, and returns the result.
func (v *ϡvm) run(pg *ϡprogram) (interface{}, error) {
	v.pg = pg
	v.a = newAstack(128)
	v.i = newIstack(128)
	v.v = newVstack(128)
	v.l = newLstack(128)
	v.p = newPstack(128)
	v.ffp.pos.offset = -1
	ret := v.dispatch()

	// if the match failed, translate that to a nil result and make
	// sure it returns an error
	if ret == ϡmatchFailed {
		ret = nil
		if len(v.errs) == 0 {
			if err := v.ffp.err(); err != nil {
				v.addErrAt(err, v.ffp.ruleNmIx, v.ffp.pos)
			} else {
				v.addErr(errNoMatch)
			}
		}
	}

	return ret, v.errs.ϡerr()
}

// dispatch is the proper execution method of the VM, it loops over
// the instructions and executes each opcode.
func (v *ϡvm) dispatch() interface{} {
	var instrPath []uint16
	if v.debug {
		fmt.Fprintln(os.Stderr, v.pg)
		defer func() {
			var buf bytes.Buffer

			buf.WriteString("Execution path:\n")
			for _, ix := range instrPath {
				buf.WriteString(fmt.Sprintf("[%3d]: %s\n", ix, v.pg.instrToString(v.pg.instrs[ix])))
			}
			fmt.Fprintln(os.Stderr, buf.String())
		}()
	}

	if v.recover {
		// if recover is set, recover from panics and convert to error.
		defer func() {
			if e := recover(); e != nil {
				ruleIx := -1
				if v.pc > 0 {
					ruleIx = v.pg.instrs[v.pc-1].ruleNmIx
				}
				switch e := e.(type) {
				case error:
					v.addErrAt(e, ruleIx, v.parser.pt.position)
				default:
					v.addErrAt(fmt.Errorf("%v", e), ruleIx, v.parser.pt.position)
				}
			}
		}()
	}

	// move to first rune before starting the loop
	v.parser.read()
	for {
		// fetch and decode the instruction
		instr := v.pg.instrs[v.pc]
		instrPath = append(instrPath, v.pc)

		// increment program counter
		v.pc++

		switch instr.op {
		case ϡopCall:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			ix := v.i.pop()
			v.i.push(v.pc)
			v.pc = ix
			v.callCnt++

		case ϡopCallA:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			v.v.pop()
			start := v.p.pop()
			v.cur.pos = start.position
			v.cur.text = v.parser.sliceFrom(start)
			if int(instr.args[0]) >= len(v.pg.as) {
				panic(fmt.Sprintf("invalid %s argument: %d", instr.op, instr.args[0]))
			}
			fn := v.pg.as[instr.args[0]]
			val, err := fn(v)
			if err != nil {
				v.addErrAt(err, int(instr.ruleNmIx), start.position)
			}
			v.v.push(val)
			v.actionCnt++

		case ϡopCallB:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			v.cur.pos = v.parser.pt.position
			v.cur.text = nil
			if int(instr.args[0]) >= len(v.pg.bs) {
				panic(fmt.Sprintf("invalid %s argument: %d", instr.op, instr.args[0]))
			}
			fn := v.pg.bs[instr.args[0]]
			val, err := fn(v)
			if err != nil {
				v.addErrAt(err, int(instr.ruleNmIx), v.parser.pt.position)
			}
			v.codePredCnt++
			if !val {
				v.v.push(ϡmatchFailed)
				break
			}
			v.v.push(nil)

		case ϡopCumulOrF:
			va, vb := v.v.pop(), v.v.pop()
			if va == ϡmatchFailed {
				v.v.push(ϡmatchFailed)
				break
			}
			switch vb := vb.(type) {
			case []interface{}:
				vb = append(vb, va)
				v.v.push(vb)
			case ϡsentinel:
				v.v.push([]interface{}{va})
			default:
				panic(fmt.Sprintf("invalid %s value type on the V stack: %T", instr.op, vb))
			}

		case ϡopExit:
			return v.v.pop()

		case ϡopJump:
			v.pc = instr.args[0]

		case ϡopJumpIfF:
			if top := v.v.peek(); top == ϡmatchFailed {
				v.pc = instr.args[0]
			}

		case ϡopJumpIfT:
			if top := v.v.peek(); top != ϡmatchFailed {
				v.pc = instr.args[0]
			}

		case ϡopMatch:
			start := v.parser.pt
			if v.memoize && v.fromMemo(v.pc-1, start) {
				break
			}

			if int(instr.args[0]) >= len(v.pg.ms) {
				panic(fmt.Sprintf("invalid %s argument: %d", instr.op, instr.args[0]))
			}
			m := v.pg.ms[instr.args[0]]
			ok := m.match(v.parser)
			if v.memoize {
				v.memoizeMatch(v.pc-1, start, ok)
			}
			v.matchCnt++
			if ok {
				v.v.push(v.parser.sliceFrom(start))
				break
			}
			// did not match, record ffp if this is the farthest failure
			if start.offset > v.ffp.pos.offset {
				v.ffp.pos = start.position
				v.ffp.got = v.parser.sliceFrom(start)
				v.ffp.ruleNmIx = instr.ruleNmIx
				v.ffp.want = m.toDisplayMsg()
			}
			v.v.push(ϡmatchFailed)
			v.parser.pt = start

			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}

		case ϡopNilIfF:
			if top := v.v.pop(); top == ϡmatchFailed {
				v.v.push(nil)
				break
			}
			v.v.push(ϡmatchFailed)

		case ϡopNilIfT:
			if top := v.v.pop(); top != ϡmatchFailed {
				v.v.push(nil)
				break
			}
			v.v.push(ϡmatchFailed)

		case ϡopPop:
			switch instr.args[0] {
			case ϡlstackID:
				v.l.pop()
			case ϡpstackID:
				v.p.pop()
			case ϡastackID:
				v.a.pop()
			case ϡvstackID:
				v.v.pop()
			default:
				panic(fmt.Sprintf("invalid %s argument: %d", instr.op, instr.args[0]))
			}

		case ϡopPopVJumpIfF:
			if top := v.v.peek(); top == ϡmatchFailed {
				v.v.pop()
				v.pc = instr.args[0]
			}

		case ϡopPush:
			switch instr.args[0] {
			case ϡpstackID:
				v.p.push(v.parser.pt)
			case ϡistackID:
				v.i.push(instr.args[1])
			case ϡvstackID:
				if int(instr.args[1]) >= len(ϡvSpecialValues) {
					panic(fmt.Sprintf("invalid %s V stack argument: %d", instr.op, instr.args[1]))
				}
				v.v.push(ϡvSpecialValues[instr.args[1]])
			case ϡastackID:
				v.a.push()
			case ϡlstackID:
				v.l.push(instr.args[1:])
			default:
				panic(fmt.Sprintf("invalid %s argument: %d", instr.op, instr.args[0]))
			}

		case ϡopRestore:
			pt := v.p.pop()
			v.parser.pt = pt

		case ϡopRestoreIfF:
			pt := v.p.pop()
			if top := v.v.peek(); top == ϡmatchFailed {
				v.parser.pt = pt
			}

		case ϡopReturn:
			ix := v.i.pop()
			v.pc = ix

		case ϡopStoreIfT:
			if top := v.v.peek(); top != ϡmatchFailed {
				// get the label name
				if int(instr.args[0]) >= len(v.pg.ss) {
					panic(fmt.Sprintf("invalid %s argument: %d", instr.op, instr.args[0]))
				}
				lbl := v.pg.ss[instr.args[0]]

				// store the value
				as := v.a.peek()
				as[lbl] = top
			}

		case ϡopTakeLOrJump:
			ix := v.l.take()
			if ix < 0 {
				v.pc = instr.args[0]
				break
			}
			v.i.push(uint16(ix))

		default:
			panic(fmt.Sprintf("unknown opcode %s", instr.op))
		}
	}
}
