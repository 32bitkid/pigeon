// Code generated by pigeon (https://github.com/PuerkitoBio/pigeon)
// on 2015-05-04 20:11:45.889676487 -0400 EDT

package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"unicode"
	"unicode/utf8"

	"github.com/PuerkitoBio/pigeon/ast"
)

func (c *current) onGrammar1(initializer, rules interface{}) (interface{}, error) {
	pos := c.astPos()

	// create the grammar, assign its initializer
	g := ast.NewGrammar(pos)
	initSlice := toIfaceSlice(initializer)
	if len(initSlice) > 0 {
		g.Init = initSlice[0].(*ast.CodeBlock)
	}

	rulesSlice := toIfaceSlice(rules)
	g.Rules = make([]*ast.Rule, len(rulesSlice))
	for i, duo := range rulesSlice {
		g.Rules[i] = duo.([]interface{})[0].(*ast.Rule)
	}

	return g, nil
}

func (v *ϡvm) callOnGrammar1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onGrammar1(stack["initializer"], stack["rules"])
}

func (c *current) onInitializer1(code interface{}) (interface{}, error) {
	return code, nil
}

func (v *ϡvm) callOnInitializer1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onInitializer1(stack["code"])
}

func (c *current) onRule1(name, display, expr interface{}) (interface{}, error) {
	pos := c.astPos()

	rule := ast.NewRule(pos, name.(*ast.Identifier))
	displaySlice := toIfaceSlice(display)
	if len(displaySlice) > 0 {
		rule.DisplayName = displaySlice[0].(*ast.StringLit)
	}
	rule.Expr = expr.(ast.Expression)

	return rule, nil
}

func (v *ϡvm) callOnRule1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onRule1(stack["name"], stack["display"], stack["expr"])
}

func (c *current) onChoiceExpr1(first, rest interface{}) (interface{}, error) {
	restSlice := toIfaceSlice(rest)
	if len(restSlice) == 0 {
		return first, nil
	}

	pos := c.astPos()
	choice := ast.NewChoiceExpr(pos)
	choice.Alternatives = []ast.Expression{first.(ast.Expression)}
	for _, sl := range restSlice {
		choice.Alternatives = append(choice.Alternatives, sl.([]interface{})[3].(ast.Expression))
	}
	return choice, nil
}

func (v *ϡvm) callOnChoiceExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onChoiceExpr1(stack["first"], stack["rest"])
}

func (c *current) onActionExpr1(expr, code interface{}) (interface{}, error) {
	if code == nil {
		return expr, nil
	}

	pos := c.astPos()
	act := ast.NewActionExpr(pos)
	act.Expr = expr.(ast.Expression)
	codeSlice := toIfaceSlice(code)
	act.Code = codeSlice[1].(*ast.CodeBlock)

	return act, nil
}

func (v *ϡvm) callOnActionExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onActionExpr1(stack["expr"], stack["code"])
}

func (c *current) onSeqExpr1(first, rest interface{}) (interface{}, error) {
	restSlice := toIfaceSlice(rest)
	if len(restSlice) == 0 {
		return first, nil
	}
	seq := ast.NewSeqExpr(c.astPos())
	seq.Exprs = []ast.Expression{first.(ast.Expression)}
	for _, sl := range restSlice {
		seq.Exprs = append(seq.Exprs, sl.([]interface{})[1].(ast.Expression))
	}
	return seq, nil
}

func (v *ϡvm) callOnSeqExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSeqExpr1(stack["first"], stack["rest"])
}

func (c *current) onLabeledExpr2(label, expr interface{}) (interface{}, error) {
	pos := c.astPos()
	lab := ast.NewLabeledExpr(pos)
	lab.Label = label.(*ast.Identifier)
	lab.Expr = expr.(ast.Expression)
	return lab, nil
}

func (v *ϡvm) callOnLabeledExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onLabeledExpr2(stack["label"], stack["expr"])
}

func (c *current) onPrefixedExpr2(op, expr interface{}) (interface{}, error) {
	pos := c.astPos()
	opStr := op.(string)
	if opStr == "&" {
		and := ast.NewAndExpr(pos)
		and.Expr = expr.(ast.Expression)
		return and, nil
	}
	not := ast.NewNotExpr(pos)
	not.Expr = expr.(ast.Expression)
	return not, nil
}

func (v *ϡvm) callOnPrefixedExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onPrefixedExpr2(stack["op"], stack["expr"])
}

func (c *current) onPrefixedOp1() (interface{}, error) {
	return string(c.text), nil
}

func (v *ϡvm) callOnPrefixedOp1() (interface{}, error) {
	return v.cur.onPrefixedOp1()
}

func (c *current) onSuffixedExpr2(expr, op interface{}) (interface{}, error) {
	pos := c.astPos()
	opStr := op.(string)
	switch opStr {
	case "?":
		zero := ast.NewZeroOrOneExpr(pos)
		zero.Expr = expr.(ast.Expression)
		return zero, nil
	case "*":
		zero := ast.NewZeroOrMoreExpr(pos)
		zero.Expr = expr.(ast.Expression)
		return zero, nil
	case "+":
		one := ast.NewOneOrMoreExpr(pos)
		one.Expr = expr.(ast.Expression)
		return one, nil
	default:
		return nil, errors.New("unknown operator: " + opStr)
	}
}

func (v *ϡvm) callOnSuffixedExpr2() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSuffixedExpr2(stack["expr"], stack["op"])
}

func (c *current) onSuffixedOp1() (interface{}, error) {
	return string(c.text), nil
}

func (v *ϡvm) callOnSuffixedOp1() (interface{}, error) {
	return v.cur.onSuffixedOp1()
}

func (c *current) onPrimaryExpr7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (v *ϡvm) callOnPrimaryExpr7() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onPrimaryExpr7(stack["expr"])
}

func (c *current) onRuleRefExpr1(name interface{}) (interface{}, error) {
	ref := ast.NewRuleRefExpr(c.astPos())
	ref.Name = name.(*ast.Identifier)
	return ref, nil
}

func (v *ϡvm) callOnRuleRefExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onRuleRefExpr1(stack["name"])
}

func (c *current) onSemanticPredExpr1(op, code interface{}) (interface{}, error) {
	opStr := op.(string)
	if opStr == "&" {
		and := ast.NewAndCodeExpr(c.astPos())
		and.Code = code.(*ast.CodeBlock)
		return and, nil
	}
	not := ast.NewNotCodeExpr(c.astPos())
	not.Code = code.(*ast.CodeBlock)
	return not, nil
}

func (v *ϡvm) callOnSemanticPredExpr1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onSemanticPredExpr1(stack["op"], stack["code"])
}

func (c *current) onSemanticPredOp1() (interface{}, error) {
	return string(c.text), nil
}

func (v *ϡvm) callOnSemanticPredOp1() (interface{}, error) {
	return v.cur.onSemanticPredOp1()
}

func (c *current) onIdentifier1(ident interface{}) (interface{}, error) {
	astIdent := ast.NewIdentifier(c.astPos(), string(c.text))
	if reservedWords[astIdent.Val] {
		return astIdent, errors.New("identifier is a reserved word")
	}
	return astIdent, nil
}

func (v *ϡvm) callOnIdentifier1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onIdentifier1(stack["ident"])
}

func (c *current) onIdentifierName1() (interface{}, error) {
	return ast.NewIdentifier(c.astPos(), string(c.text)), nil
}

func (v *ϡvm) callOnIdentifierName1() (interface{}, error) {
	return v.cur.onIdentifierName1()
}

func (c *current) onLitMatcher1(lit, ignore interface{}) (interface{}, error) {
	rawStr := lit.(*ast.StringLit).Val
	s, err := strconv.Unquote(rawStr)
	if err != nil {
		// an invalid string literal raises an error in the escape rules,
		// so simply replace the literal with an empty string here to
		// avoid a cascade of errors.
		s = ""
	}
	m := ast.NewLitMatcher(c.astPos(), s)
	m.IgnoreCase = ignore != nil
	return m, nil
}

func (v *ϡvm) callOnLitMatcher1() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onLitMatcher1(stack["lit"], stack["ignore"])
}

func (c *current) onStringLiteral2() (interface{}, error) {
	return ast.NewStringLit(c.astPos(), string(c.text)), nil
}

func (v *ϡvm) callOnStringLiteral2() (interface{}, error) {
	return v.cur.onStringLiteral2()
}

func (c *current) onStringLiteral18() (interface{}, error) {
	return ast.NewStringLit(c.astPos(), "``"), errors.New("string literal not terminated")
}

func (v *ϡvm) callOnStringLiteral18() (interface{}, error) {
	return v.cur.onStringLiteral18()
}

func (c *current) onDoubleStringEscape5() (interface{}, error) {
	return nil, errors.New("invalid escape character")
}

func (v *ϡvm) callOnDoubleStringEscape5() (interface{}, error) {
	return v.cur.onDoubleStringEscape5()
}

func (c *current) onSingleStringEscape5() (interface{}, error) {
	return nil, errors.New("invalid escape character")
}

func (v *ϡvm) callOnSingleStringEscape5() (interface{}, error) {
	return v.cur.onSingleStringEscape5()
}

func (c *current) onOctalEscape6() (interface{}, error) {
	return nil, errors.New("invalid octal escape")
}

func (v *ϡvm) callOnOctalEscape6() (interface{}, error) {
	return v.cur.onOctalEscape6()
}

func (c *current) onHexEscape6() (interface{}, error) {
	return nil, errors.New("invalid hexadecimal escape")
}

func (v *ϡvm) callOnHexEscape6() (interface{}, error) {
	return v.cur.onHexEscape6()
}

func (c *current) onLongUnicodeEscape2() (interface{}, error) {
	return validateUnicodeEscape(string(c.text), "invalid Unicode escape")
}

func (v *ϡvm) callOnLongUnicodeEscape2() (interface{}, error) {
	return v.cur.onLongUnicodeEscape2()
}

func (c *current) onLongUnicodeEscape13() (interface{}, error) {
	return nil, errors.New("invalid Unicode escape")
}

func (v *ϡvm) callOnLongUnicodeEscape13() (interface{}, error) {
	return v.cur.onLongUnicodeEscape13()
}

func (c *current) onShortUnicodeEscape2() (interface{}, error) {
	return validateUnicodeEscape(string(c.text), "invalid Unicode escape")
}

func (v *ϡvm) callOnShortUnicodeEscape2() (interface{}, error) {
	return v.cur.onShortUnicodeEscape2()
}

func (c *current) onShortUnicodeEscape9() (interface{}, error) {
	return nil, errors.New("invalid Unicode escape")
}

func (v *ϡvm) callOnShortUnicodeEscape9() (interface{}, error) {
	return v.cur.onShortUnicodeEscape9()
}

func (c *current) onCharClassMatcher2() (interface{}, error) {
	pos := c.astPos()
	cc := ast.NewCharClassMatcher(pos, string(c.text))
	return cc, nil
}

func (v *ϡvm) callOnCharClassMatcher2() (interface{}, error) {
	return v.cur.onCharClassMatcher2()
}

func (c *current) onCharClassMatcher15() (interface{}, error) {
	return ast.NewCharClassMatcher(c.astPos(), "[]"), errors.New("character class not terminated")
}

func (v *ϡvm) callOnCharClassMatcher15() (interface{}, error) {
	return v.cur.onCharClassMatcher15()
}

func (c *current) onCharClassEscape6() (interface{}, error) {
	return nil, errors.New("invalid escape character")
}

func (v *ϡvm) callOnCharClassEscape6() (interface{}, error) {
	return v.cur.onCharClassEscape6()
}

func (c *current) onUnicodeClassEscape5() (interface{}, error) {
	return nil, errors.New("invalid Unicode class escape")
}

func (v *ϡvm) callOnUnicodeClassEscape5() (interface{}, error) {
	return v.cur.onUnicodeClassEscape5()
}

func (c *current) onUnicodeClassEscape13(ident interface{}) (interface{}, error) {
	if !unicodeClasses[ident.(*ast.Identifier).Val] {
		return nil, errors.New("invalid Unicode class escape")
	}
	return nil, nil
}

func (v *ϡvm) callOnUnicodeClassEscape13() (interface{}, error) {
	stack := v.a.peek()
	return v.cur.onUnicodeClassEscape13(stack["ident"])
}

func (c *current) onUnicodeClassEscape19() (interface{}, error) {
	return nil, errors.New("Unicode class not terminated")
}

func (v *ϡvm) callOnUnicodeClassEscape19() (interface{}, error) {
	return v.cur.onUnicodeClassEscape19()
}

func (c *current) onAnyMatcher1() (interface{}, error) {
	any := ast.NewAnyMatcher(c.astPos(), ".")
	return any, nil
}

func (v *ϡvm) callOnAnyMatcher1() (interface{}, error) {
	return v.cur.onAnyMatcher1()
}

func (c *current) onCodeBlock2() (interface{}, error) {
	pos := c.astPos()
	cb := ast.NewCodeBlock(pos, string(c.text))
	return cb, nil
}

func (v *ϡvm) callOnCodeBlock2() (interface{}, error) {
	return v.cur.onCodeBlock2()
}

func (c *current) onCodeBlock7() (interface{}, error) {
	return nil, errors.New("code block not terminated")
}

func (v *ϡvm) callOnCodeBlock7() (interface{}, error) {
	return v.cur.onCodeBlock7()
}

var ϡtheProgram = &ϡprogram{
	instrs: []ϡinstr{
		3747557857111900160, 3747276386423799808, 288230376151711744,
		0, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857114193920, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323492909070, 5188428361671639040, 288230376151711744,
		1152921504606846976, 1729663847851098112, 1441433450224549888,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857106788352, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459046143416074240, 4611686018427387904,
		3747557852810575872, 4611686018427387904, 3747557857107509248,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197878145744896, 4611686018427387904, 3747557857120616448,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323495202865,
		5188428511995494400, 288230376151711744, 1152921504606846976,
		1729663998174953472, 1441433600548405248, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810641408,
		3747557857109082112, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459046302329864192, 1152921504606846976,
		1441433639203110912, 4611686018427387904, 3747557857109803008,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197886735679488, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748402273446002726, 20829491873972224, 5188428649434447872,
		288230376151711744, 1152921504606846976, 1729664135613906944,
		1441433737987358720, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857111113728,
		288230376151711744, 1729664174268612608, 576742227280134144,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857307000832, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857112424448,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197899620581376, 4611686018427387904, 3747557857322926080,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323499528308, 5188428799758303232, 288230376151711744,
		1152921504606846976, 1729664285937762304, 1441433888311214080,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857113473024, 288230376151711744,
		1729664324592467968, 576742231575101440, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857186873344,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857114718208, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4900197912505483264,
		4611686018427387904, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857209745408, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323502543009, 5188428993031831552, 288230376151711744,
		1152921504606846976, 1729664479211290624, 1441434081584742400,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857116422144, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459046774776266752, 4611686018427387904,
		3747557852810575872, 4611686018427387904, 3747557857117143040,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197921095417856, 4611686018427387904, 3747557857169244160,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857121140736, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857118715904,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197933980319744, 4611686018427387904, 3747557857322926080,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3749246698385375383, 52073691043070158, 59672695062659072,
		5188429220665098240, 288230376151711744, 1152921504606846976,
		1729664706844557312, 1441434309218009088, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857119764480, 288230376151711744, 1729664745499262976,
		576742235870068736, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857125924864, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857130184704, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857121468416,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197946865221632, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124484190404608,
		4323455642275676160, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857130184704, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748402273462386947,
		74029069926137856, 5188429456888299520, 288230376151711744,
		1152921504606846976, 1729664943067758592, 1441434545441210368,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557852810706944, 3747557857123434496, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459047247222669312,
		1152921504606846976, 1441434584095916032, 4611686018427387904,
		3747557857124220928, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197955455156224, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323508572454,
		5188429568557449216, 288230376151711744, 1152921504606846976,
		1729665054736908288, 1441434657110360064, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857125203968, 288230376151711744, 1729665093391613952,
		576742240165036032, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747557857134510080, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857126449152, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197933980319744, 4611686018427387904,
		3747557857314865152, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857307000832,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323513946447, 5188429740356141056, 288230376151711744,
		1152921504606846976, 1729665226535600128, 1441434828909051904,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857127825408, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459047522100576256, 4611686018427387904,
		3747557852810575872, 4611686018427387904, 3747557857128546304,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197899620581376, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323513553255, 5188429847730323456,
		288230376151711744, 1152921504606846976, 1729665333909782528,
		1441434936283234304, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857129463808,
		288230376151711744, 1729665372564488192, 576742244460003328,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857139032064, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857130708992,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197946865221632, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857139032064, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323518206352,
		5188430019529015296, 288230376151711744, 1152921504606846976,
		1729665505708474368, 1441435108081926144, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810706944,
		3747557857132085248, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459047809863385088, 1152921504606846976,
		1441435146736631808, 4611686018427387904, 3747557857132806144,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197955455156224, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323517813161, 5188430131198164992,
		288230376151711744, 1152921504606846976, 1729665617377624064,
		1441435219751075840, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857133789184,
		288230376151711744, 1729665656032329728, 576742248754970624,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857184382976, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857135034368,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197968340058112, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124488485371904,
		4323455642275676160, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857143160832, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857136672768, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197933980319744, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748683748452270541,
		131169357813252096, 5188430371716333568, 288230376151711744,
		1152921504606846976, 1729665857895792640, 1441435460269244416,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857137393664, 288230376151711744,
		1729665896550498304, 576742253049937920, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857143160832,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747839323524956666, 5188430474795548672,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017896341421686784, 3170815625530441728, 1441435554758524928,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747557857145126912, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857139752960,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197981224960000, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857149059072, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857140801536, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197933980319744, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798503567893,
		152840912353886208, 5188430642299273216, 288230376151711744,
		1152921504606846976, 1729666128478732288, 1441435730852184064,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857141522432, 288230376151711744,
		1729666167133437952, 576742257344905216, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857149059072,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747839323529085497, 5188430745378488320,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017896612004626432, 3170815625530441728, 1441435825341464576,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124492780339200, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124497075306496,
		4323455642275676160, 4611686018427387904, 3747839323530658381,
		5188430826982866944, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017896693609005056, 3170815625530441728,
		1441435906945843200, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557857144406016,
		288230376151711744, 1729666351817031680, 576742261639872512,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857156726784, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857145651200,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197933980319744, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857151352832, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857146699776, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197981224960000, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798509466223,
		178173660257845248, 5188431028846329856, 288230376151711744,
		1152921504606846976, 1729666515025788928, 1441436117399240704,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857147420672, 288230376151711744,
		1729666553680494592, 576742265934839808, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857156726784,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747839323534983827, 5188431131925544960,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017896998551683072, 3170815625530441728, 1441436211888521216,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124501370273792, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124505665241088,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124509960208384, 4323455642275676160, 4611686018427387904,
		3748120798513267367, 192247409093378048, 5188431235004760064,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017897101630898176, 3170815625530441728, 1441436314967736320,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857150566400, 288230376151711744,
		1729666759838924800, 576742270229807104, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857191591936,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857275674624, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857302085632, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857162821632,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857165901824, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124514255175680, 4323455642275676160,
		4611686018427387904, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857121140736, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857154105344,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197933980319744, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124518550142976,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748683748470424288, 209983562491166720,
		5188431552832339968, 288230376151711744, 1152921504606846976,
		1729667039011799040, 1441436641385250816, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857155416064, 288230376151711744, 1729667077666504704,
		576742274524774400, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3748965223445496520, 201820659315573509,
		5188431638731685888, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017897505357824000, 3170815625530441728,
		1441436718694662144, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747557857186873344, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857157513216, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197912505483264, 4611686018427387904,
		3747557857314865152, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857209745408,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323545338670,
		5188431797645475840, 288230376151711744, 1152921504606846976,
		1729667283824934912, 1441436886198386688, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557857159217152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459049579389911040, 4611686018427387904, 3747557852810575872,
		4611686018427387904, 3747557857169244160, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798521721662,
		235876030483529728, 5188431905019658240, 288230376151711744,
		1152921504606846976, 1729667391199117312, 1441436993572569088,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857160790016, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323544617815, 5188431986624036864,
		288230376151711744, 1152921504606846976, 1729667472803495936,
		1441437075176947712, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857162100736,
		288230376151711744, 1729667511458201600, 576742278819741696,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747557857167671296, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857163345920,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4900197981224960000, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857307000832, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857164394496, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900197899620581376, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798527161213,
		254171903969722368, 5188432188487499776, 288230376151711744,
		1152921504606846976, 1729667674666958848, 1441437277040410624,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857165115392, 288230376151711744,
		1729667713321664512, 576742283114708992, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747276369243930624,
		2306124492780339200, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124497075306496, 4323455642275676160,
		4611686018427387904, 3747839323553203109, 5188432304451616768,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017898171077754880, 3170815625530441728, 1441437384414593024,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857166950400, 288230376151711744,
		1729667829285781504, 576742287409676288, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747276369243930624,
		2306124522845110272, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124527140077568, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124531435044864,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124535730012160, 4323455642275676160, 4611686018427387904,
		3748402273508393920, 271346035077414912, 5188432459070439424,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017898325696577536, 3170815625530441728, 1441437539033415680,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124540024979456, 4323455642275676160,
		4611686018427387904, 3747557857174618112, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857182941184, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323557069793,
		5188432566444621824, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017898433070759936, 3170815625530441728,
		1441437646407598080, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124544319946752,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124548614914048, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857171931136, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747557857170030592,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323558970369, 5188432703883575296, 288230376151711744,
		1152921504606846976, 1729668190063034368, 1441437792436486144,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557852810706944, 3747557857173045248, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459050494217945088,
		1152921504606846976, 1441437831091191808, 4611686018427387904,
		3747276369243930624, 2306124548614914048, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798535156753, 295548725546188800, 5188432811257757696,
		288230376151711744, 1152921504606846976, 1729668297437216768,
		1441437899810668544, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124544319946752,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124548614914048, 4323455642275676160, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747839323562443826,
		5188432914336972800, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017898780963110912, 3170815625530441728,
		1441437994299949056, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557857176256512,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747557857170030592, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323563754570, 5188433017416187904,
		288230376151711744, 1152921504606846976, 1729668503595646976,
		1441438105969098752, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557852810706944, 3747557857177829376,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459050807750557696, 1152921504606846976, 1441438144623804416,
		4611686018427387904, 3747276369243930624, 2306124548614914048,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798538892378, 316096398846066688,
		5188433124790370304, 288230376151711744, 1152921504606846976,
		1729668610969829376, 1441438213343281152, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124552909881344, 4323455642275676160, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557857180450816, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323567555716,
		5188433266524291072, 288230376151711744, 1152921504606846976,
		1729668752703750144, 1441438355077201920, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810706944,
		3747557857181630464, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459051056858660864, 1152921504606846976,
		1441438393731907584, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323566965908, 5188433352423636992,
		288230376151711744, 1152921504606846976, 1729668838603096064,
		1441438440976547840, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747557857186873344, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857183662080, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900198054239404032, 4611686018427387904,
		3747276369243930624, 3747557857183989760, 288230376151711744,
		1729668924502441984, 576742291704643584, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747557857187397632,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857188249600, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557852810706944, 3747557857185234944, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459051267312058368,
		1152921504606846976, 1441438604185305088, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323571684549,
		5188433562877034496, 288230376151711744, 1152921504606846976,
		1729669049056493568, 1441438651429945344, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857186152448, 288230376151711744, 1729669087711199232,
		576742295999610880, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124557204848640,
		4323455642275676160, 4611686018427387904, 3747557857187397632,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124561499815936,
		4323455642275676160, 4611686018427387904, 3747839323574437098,
		5188433700315987968, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017899566942126080, 3170815625530441728,
		1441438780278964224, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747557857209745408, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857188970496, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900198067124305920, 4611686018427387904,
		3747276369243930624, 2306124565794783232, 4323455642275676160,
		4611686018427387904, 3747557857189691392, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459051546484932608,
		4611686018427387904, 3747557852810575872, 4611686018427387904,
		3747557857189953536, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900198071419273216, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323576075536,
		5188433872114679808, 288230376151711744, 1152921504606846976,
		1729669358294138880, 1441438960667590656, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857190871040, 288230376151711744, 1729669396948844544,
		576742300294578176, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124570089750528,
		4323455642275676160, 4611686018427387904, 3747557857214988288,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557852810706944, 3747557857192378368,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		3459051735463493632, 1152921504606846976, 1441439072336740352,
		4611686018427387904, 3747276369243930624, 2306124570089750528,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798555604274, 376894993815568384,
		5188434052503306240, 288230376151711744, 1152921504606846976,
		1729669538682765312, 1441439141056217088, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124574384717824, 4323455642275676160, 4611686018427387904,
		3747557857220231168, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124574384717824, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798557832527,
		383931868233334784, 5188434159877488640, 288230376151711744,
		1152921504606846976, 1729669646056947712, 1441439248430399488,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124578679685120, 4323455642275676160,
		4611686018427387904, 3747557857222066176, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557852810706944, 3747557857196244992, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459051988866564096,
		1152921504606846976, 1441439325739810816, 4611686018427387904,
		3747276369243930624, 2306124578679685120, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798559470957, 393502017441497088, 5188434305906376704,
		288230376151711744, 1152921504606846976, 1729669792085835776,
		1441439394459287552, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3748120798557046104, 394627917348339712,
		5188434357445984256, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017900224072122368, 3170815625530441728,
		1441439437408960512, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557857198211072,
		288230376151711744, 1729669882280148992, 576742304589545472,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747276369243930624, 2306124570089750528, 4323455642275676160,
		4611686018427387904, 3747557857214988288, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557852810706944, 3747557857199783936, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459052220794798080,
		1152921504606846976, 1441439557668044800, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747839323587478961, 5188434559309447168,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017900425935585280, 3170815625530441728, 1441439639272423424,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798563009955,
		411516415950979072, 5188434610849054720, 288230376151711744,
		1152921504606846976, 1729670097028513792, 1441439699401965568,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124574384717824, 4323455642275676160,
		4611686018427387904, 3747557857220231168, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857203126272, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459052431248195584, 4611686018427387904,
		3747557852810575872, 4611686018427387904, 3747557857317683200,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857323974656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747839323590755811, 5188434774057811968, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017900640683950080,
		3170815625530441728, 1441439854020788224, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798566352342, 425590164786511872,
		5188434825597419520, 288230376151711744, 1152921504606846976,
		1729670311776878592, 1441439914150330368, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124578679685120, 4323455642275676160, 4611686018427387904,
		3747557857222066176, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557852810706944,
		3747557857206403072, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459052654586494976, 1152921504606846976,
		1441439991459741696, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798569629192, 437130638831648768, 5188434975921274880,
		288230376151711744, 1152921504606846976, 1729670462100733952,
		1441440064474185728, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3748120798565565939, 438538013715202048,
		5188435027460882432, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017900894087020544, 3170815625530441728,
		1441440107423858688, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557857208434688,
		288230376151711744, 1729670552295047168, 576742308884512768,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747839323585775150, 5188435109065261056, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017900975691399168,
		3170815625530441728, 1441440189028237312, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124570089750528, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857317683200, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798573954629, 452893237527445504, 5188435216439443456,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017901083065581568, 3170815625530441728, 1441440296402419712,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857211318272, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747557857170030592,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323598882402, 5188435319518658560, 288230376151711744,
		1152921504606846976, 1729670805698117632, 1441440408071569408,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857226391552, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323600455286,
		5188435405418004480, 288230376151711744, 1152921504606846976,
		1729670891597463552, 1441440493970915328, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747839323599734395,
		5188435452662644736, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017901319288782848, 3170815625530441728,
		1441440532625620992, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124574384717824,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124582974652416, 4323455642275676160, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748120798579197589,
		475411235664297984, 5188435560036827136, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017901426662965248,
		3170815625530441728, 1441440639999803392, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557857216561152, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323604125362,
		5188435663116042240, 288230376151711744, 1152921504606846976,
		1729671149295501312, 1441440751668953088, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124582974652416, 4323455642275676160, 4611686018427387904,
		3747557857230716928, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323605698246, 5188435749015388160,
		288230376151711744, 1152921504606846976, 1729671235194847232,
		1441440837568299008, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747839323604977355, 5188435796260028416,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017901662886166528, 3170815625530441728, 1441440876223004672,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 2306124578679685120, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857220952064,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2594073385365405696, 4035225266123964416, 4611686018427387904,
		3747557857170030592, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323607992045, 5188435916519112704,
		288230376151711744, 1152921504606846976, 1729671402698571776,
		1441441005072023552, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124570089750528,
		4323455642275676160, 4611686018427387904, 3747557857233076224,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747839323609564929, 5188436002418458624,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017901869044596736, 3170815625530441728, 1441441082381434880,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747557857170030592, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857317683200,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857323974656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798587586326, 512002982636683264, 5188436118382575616,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017901985008713728, 3170815625530441728, 1441441198345551872,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857225080832, 288230376151711744,
		1729671643216740352, 576742313179480064, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323610154796,
		5188436199986954240, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017902066613092352, 3170815625530441728,
		1441441279949930496, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124574384717824,
		4323455642275676160, 4611686018427387904, 3747557857233076224,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747839323613890371, 5188436285886300160,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017902152512438272, 3170815625530441728, 1441441365849276416,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747557857170030592, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857317683200,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857323974656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798591911768, 530580331099586560, 5188436401850417152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017902268476555264, 3170815625530441728, 1441441481813393408,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857229406208, 288230376151711744,
		1729671926684581888, 576742317474447360, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323614480238,
		5188436483454795776, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017902350080933888, 3170815625530441728,
		1441441563417772032, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747557857235959808, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857241923584, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857247625216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857255882752, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857262764032, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748683748548347782,
		543536495212167168, 5188436642368585728, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017902508994723840,
		3170815625530441728, 1441441722331561984, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124587269619712, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124591564587008, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124595859554304,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124600154521600, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124604449488896, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124608744456192,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124613039423488, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3749528173480904618, 553388265428092858,
		557891933645570048, 5188436835642114048, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017902702268252160,
		3170815625530441728, 1441441915605090304, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747557857263484928,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857263484928, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857263484928, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798600300504, 566609128118550528,
		5188436951606231040, 288230376151711744, 1152921504606846976,
		1729672437785690112, 1441442040159141888, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557857263484928,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3748120798602397688, 575616327373291520,
		5188437089045184512, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017902955671322624, 3170815625530441728,
		1441442169008160768, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323625359362, 5188437136289824768, 288230376151711744,
		1152921504606846976, 1729672622469283840, 1441442224842735616,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857240678400, 288230376151711744,
		1729672661123989504, 576742321769414656, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323624572953,
		5188437217894203392, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017903084520341504, 3170815625530441728,
		1441442297857179648, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124617334390784,
		4323455642275676160, 4611686018427387904, 3747557857264009216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857264009216, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798606133296,
		591378926069088256, 5188437329563353088, 288230376151711744,
		1152921504606846976, 1729672815742812160, 1441442418116263936,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124617334390784, 4323455642275676160,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3748120798608099407, 600104650347118592,
		5188437462707339264, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017903329333477376, 3170815625530441728,
		1441442542670315520, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323631126617, 5188437509951979520, 288230376151711744,
		1152921504606846976, 1729672996131438592, 1441442598504890368,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857246380032, 288230376151711744,
		1729673034786144256, 576742326064381952, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323630340208,
		5188437591556358144, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017903458182496256, 3170815625530441728,
		1441442671519334400, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124621629358080,
		4323455642275676160, 4611686018427387904, 3747557857264009216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857264009216, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857264009216, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857264009216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857264009216, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857264009216, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857264009216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857264009216, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3749809648472098951,
		615876668050245787, 621506253485113344, 5188437836369494016,
		288230376151711744, 1152921504606846976, 1729673322548953088,
		1441442924922404864, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857251229696,
		288230376151711744, 1729673361203658752, 576742330359349248,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747276369243930624, 2306124621629358080, 4323455642275676160,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3748120798616357069, 635570497412661248,
		5188438003873218560, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017903870499356672, 3170815625530441728,
		1441443083836194816, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323639384279, 5188438051117858816, 288230376151711744,
		1152921504606846976, 1729673537297317888, 1441443139670769664,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857254637568, 288230376151711744,
		1729673575952023552, 576742334654316544, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323638860014,
		5188438132722237440, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017903999348375552, 3170815625530441728,
		1441443212685213696, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124625924325376,
		4323455642275676160, 4611686018427387904, 3747557857264009216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857264009216, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857264009216, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857264009216,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748683748573513989, 651343056289923072, 5188438287341060096,
		288230376151711744, 1152921504606846976, 1729673773520519168,
		1441443375893970944, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857258176512,
		288230376151711744, 1729673812175224832, 576742338949283840,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747276369243930624, 2306124625924325376, 4323455642275676160,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857323974656,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3748120798623238454, 665125369967280128,
		5188438454844784640, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017904321470922752, 3170815625530441728,
		1441443534807760896, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323646265664, 5188438502089424896, 288230376151711744,
		1152921504606846976, 1729673988268883968, 1441443590642335744,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857261518848, 288230376151711744,
		1729674026923589632, 576742343244251136, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323645741399,
		5188438583693803520, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017904450319941632, 3170815625530441728,
		1441443663656779776, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124630219292672,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124634514259968, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124638809227264, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124643104194560,
		4323455642275676160, 4611686018427387904, 3747557857277313024,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857282621440, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857300840448, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323651967368,
		5188438781262299136, 288230376151711744, 1152921504606846976,
		1729674267441758208, 1441443869815209984, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3748120798628022655,
		688206318057553920, 5188438832801906688, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017904699428044800,
		3170815625530441728, 1441443912764882944, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747557852810706944,
		3747557857266499584, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459056623136276480, 1152921504606846976,
		1441443960009523200, 4611686018427387904, 3747276369243930624,
		2306124647399161856, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124565794783232, 4323455642275676160,
		4611686018427387904, 3747557857268137984, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459056687560785920,
		4611686018427387904, 3747557852810575872, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748402273604471204,
		697224190306025472, 5188438991715696640, 288230376151711744,
		1152921504606846976, 1729674477895155712, 1441444080268607488,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857268924416, 288230376151711744,
		1729674516549861376, 576742347539218432, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747276369243930624,
		2306124643104194560, 4323455642275676160, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557857270497280, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323657603554,
		5188439167809355776, 288230376151711744, 1152921504606846976,
		1729674653988814848, 1441444256362266624, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810706944,
		3747557857271676928, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459056958143725568, 1152921504606846976,
		1441444295016972288, 4611686018427387904, 3747557857317683200,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857323974656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747839323659766272, 5188439296658374656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017905163284512768,
		3170815625530441728, 1441444376621350912, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798633724402, 721983315262832640,
		5188439348197982208, 288230376151711744, 1152921504606846976,
		1729674834377441280, 1441444436750893056, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857274363904, 288230376151711744, 1729674873032146944,
		576742351834185728, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747839323656489500, 5188439429802360832,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017905296428498944, 3170815625530441728, 1441444509765337088,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747557857282621440, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124651694129152, 4323455642275676160, 4611686018427387904,
		3747557857282621440, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798639884852, 736338539075076096,
		5188439541471510528, 288230376151711744, 1152921504606846976,
		1729675027650969600, 1441444630024421376, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124647399161856, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857317683200, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3748120798641588813, 743375413492842496, 5188439648845692928,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		2017905515471831040, 3170815625530441728, 1441444728808669184,
		3747557852810641408, 3170815621235474432, 4611686018427387904,
		3747276369243930624, 3747557857278951424, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747557857170030592,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323666516586, 5188439751924908032, 288230376151711744,
		1152921504606846976, 1729675238104367104, 1441444840477818880,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124582974652416, 4323455642275676160,
		4611686018427387904, 3747557857288781824, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323668089470,
		5188439837824253952, 288230376151711744, 1152921504606846976,
		1729675324003713024, 1441444926377164800, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747839323667368579,
		5188439885068894208, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017905751695032320, 3170815625530441728,
		1441444965031870464, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124647399161856,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		2306124655989096448, 4323455642275676160, 4611686018427387904,
		3747557857233076224, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748120798646831773,
		765893411629694976, 5188439992443076608, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017905859069214720,
		3170815625530441728, 1441445072406052864, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124660284063744, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857284980736, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747557857170030592,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857317683200, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857323974656, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748120798649256643,
		776870935721410560, 5188440159946801152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017906026572939264,
		3170815625530441728, 1441445239909777408, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323672021709, 5188440207191441408,
		288230376151711744, 1152921504606846976, 1729675693370900480,
		1441445295744352256, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857287536640,
		288230376151711744, 1729675732025606144, 576742356129153024,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747839323670973156, 5188440288795820032, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017906155421958144,
		3170815625530441728, 1441445368758796288, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124660284063744, 4323455642275676160, 4611686018427387904,
		3747557857301561344, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124664579031040, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857290092544, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904, 3747557857170030592,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857317683200, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857323974656, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748120798654368529,
		798825983904841728, 5188440494954250240, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017906361580388352,
		3170815625530441728, 1441445574917226496, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3747839323677133595, 5188440542198890496,
		288230376151711744, 1152921504606846976, 1729676028378349568,
		1441445630751801344, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857292648448,
		288230376151711744, 1729676067033055232, 576742360424120320,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747276369243930624, 2306124664579031040, 4323455642275676160,
		4611686018427387904, 3747557857186873344, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857294155776, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4900198054239404032, 4611686018427387904,
		3747276369243930624, 2306124668873998336, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3748120798657383235, 813181207717085184, 5188440709702615040,
		288230376151711744, 1152921504606846976, 1729676195882074112,
		1441445798255525888, 3170815621235474432, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557857295138816,
		288230376151711744, 1729676234536779776, 576742364719087616,
		4611686018427387904, 3170815616940507136, 4611686018427387904,
		3747276369243930624, 2306124664579031040, 4323455642275676160,
		4611686018427387904, 3747557857186873344, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124647399161856, 4323455642275676160,
		4611686018427387904, 3747557857317683200, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857323974656, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748120798660529006,
		825003156738932736, 5188440894386208768, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017906761012346880,
		3170815625530441728, 1441445974349185024, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798659939173, 826410531622486016,
		5188440945925816320, 288230376151711744, 1152921504606846976,
		1729676432105275392, 1441446034478727168, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857298743296, 288230376151711744, 1729676470759981056,
		576742369014054912, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3748402273629965106, 817697520447651840,
		5188441031825162240, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017906898451300352, 3170815625530441728,
		1441446111788138496, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323676281752, 5188441079069802496, 288230376151711744,
		1152921504606846976, 1729676565249261568, 1441446167622713344,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124673168965632, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 2306124677463932928,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857301823488, 288230376151711744, 1729676638263705600,
		576742373309022208, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124664579031040,
		4323455642275676160, 4611686018427387904, 3747557857312505856,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747276369243930624, 2306124668873998336,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798666099651, 848928529759338496,
		5188441255163461632, 288230376151711744, 1152921504606846976,
		1729676741342920704, 1441446343716372480, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857303461888, 288230376151711744, 1729676779997626368,
		576742377603989504, 4611686018427387904, 3170815616940507136,
		4611686018427387904, 3747276369243930624, 2306124664579031040,
		4323455642275676160, 4611686018427387904, 3747557857312505856,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857323974656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798668262372,
		858217203990790144, 5188441401192349696, 288230376151711744,
		1152921504606846976, 1729676887371808768, 1441446489745260544,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857305690112, 288230376151711744,
		1729676926026514432, 576742381898956800, 4611686018427387904,
		3170815616940507136, 4611686018427387904, 3747839323691027450,
		5188441482796728320, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2017907349422866432, 3170815625530441728,
		1441446562759704576, 3747557852810641408, 3170815621235474432,
		4611686018427387904, 3747276369243930624, 2306124681758900224,
		4323455642275676160, 4611686018427387904, 3747276369243930624,
		3747557857307721728, 3747276386423799808, 288230376151711744,
		3170815634120376320, 2594073385365405696, 4035225266123964416,
		4611686018427387904, 3747557857170030592, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323694763033,
		5188441603055812608, 288230376151711744, 1152921504606846976,
		1729677089235271680, 1441446691608723456, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557852810641408,
		3747557857308835840, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459059393390182400, 1152921504606846976,
		1441446730263429120, 4611686018427387904, 3747276369243930624,
		2306124664579031040, 4323455642275676160, 4611686018427387904,
		3747557857312505856, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		2306124668873998336, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3748120798673636406,
		881298152081063936, 5188441749084700672, 288230376151711744,
		1152921504606846976, 1729677235264159744, 1441446837637611520,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747839323696335935, 5188441796329340928, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017907662955479040,
		3170815625530441728, 1441446876292317184, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747557852810706944,
		3747557857311784960, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459059586663710720, 1152921504606846976,
		1441446923536957440, 4611686018427387904, 3747557857317421056,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857317683200, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747557857170948096, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3748120798676585572,
		894246001009754112, 5188441950948163584, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017907817574301696,
		3170815625530441728, 1441447030911139840, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747557852810706944,
		3747557857314078720, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459059741282533376, 1152921504606846976,
		1441447078155780096, 4611686018427387904, 3747557857317421056,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857179402240, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747839323702234248, 5188442079797182464, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017907946423320576,
		3170815625530441728, 1441447159760158720, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747557852810706944,
		3747557857316110336, 3747276386423799808, 288230376151711744,
		3170815634120376320, 3459059870131552256, 1152921504606846976,
		1441447207004798976, 4611686018427387904, 3747276369243930624,
		2306124686053867520, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 2306124690348834816, 4323455642275676160,
		4611686018427387904, 3747557857314865152, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 2306124694643802112, 4323455642275676160,
		4611686018427387904, 3747276369243930624, 3747557852810641408,
		3747839323704724654, 5188442238710972416, 288230376151711744,
		1152921504606846976, 1729677724890431488, 1441447327263883264,
		3170815621235474432, 4323455642275676160, 4611686018427387904,
		3747557857316831232, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747557857182941184,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857319583744, 3747276386423799808,
		288230376151711744, 3170815634120376320, 3459060063405080576,
		4611686018427387904, 3747557852810575872, 4611686018427387904,
		3747557857317683200, 3747276386423799808, 288230376151711744,
		3170815634120376320, 4611686018427387904, 3747276369243930624,
		3747557852810641408, 3748120798682746055, 922956448634241024,
		5188442389034827776, 288230376151711744, 1152921504606846976,
		1729677875214286848, 1441447477587738624, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3747557857314865152,
		3747276386423799808, 288230376151711744, 3170815634120376320,
		4611686018427387904, 3747557857323974656, 3747276386423799808,
		288230376151711744, 3170815634120376320, 4611686018427387904,
		3747276369243930624, 3747557852810641408, 3747839323708329189,
		5188442479229140992, 288230376151711744, 1152921504606846976,
		1729677965408600064, 1441447567782051840, 3170815621235474432,
		4323455642275676160, 4611686018427387904, 3748120798682025172,
		930556273005428736, 5188442530768748544, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2017908397394886656,
		3170815625530441728, 1441447610731724800, 3747557852810641408,
		3170815621235474432, 4611686018427387904, 3747276369243930624,
		2306124540024979456, 4323455642275676160, 4611686018427387904,
		3747276369243930624, 3747557857323712512, 3747276386423799808,
		288230376151711744, 3170815634120376320, 2594073385365405696,
		4035225266123964416, 4611686018427387904,
	},
	instrToRule: []int{
		-1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 3, 3, 3, 3, 3,
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5, 5, 16, 16,
		16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
		17, 17, 17, 17, 17, 17, 17, 17, 17, 19,
		19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
		19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
		19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
		19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
		19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
		19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
		19, 19, 19, 19, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
		22, 22, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
		25, 25, 25, 25, 25, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
		27, 27, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
		28, 28, 28, 28, 28, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
		30, 30, 30, 30, 30, 30, 30, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
		29, 29, 29, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
		34, 34, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
		35, 35, 35, 35, 35, 35, 35, 35, 35, 36,
		36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
		36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
		36, 36, 36, 36, 36, 36, 14, 14, 14, 14,
		14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
		14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
		14, 14, 14, 14, 37, 37, 37, 37, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
		38, 38, 38, 38, 38, 38, 38, 38, 38, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
		39, 39, 39, 39, 39, 39, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
		41, 41, 41, 41, 41, 41, 41, 41, 41, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
		40, 40, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
		24, 11, 11, 11, 11, 11, 11, 11, 11, 11,
		11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
		11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
		11, 11, 11, 11, 11, 11, 11, 11, 11, 44,
		44, 44, 44, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
		45, 45, 45, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
		31, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
		48, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
		49, 50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
		50, 50, 50, 50, 50, 50, 50, 50, 50, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
		51, 51, 51, 51, 51, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
		52, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
		53, 53, 53, 53, 53, 53, 53, 53, 54, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
		54, 54, 54, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
		55, 55, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
		56, 56, 56, 56, 56, 56, 56, 56, 56, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 57, 57, 57, 57, 57,
		57, 57, 57, 57, 57, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
		59, 59, 59, 59, 61, 61, 61, 61, 60, 60,
		60, 60, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
		32, 32, 32, 32, 32, 32, 32, 62, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
		62, 62, 62, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
		63, 63, 63, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
		65, 65, 65, 65, 65, 65, 65, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 66, 66, 66, 66, 33, 33, 33, 33, 33,
		33, 33, 33, 33, 33, 33, 33, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
		8, 8, 8, 8, 8, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
		67, 67, 67, 67, 67, 67, 67, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 69, 69, 69, 69, 69, 69, 69,
		69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
		69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
		69, 69, 69, 68, 68, 68, 68, 42, 42, 42,
		42, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 6,
		6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
		6,
	},
	ss: []string{
		"Grammar", "__", "initializer",
		"Initializer", "rules", "Rule",
		"EOF", "code", "CodeBlock",
		"EOS", "name", "IdentifierName",
		"display", "StringLiteral", "RuleDefOp",
		"expr", "Expression", "ChoiceExpr",
		"first", "ActionExpr", "rest",
		"SeqExpr", "LabeledExpr", "label",
		"Identifier", "PrefixedExpr", "op",
		"PrefixedOp", "SuffixedExpr", "PrimaryExpr",
		"SuffixedOp", "LitMatcher", "CharClassMatcher",
		"AnyMatcher", "RuleRefExpr", "SemanticPredExpr",
		"SemanticPredOp", "SourceChar", "Comment",
		"MultiLineComment", "SingleLineComment", "MultiLineCommentNoLineTerminator",
		"EOL", "ident", "IdentifierStart",
		"IdentifierPart", "lit", "ignore",
		"DoubleStringChar", "SingleStringChar", "RawStringChar",
		"DoubleStringEscape", "SingleStringEscape", "CommonEscapeSequence",
		"SingleCharEscape", "OctalEscape", "HexEscape",
		"LongUnicodeEscape", "ShortUnicodeEscape", "OctalDigit",
		"HexDigit", "DecimalDigit", "ClassCharRange",
		"ClassChar", "UnicodeClassEscape", "CharClassEscape",
		"SingleCharUnicodeClass", "Code", "Whitespace",
		"_",
	},
	ms: []ϡmatcher{
		ϡstringMatcher{
			ignoreCase: false,
			value:      "/",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ":",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "&",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "!",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "?",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "*",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "+",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "(",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ")",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "=",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "<-",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "←",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "⟵",
		},
		ϡanyMatcher{},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "/*",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "*/",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "//",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'_'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{ϡrangeTable("L")},
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{ϡrangeTable("Nd")},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "i",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\"",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "'",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "`",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\\",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "a",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "b",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "n",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "f",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "r",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "t",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "v",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "x",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "U",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "u",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '7'},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '9'},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			ignoreCase: true,
			inverted:   false,
			chars:      []rune{},
			ranges:     []rune{'0', '9', 'a', 'f'},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "[",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "]",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "-",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "^",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "p",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "{",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "}",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'L', 'M', 'N', 'C', 'P', 'Z', 'S'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ".",
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{'{', '}'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡcharClassMatcher{
			ignoreCase: false,
			inverted:   false,
			chars:      []rune{' ', '\t', '\r'},
			ranges:     []rune{},
			classes:    []*unicode.RangeTable{},
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      "\n",
		},
		ϡstringMatcher{
			ignoreCase: false,
			value:      ";",
		},
	},
	as: []func(*ϡvm) (interface{}, error){
		(*ϡvm).callOnGrammar1,
		(*ϡvm).callOnInitializer1,
		(*ϡvm).callOnRule1,
		(*ϡvm).callOnChoiceExpr1,
		(*ϡvm).callOnActionExpr1,
		(*ϡvm).callOnSeqExpr1,
		(*ϡvm).callOnLabeledExpr2,
		(*ϡvm).callOnPrefixedExpr2,
		(*ϡvm).callOnPrefixedOp1,
		(*ϡvm).callOnSuffixedExpr2,
		(*ϡvm).callOnSuffixedOp1,
		(*ϡvm).callOnPrimaryExpr7,
		(*ϡvm).callOnRuleRefExpr1,
		(*ϡvm).callOnSemanticPredExpr1,
		(*ϡvm).callOnSemanticPredOp1,
		(*ϡvm).callOnIdentifier1,
		(*ϡvm).callOnIdentifierName1,
		(*ϡvm).callOnLitMatcher1,
		(*ϡvm).callOnStringLiteral2,
		(*ϡvm).callOnStringLiteral18,
		(*ϡvm).callOnDoubleStringEscape5,
		(*ϡvm).callOnSingleStringEscape5,
		(*ϡvm).callOnOctalEscape6,
		(*ϡvm).callOnHexEscape6,
		(*ϡvm).callOnLongUnicodeEscape2,
		(*ϡvm).callOnLongUnicodeEscape13,
		(*ϡvm).callOnShortUnicodeEscape2,
		(*ϡvm).callOnShortUnicodeEscape9,
		(*ϡvm).callOnCharClassMatcher2,
		(*ϡvm).callOnCharClassMatcher15,
		(*ϡvm).callOnCharClassEscape6,
		(*ϡvm).callOnUnicodeClassEscape5,
		(*ϡvm).callOnUnicodeClassEscape13,
		(*ϡvm).callOnUnicodeClassEscape19,
		(*ϡvm).callOnAnyMatcher1,
		(*ϡvm).callOnCodeBlock2,
		(*ϡvm).callOnCodeBlock7,
	},
	bs: []func(*ϡvm) (bool, error){},
}

//+pigeon: err.go

var (
	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errNoMatch is returned if no match could be found and no other
	// error has been raised.
	errNoMatch = errors.New("no match found")
)

// errList cumulates the errors found by the parser. It is part
// of the supported API.
type errList []error

// ϡadd adds err to the list of errors.
func (e *errList) ϡadd(err error) {
	if err != nil {
		*e = append(*e, err)
	}
}

// ϡerr returns the error list as an error, or nil if the list is empty.
func (e errList) ϡerr() error {
	if len(e) == 0 {
		return nil
	}
	e.ϡdedupe()
	return e
}

// ϡdedupe removes duplicate error messages from the list.
func (e *errList) ϡdedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

// Error returns the error message for the errList. It implements the
// error interface.
func (e errList) Error() string {
	var buf bytes.Buffer

	for i, err := range e {
		if i > 0 {
			buf.WriteRune('\n')
		}
		buf.WriteString(err.Error())
	}
	return buf.String()
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
// It is part of the supported API.
type parserError struct {
	Inner   error
	ϡpos    position
	ϡprefix string
}

// Error returns the prefixed error message. It implements the error
// interface.
func (p *parserError) Error() string {
	return p.ϡprefix + ": " + p.Inner.Error()
}

//+pigeon: matchers.go

// ϡpeekReader is the interface that defines the peek and read
// methods.
type ϡpeekReader interface {
	peek() ϡsvpt
	read()
}

// ϡmatcher is the interface that defines the match method.
type ϡmatcher interface {
	match(ϡpeekReader) bool
}

// ϡanyMatcher is a matcher that matches any character but the
// EOF.
type ϡanyMatcher struct{}

// match tries to match a character in the peekReader.
func (a ϡanyMatcher) match(pr ϡpeekReader) bool {
	pt := pr.peek()
	pr.read()
	return pt.rn != utf8.RuneError
}

func (a ϡanyMatcher) String() string {
	return "."
}

// ϡstringMatcher is a matcher that matches a string.
type ϡstringMatcher struct {
	ignoreCase bool
	value      string // value must be lowercase if ignoreCase is true
}

// match tries to match the string in the peekReader.
func (s ϡstringMatcher) match(pr ϡpeekReader) bool {
	for _, want := range s.value {
		pt := pr.peek()
		if s.ignoreCase {
			pt.rn = unicode.ToLower(pt.rn)
		}
		if pt.rn != want {
			return false
		}
		pr.read()
	}
	return true
}

func (s ϡstringMatcher) String() string {
	v := strconv.Quote(s.value)
	if s.ignoreCase {
		v += "i"
	}
	return v
}

// ϡcharClassMatcher is a matcher that matches classes of characters.
type ϡcharClassMatcher struct {
	chars   []rune // runes must be lowercase if ignoreCase is true
	ranges  []rune // same for ranges
	classes []*unicode.RangeTable

	ignoreCase bool
	inverted   bool
}

func (c ϡcharClassMatcher) String() string {
	var buf bytes.Buffer

	buf.WriteString("[")
	if c.inverted {
		buf.WriteString("^")
	}
	for _, c := range c.chars {
		buf.WriteRune(c)
	}
	for i := 0; i < len(c.ranges); i += 2 {
		buf.WriteString(fmt.Sprintf("%c-%c", c.ranges[i], c.ranges[i+1]))
	}
	// unicode classes can't be stringified
	if l := len(c.classes); l > 0 {
		buf.WriteString(fmt.Sprintf("\\p{%d classes}", l))
	}
	buf.WriteString("]")
	if c.ignoreCase {
		buf.WriteString("i")
	}
	return buf.String()
}

// match tries to match classes of characters in the peekReader.
func (c ϡcharClassMatcher) match(pr ϡpeekReader) bool {
	pt := pr.peek()
	pr.read()

	if c.ignoreCase {
		pt.rn = unicode.ToLower(pt.rn)
	}

	// try to match in the list of available chars
	for _, rn := range c.chars {
		if pt.rn == rn {
			return !c.inverted
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(c.ranges); i += 2 {
		if pt.rn >= c.ranges[i] && pt.rn <= c.ranges[i+1] {
			return !c.inverted
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range c.classes {
		if unicode.Is(cl, pt.rn) {
			return !c.inverted
		}
	}

	return c.inverted
}

// ϡrangeTable returns the corresponding unicode range table from the
// provided class name.
func ϡrangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}

//+pigeon: ops.go

// ϡop represents an opcode.
type ϡop byte

// list of opcodes in the pigeon VM.
const (
	ϡopExit ϡop = iota
	ϡopCall
	ϡopCallA
	ϡopCallB
	ϡopCumulOrF
	ϡopJump
	ϡopJumpIfF
	ϡopJumpIfT
	ϡopMatch
	ϡopNilIfF
	ϡopNilIfT
	ϡopPop
	ϡopPopVJumpIfF
	ϡopPush
	ϡopRestore
	ϡopRestoreIfF
	ϡopReturn
	ϡopStoreIfT
	ϡopTakeLOrJump
	ϡopmax // must always be after the last valid opcode

	// ϡopPlaceholder is an (invalid) opcode used by the Generator
	// to insert opcodes that need the index of the starting instruction
	// of a rule that hasn't been generated yet.
	//
	// It must be placed after ϡopmax (because it is invalid in the
	// final program) and it has one argument, the index in the strings
	// array of the identifier of the rule.
	ϡopPlaceholder
)

// ϡlookupOp translates an opcode to a string.
var ϡlookupOp = []string{
	ϡopExit: "exit", ϡopCall: "call", ϡopCallA: "callA",
	ϡopCallB: "callB", ϡopCumulOrF: "cumulOrF",
	ϡopJump: "jump", ϡopJumpIfF: "jumpIfF", ϡopJumpIfT: "jumpIfT",
	ϡopMatch: "match", ϡopNilIfF: "nilIfF", ϡopNilIfT: "nilIfT",
	ϡopPop: "pop", ϡopPopVJumpIfF: "popVJumpIfF",
	ϡopPush: "push", ϡopRestore: "restore", ϡopRestoreIfF: "restoreIfF",
	ϡopReturn: "return", ϡopStoreIfT: "storeIfT", ϡopTakeLOrJump: "takeLOrJump",
}

// String returns the string representation of the opcode.
func (op ϡop) String() string {
	if 0 <= op && int(op) < len(ϡlookupOp) {
		return ϡlookupOp[op]
	}
	return "ϡop(" + strconv.Itoa(int(op)) + ")"
}

// ϡinstr encodes an opcode with its arguments as a 64-bits unsigned
// integer. The bits are used as follows:
//
// o : 6 bits = opcode (max=63)
// n : 10 bits = for PUSHL, number of values in array (max=1023)
// l : 16 bits = instruction index (max=65535)
//
// So a single PUSH instruction can encode 2 indices (first arg is the stack ID).
// The 64-bit value looks like this:
// oooooonn nnnnnnnn llllllll llllllll llllllll llllllll llllllll llllllll
//
// And if a PUSH (L) instruction has more than 2 indices, it can store 4 full
// indices per subsequent values (4 * 16 bits = 64 bits).
type ϡinstr uint64

// limits and masks.
const (
	ϡiBits = 64
	ϡlBits = 16
	ϡnBits = 10
	ϡoBits = 6
	ϡlPerI = ϡiBits / ϡlBits

	ϡlMask = 1<<ϡlBits - 1
	ϡnMask = 1<<ϡnBits - 1
	ϡoMask = 1<<ϡoBits - 1
)

// decode decodes the instruction and returns the 5 parts:
// the opcode, the number of L array values, and the 3 instruction
// indices.
func (i ϡinstr) decode() (op ϡop, n, ix0, ix1, ix2 int) {
	ix2 = int(i & ϡlMask)
	i >>= ϡlBits
	ix1 = int(i & ϡlMask)
	i >>= ϡlBits
	ix0 = int(i & ϡlMask)
	i >>= ϡlBits
	n = int(i & ϡnMask)
	i >>= ϡnBits
	op = ϡop(i & ϡoMask)
	return
}

// decodeLs decodes the instruction as a list of L instruction
// indices (as a follow-up value to a PUSHL opcode).
func (i ϡinstr) decodeLs() (ix0, ix1, ix2, ix3 int) {
	ix3 = int(i & ϡlMask)
	i >>= ϡlBits
	ix2 = int(i & ϡlMask)
	i >>= ϡlBits
	ix1 = int(i & ϡlMask)
	i >>= ϡlBits
	ix0 = int(i & ϡlMask)
	return
}

// ϡencodeInstr encodes the provided operation and its arguments into
// a list of instruction values. It may return an error if any part
// of the instruction overflows the allowed values.
func ϡencodeInstr(op ϡop, args ...int) ([]ϡinstr, error) {
	var is []ϡinstr

	if op >= ϡopmax && op != ϡopPlaceholder {
		return nil, errors.New("invalid op value")
	}
	if len(args) > ϡnMask {
		return nil, errors.New("too many arguments")
	}

	// first instruction contains opcode
	is = append(is, ϡinstr(op)<<(ϡiBits-ϡoBits))
	n := uint(len(args))
	if n == 0 {
		return is, nil
	}
	off := uint(ϡiBits - ϡoBits - ϡnBits)
	is[0] |= ϡinstr(n) << off

	ix := 0
	for i, arg := range args {
		if arg > ϡlMask {
			return nil, errors.New("argument value too big")
		}

		mod := uint((i + 1) % ϡlPerI)
		if mod == 0 {
			is = append(is, 0)
			ix++
		}

		is[ix] |= ϡinstr(arg) << (off - (mod * ϡlBits))
	}

	return is, nil
}

//+pigeon: parser.go

// position records a position in the text. It is part of the supported
// API.
type position struct {
	// line is the 1-based index of the line of the current rune.
	line int
	// col is the 1-based index of the current rune on the line.
	col int
	// offset is the 0-based index of the starting byte of the current rune.
	offset int
}

// String formats a position as a string.
func (p position) String() string {
	return fmt.Sprintf("%d:%d (%d)", p.line, p.col, p.offset)
}

// current represents current matching data. It is the value on which
// action and predicate code blocks are generated as methods. It is
// part of the supported API.
type current struct {
	// pos holds the start position of the current match.
	pos position
	// text contains the raw text of the match. It is a slice in the
	// source data, so it should not be modified.
	text []byte
}

// ϡsvpt stores all state required to go back to a point in the
// parser.
type ϡsvpt struct {
	position
	rn rune
	w  int
}

// ϡparser parses the input text as rune code points.
type ϡparser struct {
	data []byte
	pt   ϡsvpt
	cur  current
}

// peek returns the current savepoint information.
func (p *ϡparser) peek() ϡsvpt {
	return p.pt
}

// read advances the parser to the next rune.
func (p *ϡparser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n

	if rn == utf8.RuneError {
		if n > 0 {
			panic(errInvalidEncoding)
		}
	} else {
		p.pt.col++
		if rn == '\n' {
			p.pt.line++
			p.pt.col = 0
		}
	}
}

// sliceFrom gets the slice of bytes from the start savepoint to
// the current position, non inclusive.
func (p *ϡparser) sliceFrom(start ϡsvpt) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

//+pigeon: pub.go

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*ϡvm) Option

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.debug
		v.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.memoize
		v.memoize = b
		return Memoize(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(v *ϡvm) Option {
		old := v.recover
		v.recover = b
		return Recover(old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (interface{}, error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	p := &ϡparser{
		data: b,
		pt:   ϡsvpt{position: position{line: 1}},
	}
	v := &ϡvm{
		filename: filename,
		parser:   p,
		recover:  true,
	}
	return v.setOptions(opts).run(ϡtheProgram)
}

//+pigeon: stacks.go

// ϡpstack implements the Position stack. It stores savepoints.
type ϡpstack struct {
	ar []ϡsvpt
	sp int
}

// push adds a value on the stack.
func (p *ϡpstack) push(pt ϡsvpt) {
	if p.sp >= len(p.ar) {
		p.ar = append(p.ar, pt)
	} else {
		p.ar[p.sp] = pt
	}
	p.sp++
}

// pop removes a value from the stack.
func (p *ϡpstack) pop() ϡsvpt {
	p.sp--
	return p.ar[p.sp]
}

func (p *ϡpstack) len() int {
	return p.sp
}

func newPstack(cap int) *ϡpstack {
	return &ϡpstack{ar: make([]ϡsvpt, cap)}
}

// ϡistack implements the Instruction index stack. It stores integers.
type ϡistack struct {
	ar []int
	sp int
}

// push adds a value on the stack.
func (i *ϡistack) push(v int) {
	if i.sp >= len(i.ar) {
		i.ar = append(i.ar, v)
	} else {
		i.ar[i.sp] = v
	}
	i.sp++
}

// pop removes a value from the stack.
func (i *ϡistack) pop() int {
	i.sp--
	return i.ar[i.sp]
}

func (i *ϡistack) len() int {
	return i.sp
}

func newIstack(cap int) *ϡistack {
	return &ϡistack{ar: make([]int, cap)}
}

// ϡvstack implements the Value stack. It stores empty interfaces.
type ϡvstack struct {
	ar []interface{}
	sp int
}

// push adds a value on the stack.
func (v *ϡvstack) push(i interface{}) {
	if v.sp >= len(v.ar) {
		v.ar = append(v.ar, i)
	} else {
		v.ar[v.sp] = i
	}
	v.sp++
}

// pop removes a value from the stack.
func (v *ϡvstack) pop() interface{} {
	v.sp--
	return v.ar[v.sp]
}

// peek returns the value at the top of the stack, leaving it there.
func (v *ϡvstack) peek() interface{} {
	return v.ar[v.sp-1]
}

func (v *ϡvstack) len() int {
	return v.sp
}

func newVstack(cap int) *ϡvstack {
	return &ϡvstack{ar: make([]interface{}, cap)}
}

// ϡlstack implements the Loop stack. It stores slices of integers.
type ϡlstack struct {
	ar [][]int
	sp int
}

// push adds a value on the stack.
func (l *ϡlstack) push(a []int) {
	if l.sp >= len(l.ar) {
		l.ar = append(l.ar, a)
	} else {
		l.ar[l.sp] = a
	}
	l.sp++
}

// pop removes a value from the stack.
func (l *ϡlstack) pop() []int {
	l.sp--
	return l.ar[l.sp]
}

// take removes the integer at index 0 from the slice at the top of the
// stack. It returns -1 if the slice is empty. The slice is left on the
// stack.
func (l *ϡlstack) take() int {
	v := -1
	a := l.ar[l.sp-1]
	if len(a) > 0 {
		v = a[0]
		l.ar[l.sp-1] = a[1:]
	}
	return v
}

func (l *ϡlstack) len() int {
	return l.sp
}

func newLstack(cap int) *ϡlstack {
	return &ϡlstack{ar: make([][]int, cap)}
}

// ϡargsSet holds the list of arguments (key and value) to pass
// to the code blocks.
type ϡargsSet map[string]interface{}

// ϡastack is a stack of ϡargsSet.
type ϡastack struct {
	ar []ϡargsSet
	sp int
}

// push adds an empty ϡargsSet on top of the stack.
func (a *ϡastack) push() {
	if a.sp >= len(a.ar) {
		a.ar = append(a.ar, nil)
	} else {
		a.ar[a.sp] = nil
	}
	a.sp++
}

// pop removes the top ϡargsSet from the stack.
func (a *ϡastack) pop() {
	a.sp--
}

// peek returns the current top ϡargsSet.
func (a *ϡastack) peek() ϡargsSet {
	as := a.ar[a.sp-1]
	if as == nil {
		as = make(ϡargsSet)
		a.ar[a.sp-1] = as
	}
	return as
}

func (a *ϡastack) len() int {
	return a.sp
}

func newAstack(cap int) *ϡastack {
	return &ϡastack{ar: make([]ϡargsSet, cap)}
}

//+pigeon: vm.go

// ϡsentinel is a type used to define sentinel values that shouldn't
// be equal to something else.
type ϡsentinel int

const (
	// ϡmatchFailed is a sentinel value used to indicate a match failure.
	ϡmatchFailed ϡsentinel = iota - 1
)

const (
	// stack IDs, used in PUSH and POP's first argument
	ϡpstackID = iota + 1
	ϡlstackID
	ϡvstackID
	ϡistackID
	ϡastackID

	// special V stack values
	ϡvValNil    = 0
	ϡvValFailed = 1
	ϡvValEmpty  = 2
)

var (
	ϡstackNm = []string{
		ϡpstackID: "P",
		ϡlstackID: "L",
		ϡvstackID: "V",
		ϡistackID: "I",
		ϡastackID: "A",
	}
)

// special values that may be pushed on the V stack.
var ϡvSpecialValues = []interface{}{
	nil,
	ϡmatchFailed,
	[]interface{}(nil),
}

type ϡmemoizedResult struct {
	v  interface{}
	pt ϡsvpt
}

// ϡprogram is the data structure that is generated by the builder
// based on an input PEG. It contains the program information required
// to execute the grammar using the vm.
type ϡprogram struct {
	instrs []ϡinstr

	// lists
	ms []ϡmatcher
	as []func(*ϡvm) (interface{}, error)
	bs []func(*ϡvm) (bool, error)
	ss []string

	// instrToRule is the mapping of an instruction index to a rule
	// identifier (or display name) in the ss list:
	//
	// ss[instrToRule[instrIndex]] == name of the rule
	//
	// Since instructions are limited to 65535, the size of this slice
	// is bounded.
	instrToRule []int
}

// String formats the program's instructions in a human-readable format.
func (pg ϡprogram) String() string {
	var buf bytes.Buffer
	var n int

	for i, instr := range pg.instrs {
		if n > 0 {
			n -= 4
			continue
		}
		_, n, _, _, _ = instr.decode()
		n -= 3

		buf.WriteString(fmt.Sprintf("[%3d]: %s\n", i, pg.instrToString(instr, i)))
	}
	return buf.String()
}

// instrToString formats an instruction in a human-readable format, in the
// context of the program.
func (pg ϡprogram) instrToString(instr ϡinstr, ix int) string {
	var buf bytes.Buffer

	op, n, a0, a1, a2 := instr.decode()
	rule := pg.ruleNameAt(ix)
	if rule == "" {
		rule = "<bootstrap>"
	}
	stdFmt := "%s.%s"
	switch op {
	case ϡopCall, ϡopCumulOrF, ϡopReturn, ϡopExit, ϡopRestore,
		ϡopRestoreIfF, ϡopNilIfF, ϡopNilIfT:
		buf.WriteString(fmt.Sprintf(stdFmt, rule, op))
	case ϡopCallA, ϡopCallB, ϡopJump, ϡopJumpIfT, ϡopJumpIfF, ϡopPopVJumpIfF, ϡopTakeLOrJump:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d", rule, op, a0))
	case ϡopPush:
		buf.WriteString(fmt.Sprintf(stdFmt+" %s %d %d", rule, op, ϡstackNm[a0], a1, a2))
		orin := n
		n -= 3
		for n > 0 {
			ix++
			a0, a1, a2, a3 := pg.instrs[ix].decodeLs()
			n -= 4
			buf.WriteString(fmt.Sprintf(" %d %d %d %d", a0, a1, a2, a3))
		}
		buf.WriteString(fmt.Sprintf(" (n=%d)", orin))
	case ϡopPop:
		buf.WriteString(fmt.Sprintf(stdFmt+" %s", rule, op, ϡstackNm[a0]))
	case ϡopMatch:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d (%s)", rule, op, a0, pg.ms[a0]))
	case ϡopStoreIfT:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d (%s)", rule, op, a0, pg.ss[a0]))
	default:
		buf.WriteString(fmt.Sprintf(stdFmt+" %d %d", rule, op, a0, a1))
	}
	return buf.String()
}

// ruleNameAt returns the name of the rule that contains the instruction
// index. It returns an empty string is the instruction is not part of a
// rule (bootstrap instruction, invalid index).
func (pg ϡprogram) ruleNameAt(instrIx int) string {
	if instrIx < 0 || instrIx >= len(pg.instrToRule) {
		return ""
	}
	ssIx := pg.instrToRule[instrIx]
	if ssIx < 0 || ssIx >= len(pg.ss) {
		return ""
	}
	return pg.ss[ssIx]
}

// ϡvm holds the state to execute a compiled grammar.
type ϡvm struct {
	// input
	filename string
	parser   *ϡparser

	// options
	debug   bool
	memoize bool
	recover bool

	// program data
	pc  int
	pg  *ϡprogram
	cur current

	// stacks
	p *ϡpstack
	l *ϡlstack
	v *ϡvstack
	i *ϡistack
	a *ϡastack

	// TODO: memoization...
	// TODO: farthest failure position

	// error list
	errs errList
}

// setOptions applies the options in sequence on the vm. It returns the
// vm to allow for chaining calls.
func (v *ϡvm) setOptions(opts []Option) *ϡvm {
	for _, opt := range opts {
		opt(v)
	}
	return v
}

// addErr adds the error at the current parser position, without rule name
// information.
func (v *ϡvm) addErr(err error) {
	v.addErrAt(err, -1, v.parser.pt.position)
}

// addErrAt adds the error at the specified position, for the instruction
// at instrIx.
func (v *ϡvm) addErrAt(err error, instrIx int, pos position) {
	var buf bytes.Buffer
	if v.filename != "" {
		buf.WriteString(v.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%s", pos))

	ruleNm := v.pg.ruleNameAt(instrIx)
	if ruleNm != "" {
		buf.WriteString(": ")
		buf.WriteString("rule " + ruleNm)
	}

	pe := &parserError{Inner: err, ϡprefix: buf.String()}
	v.errs.ϡadd(pe)
}

// dumpSnapshot writes a dump of the current VM state to w.
func (v *ϡvm) dumpSnapshot(w io.Writer) {
	var buf bytes.Buffer

	if v.filename != "" {
		buf.WriteString(v.filename + ":")
	}
	buf.WriteString(fmt.Sprintf("%s: %#U\n", v.parser.pt.position, v.parser.pt.rn))

	// write the next 5 instructions
	ix := v.pc - 1
	if ix > 0 {
		ix--
	}
	stdFmt := ". [%d]: %s"
	for i := 0; i < 5; i++ {
		stdFmt := stdFmt
		if ix == v.pc-1 {
			stdFmt = ">" + stdFmt[1:]
		}
		instr := v.pg.instrs[ix]
		op, n, _, _, _ := instr.decode()
		switch op {
		case ϡopCall:
			buf.WriteString(fmt.Sprintf(stdFmt+"\n", ix, v.pg.instrToString(instr, ix)))
			ix = v.i.pop() // continue with instructions at this index
			v.i.push(ix)
			continue
		default:
			buf.WriteString(fmt.Sprintf(stdFmt+"\n", ix, v.pg.instrToString(instr, ix)))
		}
		ix++
		n -= 3
		for n > 0 {
			ix++
			n -= 4
		}
		if ix >= len(v.pg.instrs) {
			break
		}
	}

	// // print the stacks
	// buf.WriteString("[ P: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.p) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.p[len(v.p)-i-1]
	// 	buf.WriteString(fmt.Sprintf("\"%v\"", val))
	// }
	// buf.WriteString(" ]\n[ V: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.v) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.v[len(v.v)-i-1]
	// 	buf.WriteString(fmt.Sprintf("%#v", val))
	// }
	// buf.WriteString(" ]\n[ I: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.i) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.i[len(v.i)-i-1]
	// 	buf.WriteString(fmt.Sprintf("%d", val))
	// }
	// buf.WriteString(" ]\n[ L: ")
	// for i := 0; i < 3; i++ {
	// 	if len(v.l) <= i {
	// 		break
	// 	}
	// 	if i > 0 {
	// 		buf.WriteString(", ")
	// 	}
	// 	val := v.l[len(v.l)-i-1]
	// 	buf.WriteString(fmt.Sprintf("%v", val))
	// }
	// buf.WriteString(" ]\n")
	fmt.Fprintln(w, buf.String())
}

// run executes the provided program in this VM, and returns the result.
func (v *ϡvm) run(pg *ϡprogram) (interface{}, error) {
	v.pg = pg
	v.a = newAstack(256) // make(ϡastack, 0, 128)
	v.i = newIstack(256) // make(ϡistack, 0, 128)
	v.v = newVstack(256) // make(ϡvstack, 0, 128)
	v.l = newLstack(256) // make(ϡlstack, 0, 128)
	v.p = newPstack(256) // make(ϡpstack, 0, 128)
	ret := v.dispatch()

	// if the match failed, translate that to a nil result and make
	// sure it returns an error
	if ret == ϡmatchFailed {
		ret = nil
		if len(v.errs) == 0 {
			v.addErr(errNoMatch)
		}
	}

	return ret, v.errs.ϡerr()
}

// dispatch is the proper execution method of the VM, it loops over
// the instructions and executes each opcode.
func (v *ϡvm) dispatch() interface{} {
	var instrPath []int
	if v.debug {
		fmt.Fprintln(os.Stderr, v.pg)
		defer func() {
			var buf bytes.Buffer

			buf.WriteString("Execution path:\n")
			for _, ix := range instrPath {
				buf.WriteString(fmt.Sprintf("[%3d]: %s\n", ix, v.pg.instrToString(v.pg.instrs[ix], ix)))
			}
			fmt.Fprintln(os.Stderr, buf.String())
		}()
	}

	if v.recover {
		defer func() {
			if e := recover(); e != nil {
				switch e := e.(type) {
				case error:
					v.addErrAt(e, v.pc-1, v.parser.pt.position)
				default:
					v.addErrAt(fmt.Errorf("%v", e), v.pc-1, v.parser.pt.position)
				}
			}
		}()
	}

	// move to first rune before starting the loop
	v.parser.read()
	for {
		// fetch and decode the instruction
		instr := v.pg.instrs[v.pc]
		op, n, a0, a1, a2 := instr.decode()
		instrPath = append(instrPath, v.pc)

		// increment program counter
		v.pc++

		switch op {
		case ϡopCall:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			ix := v.i.pop()
			v.i.push(v.pc)
			v.pc = ix

		case ϡopCallA:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			v.v.pop()
			start := v.p.pop()
			v.cur.pos = start.position
			v.cur.text = v.parser.sliceFrom(start)
			if a0 >= len(v.pg.as) {
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}
			fn := v.pg.as[a0]
			val, err := fn(v)
			if err != nil {
				v.addErrAt(err, v.pc-1, start.position)
			}
			v.v.push(val)

		case ϡopCallB:
			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}
			v.cur.pos = v.parser.pt.position
			v.cur.text = nil
			if a0 >= len(v.pg.bs) {
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}
			fn := v.pg.bs[a0]
			val, err := fn(v)
			if err != nil {
				v.addErrAt(err, v.pc-1, v.parser.pt.position)
			}
			if !val {
				v.v.push(ϡmatchFailed)
				break
			}
			v.v.push(nil)

		case ϡopCumulOrF:
			va, vb := v.v.pop(), v.v.pop()
			if va == ϡmatchFailed {
				v.v.push(ϡmatchFailed)
				break
			}
			switch vb := vb.(type) {
			case []interface{}:
				vb = append(vb, va)
				v.v.push(vb)
			case ϡsentinel:
				v.v.push([]interface{}{va})
			default:
				panic(fmt.Sprintf("invalid %s value type on the V stack: %T", op, vb))
			}

		case ϡopExit:
			return v.v.pop()

		case ϡopNilIfF:
			if top := v.v.pop(); top == ϡmatchFailed {
				v.v.push(nil)
				break
			}
			v.v.push(ϡmatchFailed)

		case ϡopNilIfT:
			if top := v.v.pop(); top != ϡmatchFailed {
				v.v.push(nil)
				break
			}
			v.v.push(ϡmatchFailed)

		case ϡopJump:
			v.pc = a0

		case ϡopJumpIfF:
			if top := v.v.peek(); top == ϡmatchFailed {
				v.pc = a0
			}

		case ϡopJumpIfT:
			if top := v.v.peek(); top != ϡmatchFailed {
				v.pc = a0
			}

		case ϡopMatch:
			start := v.parser.pt
			if a0 >= len(v.pg.ms) {
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}
			m := v.pg.ms[a0]
			if ok := m.match(v.parser); ok {
				v.v.push(v.parser.sliceFrom(start))
				break
			}
			v.v.push(ϡmatchFailed)
			v.parser.pt = start

			if v.debug {
				v.dumpSnapshot(os.Stderr)
			}

		case ϡopPop:
			switch a0 {
			case ϡlstackID:
				v.l.pop()
			case ϡpstackID:
				v.p.pop()
			case ϡastackID:
				v.a.pop()
			case ϡvstackID:
				v.v.pop()
			default:
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}

		case ϡopPopVJumpIfF:
			if top := v.v.peek(); top == ϡmatchFailed {
				v.v.pop()
				v.pc = a0
			}

		case ϡopPush:
			switch a0 {
			case ϡpstackID:
				v.p.push(v.parser.pt)
			case ϡistackID:
				v.i.push(a1)
			case ϡvstackID:
				if a1 >= len(ϡvSpecialValues) {
					panic(fmt.Sprintf("invalid %s V stack argument: %d", op, a1))
				}
				v.v.push(ϡvSpecialValues[a1])
			case ϡastackID:
				v.a.push()
			case ϡlstackID:
				// n = L args to push + 1, for the lstackID
				n--
				ar := make([]int, n)
				src := []int{a1, a2}
				n -= 2
				for n > 0 {
					// need more
					instr := v.pg.instrs[v.pc]
					a0, a1, a2, a3 := instr.decodeLs()
					src = append(src, a0, a1, a2, a3)
					v.pc++
					n -= 4
				}
				copy(ar, src)
				v.l.push(ar)
			default:
				panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
			}

		case ϡopRestore:
			pt := v.p.pop()
			v.parser.pt = pt

		case ϡopRestoreIfF:
			pt := v.p.pop()
			if top := v.v.peek(); top == ϡmatchFailed {
				v.parser.pt = pt
			}

		case ϡopReturn:
			ix := v.i.pop()
			v.pc = ix

		case ϡopStoreIfT:
			if top := v.v.peek(); top != ϡmatchFailed {
				// get the label name
				if a0 >= len(v.pg.ss) {
					panic(fmt.Sprintf("invalid %s argument: %d", op, a0))
				}
				lbl := v.pg.ss[a0]

				// store the value
				as := v.a.peek()
				as[lbl] = top
			}

		case ϡopTakeLOrJump:
			ix := v.l.take()
			if ix < 0 {
				v.pc = a0
				break
			}
			v.i.push(ix)

		default:
			panic(fmt.Sprintf("unknown opcode %s", op))
		}
	}
}
