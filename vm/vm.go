package vm

// ϡsentinel is a type used to define sentinel values that shouldn't
// be equal to something else.
type ϡsentinel int

// ϡmatchFailed is a sentinel value used to indicate a match failure.
const ϡmatchFailed ϡsentinel = iota

type ϡmemoizedResult struct {
	v  interface{}
	pt ϡsvpt
}

// ϡprogram is the data structure that is generated by the builder
// based on an input PEG. It contains the program information required
// to execute the grammar using the vm.
type ϡprogram struct {
	instrs []ϡinstr

	// lists
	ms []ϡmatcher
	as []func(*ϡvm) (interface{}, error)
	bs []func(*ϡvm) (bool, error)
	ss []string
}

type ϡvm struct {
	// input
	filename string
	parser   *ϡparser

	// options
	debug   bool
	memoize bool
	recover bool

	// runtime state
	pc int
	pg *ϡprogram

	// stacks
	p ϡpstack
	l ϡlstack
	v ϡvstack
	i ϡistack

	// error list
	errs *errList
}

// setOptions applies the options in sequence on the vm. It returns the
// vm to allow for chaining calls.
func (v *ϡvm) setOptions(opts []Option) *ϡvm {
	for _, opt := range opts {
		opt(v)
	}
	return v
}

// TODO : make run receive the list of instructions and the various lists,
// so it is easy to generate parsers on-the-fly for tests, without saving
// it to file.
func (v *ϡvm) run(pg *ϡprogram) (interface{}, error) {
	v.pg = pg
	ret := v.dispatch()
	if ret == ϡmatchFailed {
		ret = nil
		if len(*v.errs) == 0 {
			v.addErr(errNoMatch)
		}
	}
	return ret, v.errs.ϡerr()
}

func (v *ϡvm) dispatch() interface{} {
	return nil
}
